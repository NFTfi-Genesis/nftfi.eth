{
  "language": "Solidity",
  "sources": {
    "contracts/BaseTokenLock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\n\nimport \"./NFTFI.sol\";\nimport \"./TokenUtilityAccounting.sol\";\n\nimport \"./utils/Ownable.sol\";\n\n/**\n * @title TokenLock\n * @author NFTfi\n * @dev This contract allows users to lock tokens with a request-based withdrawal mechanism. Withdrawals\n * have cooldown periods and need a protocol signature if the tokens withdrawn come from the distributor\n * and not from an external source. It integrates with a `TokenUtilityAccounting` contract.\n */\nabstract contract BaseTokenLock is Ownable, Pausable {\n    using SafeERC20 for NFTFI;\n\n    // Contract that calculates a token utility score with a (locked) time based multiplier.\n    // Optional, can be left zero-address and added in the future.\n    TokenUtilityAccounting public tokenUtilityAccounting;\n    NFTFI public immutable nftfiToken;\n\n    // Cooldown time before a withdrawal can be executed after request in seconds\n    uint256 public cooldown;\n\n    mapping(address => uint256) public lockedTokens;\n    mapping(address => uint256) public distributorLockedTokens;\n\n    mapping(address => uint256) public withdrawalRequestAmounts;\n\n    mapping(bytes32 => bool) public withdrawRequests;\n\n    /**\n     * @dev Emitted when tokens are locked in the contract.\n     * @param _amount The amount of tokens locked.\n     * @param _user Address of the user who locked the tokens.\n     */\n    event Locked(uint256 _amount, address indexed _user);\n\n    /**\n     * @dev Emitted when a user requests to withdraw their tokens.\n     * @param _amount The amount of tokens the user wants to withdraw.\n     * @param _user Address of the user requesting the withdrawal.\n     */\n    event WithdrawalRequested(uint256 _amount, address indexed _user, uint256 _timestamp);\n\n    /**\n     * @dev Emitted when a user withdraws their tokens.\n     * @param _amount The amount of tokens withdrawn.\n     * @param _user Address of the user making the withdrawal.\n     */\n    event Withdrawn(uint256 _amount, address indexed _user);\n\n    /**\n     * @dev Emitted when a user's withdrawal request is deleted.\n     * @param _amount The amount of tokens the user initially wanted to withdraw.\n     * @param _user Address of the user whose request was deleted.\n     * @param _timestamp When request was made (unix timstamp in seconds)\n     */\n    event WithdrawalRequestDeleted(uint256 _amount, address indexed _user, uint256 _timestamp);\n\n    /**\n     * @dev Initializes the contract, setting initial admin, token, distributor, and cooldown values.\n     * @param _admin Admin's address.\n     * @param _nftfi Address of the NFTFI token.\n     * @param _cooldown Cooldown time in seconds.\n     */\n    constructor(\n        address _admin,\n        address _nftfi,\n        address _tokenUtilityAccounting,\n        uint256 _cooldown\n    ) Ownable(_admin) {\n        nftfiToken = NFTFI(_nftfi);\n        tokenUtilityAccounting = TokenUtilityAccounting(_tokenUtilityAccounting);\n        cooldown = _cooldown;\n    }\n\n    /**\n     * @dev Internal function to handle locking of tokens.\n     * @param _amount Amount of tokens to lock.\n     * @param _beneficiary Address for whom the tokens are being locked.\n     */\n    function _lockTokens(uint256 _amount, address _beneficiary) internal whenNotPaused {\n        lockedTokens[_beneficiary] += _amount;\n        tokenUtilityAccounting.lock(_beneficiary, _amount);\n        nftfiToken.safeTransferFrom(msg.sender, address(this), _amount);\n        emit Locked(_amount, _beneficiary);\n    }\n\n    /**\n     * @dev Internal request, makes it possible that we request a withdrawal right away\n     * after tokens are claimed without locking and unlocking.\n     * @param _amount Amount of tokens to request for withdrawal.\n     */\n    function _requestWithdrawal(uint256 _amount, address _beneficiary) internal whenNotPaused {\n        require(\n            _amount + withdrawalRequestAmounts[_beneficiary] <= lockedTokens[_beneficiary],\n            \"request amounts > total\"\n        );\n        bytes32 requestHash = _calculateRequestHash(_amount, _beneficiary, block.timestamp);\n        require(!withdrawRequests[requestHash], \"duplicate request\");\n        withdrawalRequestAmounts[_beneficiary] += _amount;\n        withdrawRequests[requestHash] = true;\n        emit WithdrawalRequested(_amount, _beneficiary, block.timestamp);\n    }\n\n    function _checkAndDeleteRequest(\n        uint256 _amount,\n        address _beneficiary,\n        uint256 _requestTimestamp\n    ) internal whenNotPaused {\n        bytes32 requestHash = _calculateRequestHash(_amount, _beneficiary, _requestTimestamp);\n        require(withdrawRequests[requestHash], \"no request\");\n        require(_amount <= withdrawalRequestAmounts[msg.sender], \"amount > requestAmounts\");\n        delete withdrawRequests[requestHash];\n        withdrawalRequestAmounts[msg.sender] -= _amount;\n        emit WithdrawalRequestDeleted(_amount, msg.sender, _requestTimestamp);\n    }\n\n    /**\n     * @dev Allows a user to withdraw their tokens after a cooldown,\n     * with a protocol signature if we withdraw from the ditributor locked pot.\n     * @param _amount Amount of tokens to withdraw.\n     * @param _requestTimestamp Timestamp of the original withdrawal request.\n     */\n    function _withdraw(uint256 _amount, uint256 _requestTimestamp) internal whenNotPaused {\n        require(_amount <= lockedTokens[msg.sender], \"withdraw amount > total\");\n        // cooldown checking feature can be turned off by setting it to 0\n        if (cooldown > 0) {\n            require(block.timestamp >= _requestTimestamp + cooldown, \"cooldown not up\");\n            _checkAndDeleteRequest(_amount, msg.sender, _requestTimestamp);\n        }\n        if (cooldown == 0) {\n            if (withdrawalRequestAmounts[msg.sender] > 0) {\n                // if cooldown is disabled, we have to delete existing\n                // cooldowns, otherwise re-using it will cause anomalies\n                _checkAndDeleteRequest(_amount, msg.sender, _requestTimestamp);\n            } else {\n                // if there are no withdrawalRequests anymore, we have to unlock here\n                tokenUtilityAccounting.unlock(msg.sender, _amount);\n            }\n        }\n\n        lockedTokens[msg.sender] -= _amount;\n\n        nftfiToken.safeTransfer(msg.sender, _amount);\n        emit Withdrawn(_amount, msg.sender);\n    }\n\n    /**\n     * @dev Allows the owner to set a new TokenUtilityAccounting contract.\n     * @param _newTokenUtilityAccounting Address of the new TokenUtilityAccounting contract.\n     */\n    function setTokenUtilityAccounting(address _newTokenUtilityAccounting) external onlyOwner {\n        tokenUtilityAccounting = TokenUtilityAccounting(_newTokenUtilityAccounting);\n    }\n\n    /**\n     * @dev Sets up new cooldown period\n     * cooldown checking feature can be turned off by setting it to 0\n     * @param _cooldown - Cooldown time before a withdrawal can be executed after request in seconds\n     */\n    function setCooldown(uint256 _cooldown) external onlyOwner {\n        cooldown = _cooldown;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - Only the owner can call this method.\n     * - The contract must not be paused.\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - Only the owner can call this method.\n     * - The contract must be paused.\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Calculates the hash of a withdrawal request.\n     * @param _amount Amount of tokens to withdraw.\n     * @param _user Address of the user.\n     * @param _timestamp Timestamp of the request.\n     * @return Hash of the withdrawal request.\n     */\n    function _calculateRequestHash(\n        uint256 _amount,\n        address _user,\n        uint256 _timestamp\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_amount, _user, _timestamp));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/NFTFI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title NFTFI\n * @author NFTfi\n * @dev standard ERC20 token\n */\ncontract NFTFI is ERC20 {\n    constructor(uint256 _initialSupply, address _owner) ERC20(\"NFTfi Token\", \"NFTFI\") {\n        _mint(_owner, _initialSupply);\n    }\n}\n"
    },
    "contracts/TokenUtilityAccounting.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.19;\n\nimport \"./utils/Ownable.sol\";\n\n/**\n * @title TokenUtilityAccounting\n * @author NFTfi\n * @dev\n */\ncontract TokenUtilityAccounting is Ownable {\n    mapping(address => bool) public tokenLocks;\n\n    mapping(address => uint256) public weightedAvgLockTimes;\n    mapping(address => uint256) public amounts;\n\n    // these two only needed if we wanted to distribute a finite,\n    // given amount of rewards proportionally for locking times and amounts acrued\n    uint256 public totalWeightedAvgLockTime;\n    uint256 public totalAmount;\n\n    event Update(\n        address indexed _user,\n        uint256 _weightedAvgLockTime,\n        uint256 _acruedUserAmount,\n        uint256 _totalWeightedAvgLockTime,\n        uint256 _totalAmount\n    );\n\n    constructor(address _admin, address[] memory _tokenLockAddresses) Ownable(_admin) {\n        _addTokenLocks(_tokenLockAddresses);\n    }\n\n    modifier onlyTokenLock() {\n        require(tokenLocks[msg.sender], \"Only token lock\");\n        _;\n    }\n\n    function lock(address _user, uint256 _amount) external onlyTokenLock {\n        _updateUserWeightedAvgLockTime(_user, _amount);\n        _updateTotalWeightedAvgLockTime(_amount);\n        amounts[_user] += _amount;\n        totalAmount += _amount;\n        emit Update(_user, weightedAvgLockTimes[_user], amounts[_user], totalWeightedAvgLockTime, totalAmount);\n    }\n\n    function unlock(address _user, uint256 _amount) external onlyTokenLock {\n        amounts[_user] -= _amount;\n        totalAmount -= _amount;\n        emit Update(_user, weightedAvgLockTimes[_user], amounts[_user], totalWeightedAvgLockTime, totalAmount);\n    }\n\n    /**\n     * @dev updates weighted avg lock time for a given user based on the added amount\n     * @param _user -\n     * @param _amount - amount added\n     */\n    function _updateUserWeightedAvgLockTime(address _user, uint256 _amount) internal {\n        weightedAvgLockTimes[_user] = _calculateWeightedAvgLockTime(\n            _amount,\n            amounts[_user],\n            weightedAvgLockTimes[_user]\n        );\n    }\n\n    /**\n     * @dev updates weighted avg lock time for the whole system based on the added amount\n     * @param _amount - amount added\n     */\n    function _updateTotalWeightedAvgLockTime(uint256 _amount) internal {\n        totalWeightedAvgLockTime = _calculateWeightedAvgLockTime(_amount, totalAmount, totalWeightedAvgLockTime);\n    }\n\n    /**\n     * @dev calculates weightedAvgMultiplier virtual timestamp value with\n     * a new data point of token _amount weight and the current time\n     * This function is either called by _updateAvgMultiplierStart or has to be called after\n     * an explicit stake() or a deleteWithdrawRequest(), or any other possible instances,\n     * The function takes the existing average and it's weight (existing balance) then calculates\n     * it with the new value and weight with a weighted avg calculation between the 2 datapoints.\n     * @param _amount - amount added\n     * @param _oldAmount - cumulative amount before\n     * @param _oldWeightedAvgLockTime -\n     */\n    function _calculateWeightedAvgLockTime(\n        uint256 _amount,\n        uint256 _oldAmount,\n        uint256 _oldWeightedAvgLockTime\n    ) internal view returns (uint256) {\n        if (_oldAmount == 0 || _oldWeightedAvgLockTime == 0) {\n            // if we are at initial state with just 1 datapoint\n            return block.timestamp;\n        } else {\n            uint256 totalWeight = _oldAmount + _amount;\n            // weighted avg calculation between the old value and the new lock timestamp\n            return (_oldAmount * _oldWeightedAvgLockTime + _amount * block.timestamp) / totalWeight;\n        }\n    }\n\n    function _addTokenLocks(address[] memory _tokenLockAddresses) internal {\n        for (uint256 index = 0; index < _tokenLockAddresses.length; ++index) {\n            tokenLocks[_tokenLockAddresses[index]] = true;\n        }\n    }\n\n    function addTokenLocks(address[] memory _tokenLockAddresses) external onlyOwner {\n        _addTokenLocks(_tokenLockAddresses);\n    }\n\n    function removeTokenLocks(address[] memory _tokenLockAddresses) external onlyOwner {\n        for (uint256 index = 0; index < _tokenLockAddresses.length; ++index) {\n            tokenLocks[_tokenLockAddresses[index]] = false;\n        }\n    }\n}\n"
    },
    "contracts/utils/Ownable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * Modified version from openzeppelin/contracts/access/Ownable.sol that allows to\n * initialize the owner using a parameter in the constructor\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    address private _ownerCandidate;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor(address _initialOwner) {\n        _setOwner(_initialOwner);\n    }\n\n    /**\n     * @dev Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`).\n     * Can only be called by the current owner.\n     */\n    function requestTransferOwnership(address _newOwnerCandidate) public virtual onlyOwner {\n        require(_newOwnerCandidate != address(0), \"Ownable: new owner is the zero address\");\n        _ownerCandidate = _newOwnerCandidate;\n    }\n\n    function acceptTransferOwnership() public virtual {\n        require(_ownerCandidate == _msgSender(), \"Ownable: not owner candidate\");\n        _setOwner(_ownerCandidate);\n        delete _ownerCandidate;\n    }\n\n    function cancelTransferOwnership() public virtual onlyOwner {\n        delete _ownerCandidate;\n    }\n\n    function rejectTransferOwnership() public virtual {\n        require(_ownerCandidate == _msgSender(), \"Ownable: not owner candidate\");\n        delete _ownerCandidate;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Sets the owner.\n     */\n    function _setOwner(address _newOwner) internal {\n        address oldOwner = _owner;\n        _owner = _newOwner;\n        emit OwnershipTransferred(oldOwner, _newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/ExternalTokenLock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.19;\n\nimport \"./BaseTokenLock.sol\";\n\n/**\n * @title TokenLock\n * @author NFTfi\n * @dev This contract allows users to lock tokens with a request-based withdrawal mechanism. Withdrawals\n * have cooldown periods and need a protocol signature if the tokens withdrawn come from the distributor\n * and not from an external source. It integrates with a `TokenUtilityAccounting` contract.\n */\ncontract ExternalTokenLock is BaseTokenLock {\n    /**\n     * @dev Initializes the contract, setting initial admin, token, distributor, and cooldown values.\n     * @param _admin Admin's address.\n     * @param _nftfi Address of the NFTFI token.\n     * @param _cooldown Cooldown time in seconds.\n     */\n    constructor(\n        address _admin,\n        address _nftfi,\n        address _tokenUtilityAccounting,\n        uint256 _cooldown\n    ) BaseTokenLock(_admin, _nftfi, _tokenUtilityAccounting, _cooldown) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev Allows a user to lock their externally owned tokens.\n     * User gets an amount of \"utility points\" in return for the amount\n     * of time their tokens are locked and not requested yet.\n     * User has to call requestWithdrawal to start cooldown before being able to withdraw tokens.\n     * @param _amount Amount of tokens to lock.\n     */\n    function lockTokens(uint256 _amount) external {\n        _lockTokens(_amount, msg.sender);\n    }\n\n    /**\n     * @dev Allows a user to request a withdrawal of their tokens.\n     * @param _amount Amount of tokens to request for withdrawal.\n     */\n    function requestWithdrawal(uint256 _amount) external {\n        _requestWithdrawal(_amount, msg.sender);\n        tokenUtilityAccounting.unlock(msg.sender, _amount);\n    }\n\n    /**\n     * @dev Allows a user to delete their withdrawal request. Re-locks in TokenUtilityAccounting,\n     * so user will receive \"utility points\" again.\n     * @param _amount Amount of tokens that were requested for withdrawal.\n     * @param _requestTimestamp Timestamp of the original withdrawal request.\n     */\n    function deleteWithdrawRequest(uint256 _amount, uint256 _requestTimestamp) external {\n        _checkAndDeleteRequest(_amount, msg.sender, _requestTimestamp);\n        tokenUtilityAccounting.lock(msg.sender, _amount);\n    }\n\n    /**\n     * @dev Allows a user to withdraw their tokens after a cooldown,\n     * with a protocol signature if we withdraw from the ditributor locked pot.\n     * @param _amount Amount of tokens to withdraw.\n     * @param _requestTimestamp Timestamp of the original withdrawal request.\n     */\n    function withdraw(uint256 _amount, uint256 _requestTimestamp) public {\n        _withdraw(_amount, _requestTimestamp);\n    }\n\n    function withdrawMultiple(uint256[] calldata _amounts, uint256[] calldata _requestTimestamps) external {\n        require(_amounts.length == _requestTimestamps.length, \"parameter arity mismatch\");\n        for (uint256 i = 0; i < _amounts.length; ++i) {\n            withdraw(_amounts[i], _requestTimestamps[i]);\n        }\n    }\n}\n"
    },
    "contracts/DistributorTokenLock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.19;\n\nimport \"./DistributorRegistry.sol\";\nimport \"./TokenUtilityAccounting.sol\";\nimport \"./BaseTokenLock.sol\";\n\nimport \"./utils/ProtocolSigningUtils.sol\";\n\n/**\n * @title DistributorTokenLock\n * @author NFTfi\n * @dev This contract allows users to lock tokens with a request-based withdrawal mechanism. Withdrawals\n * have cooldown periods and need a protocol signature if the tokens withdrawn come from the distributor\n * and not from an external source. It integrates with a `TokenUtilityAccounting` contract.\n */\ncontract DistributorTokenLock is BaseTokenLock {\n    DistributorRegistry public immutable distributorRegistry;\n\n    address public protocolSignerAddress;\n\n    /**\n     * @dev Initializes the contract, setting initial admin, token, distributor, and cooldown values.\n     * @param _admin Admin's address.\n     * @param _nftfi Address of the NFTFI token.\n     * @param _distributorRegistry MerkleDistributor contract address.\n     * @param _protocolSignerAddress protocol signature checking feature can be turned off by setting it to 0 address\n     * @param _cooldown Cooldown time in seconds.\n     */\n    constructor(\n        address _admin,\n        address _nftfi,\n        address _distributorRegistry,\n        address _tokenUtilityAccounting,\n        address _protocolSignerAddress,\n        uint256 _cooldown\n    ) BaseTokenLock(_admin, _nftfi, _tokenUtilityAccounting, _cooldown) {\n        distributorRegistry = DistributorRegistry(_distributorRegistry);\n        protocolSignerAddress = _protocolSignerAddress;\n    }\n\n    /**\n     * @dev Allows the distributor to lock tokens on behalf of a beneficiary (claimer).\n     * Only callable by the distributor, requests a withdrawal for the user for the\n     * full amount automatically, so cooldown starts at claim time.\n     * User gets no \"utility points\" (TokenUtilityAccounting) except if they delete the created request.\n     * @param _amount Amount of tokens to lock.\n     * @param _beneficiary Address of the beneficiary.\n     */\n    function lockTokens(uint256 _amount, address _beneficiary) external {\n        require(distributorRegistry.isDistributor(msg.sender), \"Only registered distributor\");\n        _lockTokens(_amount, _beneficiary);\n        _requestWithdrawal(_amount, _beneficiary);\n    }\n\n    /**\n     * @dev Allows a user to withdraw their tokens after a cooldown,\n     * with a protocol signature if we withdraw from the ditributor locked pot.\n     * @param _amount Amount of tokens to withdraw.\n     * @param _requestTimestamp Timestamp of the original withdrawal request.\n     * @param _protocolSignatureExpiry The timestamp after which the signature is considered expired and invalid.\n     * Not checked if we withdraw from the non-ditributor locked pot.\n     * Can be left with 0 values in that case.\n     * @param _protocolSignature The actual ECDSA signature bytes of the signed data\n     * Not checked if we withdraw from the non-ditributor locked pot.\n     * Can be left with 0 values in that case.\n     */\n    function withdraw(\n        uint256 _amount,\n        uint256 _requestTimestamp,\n        uint256 _protocolSignatureExpiry,\n        bytes calldata _protocolSignature\n    ) public {\n        if (protocolSignerAddress != address(0)) {\n            require(\n                ProtocolSigningUtils.isValidProtocolSignature(\n                    msg.sender,\n                    _amount,\n                    _requestTimestamp,\n                    ProtocolSigningUtils.ProtocolSignature({\n                        expiry: _protocolSignatureExpiry,\n                        signer: protocolSignerAddress,\n                        signature: _protocolSignature\n                    })\n                ),\n                \"Protocol signature invalid\"\n            );\n        }\n\n        _withdraw(_amount, _requestTimestamp);\n        tokenUtilityAccounting.unlock(msg.sender, _amount);\n    }\n\n    function withdrawMultiple(\n        uint256[] calldata _amounts,\n        uint256[] calldata _requestTimestamps,\n        uint256[] calldata _protocolSignatureExpiries,\n        bytes[] calldata _protocolSignatures\n    ) external {\n        require(_amounts.length == _requestTimestamps.length, \"parameter arity mismatch\");\n        require(_amounts.length == _requestTimestamps.length, \"parameter arity mismatch 2\");\n        require(_amounts.length == _requestTimestamps.length, \"parameter arity mismatch 3\");\n        for (uint256 i = 0; i < _amounts.length; ++i) {\n            withdraw(_amounts[i], _requestTimestamps[i], _protocolSignatureExpiries[i], _protocolSignatures[i]);\n        }\n    }\n\n    /**\n     * @dev Sets up new protocol signer address,\n     * protocol signature checking feature can be turned off by setting it to 0 address\n     * @param _protocolSignerAddress -\n     */\n    function setProtocolSignerAddress(address _protocolSignerAddress) external onlyOwner {\n        protocolSignerAddress = _protocolSignerAddress;\n    }\n}\n"
    },
    "contracts/DistributorRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./utils/Ownable.sol\";\nimport \"./MerkleDistributor.sol\";\n\ncontract DistributorRegistry is Ownable {\n    mapping(uint256 => address) public distributorsBySeason;\n    mapping(address => bool) public distributors;\n\n    /**\n     * @dev Struct to represent claim data for batch processing.\n     * @param rootNumber The Merkle root number associated with the claim.\n     * @param index The index within the Merkle tree for this particular claim.\n     * @param amount The amount of tokens to be claimed.\n     * @param merkleProof The Merkle proof associated with the claim to validate it against the root.\n     */\n    struct MultiClaimData {\n        uint256 seasonNumber;\n        uint256 index;\n        uint256 amount;\n        bytes32[] merkleProof;\n    }\n\n    event DistributorAdded(uint256 indexed _seasonNumber, address _distributor);\n    event DistributorRemoved(uint256 indexed _seasonNumber, address _distributor);\n\n    constructor(address _admin) Ownable(_admin) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function addDistributor(uint256 _seasonNumber, address _distributor) external onlyOwner {\n        require(distributorsBySeason[_seasonNumber] == address(0), \"Season number already set\");\n        distributorsBySeason[_seasonNumber] = _distributor;\n        distributors[_distributor] = true;\n        emit DistributorAdded(_seasonNumber, _distributor);\n    }\n\n    function removeDistributor(uint256 _seasonNumber) external onlyOwner {\n        address distributor = distributorsBySeason[_seasonNumber];\n        delete distributorsBySeason[_seasonNumber];\n        delete distributors[distributor];\n        emit DistributorRemoved(_seasonNumber, distributor);\n    }\n\n    function isDistributor(address _distributor) external view returns (bool) {\n        return distributors[_distributor];\n    }\n\n    /**\n     * @dev Supports batch claiming, instead of transferring to the recipient directly,\n     * tokens are locked in the TokenLock contract.\n     * multi claim where amounts are the same will fail with 'duplicate request' (request collision in token lock),\n     * users need to claim one by one on the distributors in this case\n     * @param _claimData An array containing details for each claim the caller wishes to make.\n     */\n    function multiClaim(MultiClaimData[] memory _claimData) external {\n        for (uint256 i = 0; i < _claimData.length; ++i) {\n            uint256 seasonNumber = _claimData[i].seasonNumber;\n            uint256 index = _claimData[i].index;\n            uint256 amount = _claimData[i].amount;\n            bytes32[] memory merkleProof = _claimData[i].merkleProof;\n\n            MerkleDistributor(distributorsBySeason[seasonNumber]).claimFromRegistry(\n                index,\n                amount,\n                merkleProof,\n                msg.sender\n            );\n        }\n    }\n}\n"
    },
    "contracts/utils/ProtocolSigningUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\n\n/**\n * @title  ProtocolSigningUtils\n * @author NFTfi\n * @notice Helper library for NFTfi. This contract manages verifying signatures\n * from an NFTfi protocol address to enforce KYC requirements on-chain\n */\nlibrary ProtocolSigningUtils {\n    /**\n     * @dev Signature struct\n     *\n     * @param expiry The timestamp after which the signature is considered expired and invalid.\n     * @param signer Signing protocol address\n     * @param signature The actual ECDSA signature bytes of the signed data\n     */\n    struct ProtocolSignature {\n        uint256 expiry;\n        address signer;\n        bytes signature;\n    }\n\n    /* ********* */\n    /* FUNCTIONS */\n    /* ********* */\n\n    /**\n     * @notice Verifies the validity of a protocol signature.\n     * @dev This function checks whether the protocol signature is valid and hasn't expired.\n     * It constructs a message from the input parameters and verifies its signature against\n     * the expected signer.\n     *\n     * @param _user The address of the user initiating the withdrawal.\n     * @param _amount The amount the user is withdrawing.\n     * @param _requestTimestamp The timestamp when the withdrawal request was made.\n     * @param _protocolSignature - The signature structure containing:\n     * - signer: The address of the signer, in this case and address controlled by the protocol\n     * - expiry: Date when the signature expires\n     * - signature: The ECDSA signature of the protocol, obtained off-chain ahead of time, signing the following\n     * combination of parameters:\n     *   - user withdrawing from TokenLock\n     *   - amount withdrawn\n     *   - requestTimestamp time of the request for the withdrawal to check signature for each individual call\n     *   - protocolSignature.signer\n     *   - protocolSignature.expiry\n     * @return bool True if the protocol signature is valid; otherwise, false.\n     */\n    function isValidProtocolSignature(\n        address _user,\n        uint256 _amount,\n        uint256 _requestTimestamp,\n        ProtocolSignature memory _protocolSignature\n    ) internal view returns (bool) {\n        require(block.timestamp <= _protocolSignature.expiry, \"Protocol Signature expired\");\n\n        bytes32 message = keccak256(\n            abi.encodePacked(_user, _amount, _requestTimestamp, _protocolSignature.signer, _protocolSignature.expiry)\n        );\n\n        return\n            SignatureChecker.isValidSignatureNow(\n                _protocolSignature.signer,\n                ECDSA.toEthSignedMessageHash(message),\n                _protocolSignature.signature\n            );\n    }\n}\n\n/**\n * @title  ProtocolSigningUtils\n * @author NFTfi\n * @notice Deployable contract for of the above library\n */\ncontract ProtocolSigningUtilsContract {\n    /* ********* */\n    /* FUNCTIONS */\n    /* ********* */\n\n    /**\n     * @notice Verifies the validity of a protocol signature.\n     * @dev This function checks whether the protocol signature is valid and hasn't expired.\n     * It constructs a message from the input parameters and verifies its signature against\n     * the expected signer.\n     *\n     * @param _user The address of the user initiating the withdrawal.\n     * @param _amount The amount the user is withdrawing.\n     * @param _requestTimestamp The timestamp when the withdrawal request was made.\n     * @param _protocolSignature - The signature structure containing:\n     * - signer: The address of the signer, in this case and address controlled by the protocol\n     * - expiry: Date when the signature expires\n     * - signature: The ECDSA signature of the protocol, obtained off-chain ahead of time, signing the following\n     * combination of parameters:\n     *   - user withdrawing from TokenLock\n     *   - amount withdrawn\n     *   - requestTimestamp time of the request for the withdrawal to check signature for each individual call\n     *   - protocolSignature.signer\n     *   - protocolSignature.expiry\n     * @return bool True if the protocol signature is valid; otherwise, false.\n     */\n    function isValidProtocolSignature(\n        address _user,\n        uint256 _amount,\n        uint256 _requestTimestamp,\n        ProtocolSigningUtils.ProtocolSignature memory _protocolSignature\n    ) external view returns (bool) {\n        return ProtocolSigningUtils.isValidProtocolSignature(_user, _amount, _requestTimestamp, _protocolSignature);\n    }\n}\n"
    },
    "contracts/MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\n\nimport \"./NFTFI.sol\";\nimport \"./DistributorTokenLock.sol\";\n\nimport \"./utils/Ownable.sol\";\n\n/**\n * @title MerkleDistributor\n * @author NFTfi\n * @dev Modified version of Uniswap's MerkleDistributor\n * https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol\n * Main difference: in claim instead of transferring the tokens to the user,\n * we transfer it to the tokenLock contract\n */\ncontract MerkleDistributor is Ownable, Pausable {\n    NFTFI public immutable nftfi;\n    DistributorTokenLock public immutable distributorTokenLock;\n    address public immutable distributorRegistry;\n    uint256 public immutable claimCutoffDate;\n\n    bytes32 public merkleRoot;\n\n    mapping(uint256 => uint256) private claimedBitMap;\n\n    event Claimed(uint256 _index, uint256 _amount, bytes32[] _merkleProof, address indexed _account);\n\n    /**\n     * @dev Constructor initializes references for NFTfi token and TokenLock contract.\n     * It also sets the owner of the contract.\n     * @param _admin The initial owner of the contract, usually able to set Merkle roots.\n     * @param _nftfi Address of the NFTfi token contract.\n     * @param _distributorTokenLock Address of the TokenLock contract where tokens are transferred upon claims.\n     */\n    constructor(\n        bytes32 _merkleRoot,\n        address _admin,\n        address _nftfi,\n        address _distributorTokenLock,\n        address _distributorRegistry,\n        uint256 _claimCutoffDate\n    ) Ownable(_admin) {\n        merkleRoot = _merkleRoot;\n        nftfi = NFTFI(_nftfi);\n        distributorTokenLock = DistributorTokenLock(_distributorTokenLock);\n        distributorRegistry = _distributorRegistry;\n        claimCutoffDate = _claimCutoffDate;\n    }\n\n    function isClaimed(uint256 _index) public view returns (bool) {\n        uint256 claimedWordIndex = _index / 256;\n        uint256 claimedBitIndex = _index % 256;\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\n        uint256 mask = (1 << claimedBitIndex);\n        return claimedWord & mask == mask;\n    }\n\n    function _setClaimed(uint256 _index) private {\n        uint256 claimedWordIndex = _index / 256;\n        uint256 claimedBitIndex = _index % 256;\n        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);\n    }\n\n    function claim(\n        uint256 _index,\n        uint256 _amount,\n        bytes32[] memory _merkleProof\n    ) external {\n        _claim(_index, _amount, _merkleProof, msg.sender);\n    }\n\n    function claimFromRegistry(\n        uint256 _index,\n        uint256 _amount,\n        bytes32[] memory _merkleProof,\n        address _claimer\n    ) external {\n        require(msg.sender == distributorRegistry, \"Only registry\");\n        _claim(_index, _amount, _merkleProof, _claimer);\n    }\n\n    function _claim(\n        uint256 _index,\n        uint256 _amount,\n        bytes32[] memory _merkleProof,\n        address _claimer\n    ) internal whenNotPaused {\n        require(block.timestamp < claimCutoffDate, \"cutoff date elapsed\");\n\n        require(!isClaimed(_index), \"distributor: already claimed\");\n\n        // Verify the merkle proof.\n        bytes32 node = keccak256(abi.encodePacked(_index, _claimer, _amount));\n        require(MerkleProof.verify(_merkleProof, merkleRoot, node), \"distributor: invalid proof\");\n\n        // Mark it claimed and send the token.\n        _setClaimed(_index);\n\n        nftfi.approve(address(distributorTokenLock), _amount);\n        distributorTokenLock.lockTokens(_amount, _claimer);\n\n        emit Claimed(_index, _amount, _merkleProof, _claimer);\n    }\n\n    /**\n     * @dev Drain to admin address in an emergency\n     * @param _amount of tokens to drain\n     */\n    function drain(uint256 _amount) public onlyOwner {\n        nftfi.transfer(owner(), _amount);\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - Only the owner can call this method.\n     * - The contract must not be paused.\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - Only the owner can call this method.\n     * - The contract must be paused.\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../Address.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper: Provide a single mechanism to verify both private-key (EOA) ECDSA signature and\n * ERC1271 contract signatures. Using this instead of ECDSA.recover in your contract will make them compatible with\n * smart contract wallets such as Argent and Gnosis.\n *\n * Note: unlike ECDSA signatures, contract signature's are revocable, and the outcome of this function can thus change\n * through time. It could return true at block N and false at block N+1 (or the opposite).\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/test/DistributorFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"../utils/Ownable.sol\";\nimport \"../MerkleDistributor.sol\";\nimport \"../DistributorRegistry.sol\";\n\ncontract DistributorFactory is Ownable {\n    DistributorRegistry public immutable distributorRegistry;\n    address public immutable nftfi;\n    address public immutable tokenLock;\n\n    constructor(\n        address _admin,\n        address _distributorRegistry,\n        address _nftfi,\n        address _tokenLock\n    ) Ownable(_admin) {\n        distributorRegistry = DistributorRegistry(_distributorRegistry);\n        nftfi = _nftfi;\n        tokenLock = _tokenLock;\n    }\n\n    function addDistributor(\n        bytes32 _merkleRoot,\n        uint256 _claimCutoffDate,\n        uint256 _seasonNumber\n    ) public onlyOwner {\n        MerkleDistributor merkleDistributor = new MerkleDistributor(\n            _merkleRoot,\n            owner(),\n            nftfi,\n            tokenLock,\n            address(distributorRegistry),\n            _claimCutoffDate\n        );\n        distributorRegistry.addDistributor(_seasonNumber, address(merkleDistributor));\n    }\n\n    function replaceDistributor(\n        bytes32 _merkleRoot,\n        uint256 _claimCutoffDate,\n        uint256 _seasonNumber\n    ) public onlyOwner {\n        distributorRegistry.removeDistributor(_seasonNumber);\n        addDistributor(_merkleRoot, _claimCutoffDate, _seasonNumber);\n    }\n\n    function acceptDistributorRegistryTransferOwnership() public {\n        distributorRegistry.acceptTransferOwnership();\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}