{
  "address": "0x0488791b0FD38157e0bE1a4cb3D27502E30df139",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bundler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_personalBundlerFactory",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_customBaseURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "immutableId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bundleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "personalBundler",
          "type": "address"
        }
      ],
      "name": "ConvertedToPersonalBundler",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "immutableId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bundleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "personalBundler",
          "type": "address"
        }
      ],
      "name": "ImmutableMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bundleOfImmutable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bundler",
      "outputs": [
        {
          "internalType": "contract NftfiBundler",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_immutableId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_personalBundler",
          "type": "address"
        }
      ],
      "name": "convertToPersonalBundler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_immutableId",
          "type": "uint256"
        }
      ],
      "name": "createAndConvertToPersonalBundler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "immutableOfBundle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "immutableOfPersonalBundler",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "mintBundle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bundleId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "personalBundleId",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "personalBundlerFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "personalBundlerOfImmutable",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_immutableId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_nftAirdrop",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftAirdropId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_is1155",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_nftAirdropAmount",
          "type": "uint256"
        }
      ],
      "name": "pullAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rejectTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwnerCandidate",
          "type": "address"
        }
      ],
      "name": "requestTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "rescueERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "rescueERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_customBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_immutableId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_immutableId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawAndDecompose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfac1a141583f01482750252fa95c5c9039762a2f258d5d82bdff236c1f362b34",
  "receipt": {
    "to": null,
    "from": "0x02e037F56728E947e92Af2c05baF7FeF387Ddd06",
    "contractAddress": "0x0488791b0FD38157e0bE1a4cb3D27502E30df139",
    "transactionIndex": 46,
    "gasUsed": "3442223",
    "logsBloom": "0x
    "blockHash": "0x9839727cd263617feb1e611aa1cfb1157fae13ff110c756fb68fbe115a74ede1",
    "transactionHash": "0xfac1a141583f01482750252fa95c5c9039762a2f258d5d82bdff236c1f362b34",
    "logs": [
      {
        "transactionIndex": 46,
        "blockNumber": 8103091,
        "transactionHash": "0xfac1a141583f01482750252fa95c5c9039762a2f258d5d82bdff236c1f362b34",
        "address": "0x0488791b0FD38157e0bE1a4cb3D27502E30df139",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000042e0911810c50ff07b12305365495aeb0b2b4f93"
        ],
        "data": "0x",
        "logIndex": 86,
        "blockHash": "0x9839727cd263617feb1e611aa1cfb1157fae13ff110c756fb68fbe115a74ede1"
      }
    ],
    "blockNumber": 8103091,
    "cumulativeGasUsed": "9940198",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x42e0911810C50FF07B12305365495aeb0b2b4f93",
    "0xEF0c4BE966a94623224dBc5aFfdeB6a98804C9E8",
    "0x8b3519652d36f94bB9513852E75eD5060E7C1ed3",
    "NFTFi Immutable Bundler",
    "IBNFI",
    "https://metadata.nftfi.com/bundles/v1/immutable/"
  ],
  "solcInputHash": "4d2fe29bb9bcc7b729a2a79c750939bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bundler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_personalBundlerFactory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_customBaseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"immutableId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bundleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"personalBundler\",\"type\":\"address\"}],\"name\":\"ConvertedToPersonalBundler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"immutableId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bundleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"personalBundler\",\"type\":\"address\"}],\"name\":\"ImmutableMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bundleOfImmutable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bundler\",\"outputs\":[{\"internalType\":\"contract NftfiBundler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_immutableId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_personalBundler\",\"type\":\"address\"}],\"name\":\"convertToPersonalBundler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_immutableId\",\"type\":\"uint256\"}],\"name\":\"createAndConvertToPersonalBundler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"immutableOfBundle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"immutableOfPersonalBundler\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintBundle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bundleId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"personalBundleId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"personalBundlerFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"personalBundlerOfImmutable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_immutableId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_nftAirdrop\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftAirdropId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_is1155\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_nftAirdropAmount\",\"type\":\"uint256\"}],\"name\":\"pullAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rejectTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"requestTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"rescueERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_customBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_immutableId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_immutableId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAndDecompose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"NFTfi\",\"details\":\"This contract prevents owners of the bundles to remove any child, but they can still receive new children.      Solves the problem of bundles being emptied by their owner between they are listed and the loan begins.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Stores the bundler, name and symbol\",\"params\":{\"_bundler\":\"Address of the bundler contract\",\"_name\":\"name of the token contract\",\"_symbol\":\"symbol of the token contract\"}},\"convertToPersonalBundler(uint256,address)\":{\"params\":{\"_immutableId\":\"the id of the immutable bundle\",\"_personalBundler\":\"the address of the personal bundler conract\"}},\"createAndConvertToPersonalBundler(uint256)\":{\"params\":{\"_immutableId\":\"the id of the immutable bundle\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintBundle(address)\":{\"params\":{\"_to\":\"The address that owns the new immutable bundle\"},\"returns\":{\"_0\":\"The id of the new created immutable bundle\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"params\":{\"_bundleId\":\"The bundle that is being transferred param _data Arbitrary data\",\"_from\":\"The previous owner of the token\"},\"returns\":{\"_0\":\"the selector of this method\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pause()\":{\"details\":\"Triggers stopped state. Requirements: - Only the owner can call this method. - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pullAirdrop(uint256,address,uint256,address,bytes,address,uint256,bool,uint256)\":{\"params\":{\"_data\":\"- function selector to be called on the airdropping contract\",\"_immutableId\":\"- the id of the immutable bundle\",\"_is1155\":\"-\",\"_nftAirdrop\":\"- address of the used claiming nft in the drop\",\"_nftAirdropAmount\":\"- amount in case of 1155\",\"_nftAirdropId\":\"- id of the used claiming nft in the drop\",\"_nftContract\":\"- contract address of the target nft of the drop\",\"_nftId\":\"- id of the target nft of the drop\",\"_target\":\"- address of the airdropping contract\"}},\"requestTransferOwnership(address)\":{\"details\":\"Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`). Can only be called by the current owner.\"},\"rescueERC20(address,address)\":{\"params\":{\"_receiver\":\"- receiver of the token\",\"_tokenAddress\":\"- address of the token contract for the token to be sent out\"}},\"rescueERC721(address,uint256,address)\":{\"params\":{\"_receiver\":\"- receiver of the token\",\"_tokenAddress\":\"- address of the token contract for the token to be sent out\",\"_tokenId\":\"- id token to be sent out\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"Sets baseURI.\",\"params\":{\"_customBaseURI\":\"- Base URI\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"unpause()\":{\"details\":\"Returns to normal state. Requirements: - Only the owner can call this method. - The contract must be paused.\"},\"withdraw(uint256,address)\":{\"params\":{\"_immutableId\":\"the id of the immutable bundle\",\"_to\":\"the address of the receiver of the bundle\"}},\"withdrawAndDecompose(uint256,address)\":{\"params\":{\"_immutableId\":\"the id of the immutable bundle\",\"_to\":\"the address of the receiver of the bundle\"}}},\"title\":\"ImmutableBundle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"convertToPersonalBundler(uint256,address)\":{\"notice\":\"Takes an existing immutable regular bundle and converts it to a personal bundle, has to be provided with a personal bundler contract address\"},\"createAndConvertToPersonalBundler(uint256)\":{\"notice\":\"Takes an existing immutable regular bundle and converts it to a personal bundle, creates the personal bundler contract implicitly.\"},\"mintBundle(address)\":{\"notice\":\"Mints a new bundle storing it as immutable bundle.         The bundle can receive children but there is no way to remove a child, unless withdrawing the bundle.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Method invoked when a bundle is received param The address that caused the transfer\"},\"pullAirdrop(uint256,address,uint256,address,bytes,address,uint256,bool,uint256)\":{\"notice\":\"this function initiates a flashloan to pull an airdrop from a tartget contract\"},\"rescueERC20(address,address)\":{\"notice\":\"used by the owner account to be able to drain ERC20 tokens received as airdrops for the locked  collateral NFT-s\"},\"rescueERC721(address,uint256,address)\":{\"notice\":\"used by the owner account to be able to drain ERC721 tokens received as airdrops for the locked  collateral NFT-s\"},\"withdraw(uint256,address)\":{\"notice\":\"Withdraw a bundle\"},\"withdrawAndDecompose(uint256,address)\":{\"notice\":\"Withdraw a bundle and remove all the children from the bundle\"}},\"notice\":\"Bundle wrapper that allows users to lock bundles so they can be used for loans.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ImmutableBundle.sol\":\"ImmutableBundle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8c578d9e30c8f2bb7ac01d108766df87d42b73d4d3638f01d494a894fe7c1f4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd644260d8e4e64563a7adba96d774dbaac6ae89c2ee58ef49a19850ff1239b08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/ERC998TopDown.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./IERC998ERC721TopDown.sol\\\";\\nimport \\\"./IERC998ERC721TopDownEnumerable.sol\\\";\\n\\n/**\\n * @title ERC998TopDown\\n * @author NFTfi\\n * @dev ERC998ERC721 Top-Down Composable Non-Fungible Token.\\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-998.md\\n * This implementation does not support children to be nested bundles, erc20 nor bottom-up\\n */\\nabstract contract ERC998TopDown is\\n    ERC721Enumerable,\\n    IERC998ERC721TopDown,\\n    IERC998ERC721TopDownEnumerable,\\n    ReentrancyGuard\\n{\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // return this.rootOwnerOf.selector ^ this.rootOwnerOfChild.selector ^\\n    //   this.tokenOwnerOf.selector ^ this.ownerOfChild.selector;\\n    bytes32 public constant ERC998_MAGIC_VALUE = 0xcd740db500000000000000000000000000000000000000000000000000000000;\\n    bytes32 internal constant ERC998_MAGIC_MASK = 0xffffffff00000000000000000000000000000000000000000000000000000000;\\n\\n    uint256 public tokenCount = 0;\\n\\n    // tokenId => child contract\\n    mapping(uint256 => EnumerableSet.AddressSet) internal childContracts;\\n\\n    // tokenId => (child address => array of child tokens)\\n    mapping(uint256 => mapping(address => EnumerableSet.UintSet)) internal childTokens;\\n\\n    // child address => childId => tokenId\\n    // this is used for ERC721 type tokens\\n    mapping(address => mapping(uint256 => uint256)) internal childTokenOwner;\\n\\n    /**\\n     * @notice Tells whether the ERC721 type child exists or not\\n     * @param _childContract The contract address of the child token\\n     * @param _childTokenId The tokenId of the child\\n     * @return True if the child exists, false otherwise\\n     */\\n    function childExists(address _childContract, uint256 _childTokenId) external view virtual returns (bool) {\\n        uint256 tokenId = childTokenOwner[_childContract][_childTokenId];\\n        return tokenId != 0;\\n    }\\n\\n    /**\\n     * @notice Get the total number of child contracts with tokens that are owned by _tokenId\\n     * @param _tokenId The parent token of child tokens in child contracts\\n     * @return uint256 The total number of child contracts with tokens owned by _tokenId\\n     */\\n    function totalChildContracts(uint256 _tokenId) public view virtual override returns (uint256) {\\n        return childContracts[_tokenId].length();\\n    }\\n\\n    /**\\n     * @notice Get child contract by tokenId and index\\n     * @param _tokenId The parent token of child tokens in child contract\\n     * @param _index The index position of the child contract\\n     * @return childContract The contract found at the _tokenId and index\\n     */\\n    function childContractByIndex(uint256 _tokenId, uint256 _index)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address childContract)\\n    {\\n        return childContracts[_tokenId].at(_index);\\n    }\\n\\n    /**\\n     * @notice Get the total number of child tokens owned by tokenId that exist in a child contract\\n     * @param _tokenId The parent token of child tokens\\n     * @param _childContract The child contract containing the child tokens\\n     * @return uint256 The total number of child tokens found in child contract that are owned by _tokenId\\n     */\\n    function totalChildTokens(uint256 _tokenId, address _childContract) external view override returns (uint256) {\\n        return childTokens[_tokenId][_childContract].length();\\n    }\\n\\n    /**\\n     * @notice Get child token owned by _tokenId, in child contract, at index position\\n     * @param _tokenId The parent token of the child token\\n     * @param _childContract The child contract of the child token\\n     * @param _index The index position of the child token\\n     * @return childTokenId The child tokenId for the parent token, child token and index\\n     */\\n    function childTokenByIndex(\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _index\\n    ) external view virtual override returns (uint256 childTokenId) {\\n        return childTokens[_tokenId][_childContract].at(_index);\\n    }\\n\\n    /**\\n     * @notice Get the parent tokenId and its owner of a ERC721 child token\\n     * @param _childContract The contract address of the child token\\n     * @param _childTokenId The tokenId of the child\\n     * @return parentTokenOwner The parent address of the parent token and ERC998 magic value\\n     * @return parentTokenId The parent tokenId of _childTokenId\\n     */\\n    function ownerOfChild(address _childContract, uint256 _childTokenId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bytes32 parentTokenOwner, uint256 parentTokenId)\\n    {\\n        parentTokenId = childTokenOwner[_childContract][_childTokenId];\\n        require(parentTokenId != 0, \\\"child token does not exist\\\");\\n        address parentTokenOwnerAddress = ownerOf(parentTokenId);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            parentTokenOwner := or(ERC998_MAGIC_VALUE, parentTokenOwnerAddress)\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the root owner of tokenId\\n     * @param _tokenId The token to query for a root owner address\\n     * @return rootOwner The root owner at the top of tree of tokens and ERC998 magic value.\\n     */\\n    function rootOwnerOf(uint256 _tokenId) public view virtual override returns (bytes32 rootOwner) {\\n        return rootOwnerOfChild(address(0), _tokenId);\\n    }\\n\\n    /**\\n     * @notice Get the root owner of a child token\\n     * @dev Returns the owner at the top of the tree of composables\\n     * Use Cases handled:\\n     * - Case 1: Token owner is this contract and token.\\n     * - Case 2: Token owner is other external top-down composable\\n     * - Case 3: Token owner is other contract\\n     * - Case 4: Token owner is user\\n     * @param _childContract The contract address of the child token\\n     * @param _childTokenId The tokenId of the child\\n     * @return rootOwner The root owner at the top of tree of tokens and ERC998 magic value\\n     */\\n    function rootOwnerOfChild(address _childContract, uint256 _childTokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bytes32 rootOwner)\\n    {\\n        address rootOwnerAddress;\\n        if (_childContract != address(0)) {\\n            (rootOwnerAddress, _childTokenId) = _ownerOfChild(_childContract, _childTokenId);\\n        } else {\\n            rootOwnerAddress = ownerOf(_childTokenId);\\n        }\\n\\n        if (rootOwnerAddress.isContract()) {\\n            try IERC998ERC721TopDown(rootOwnerAddress).rootOwnerOfChild(address(this), _childTokenId) returns (\\n                bytes32 returnedRootOwner\\n            ) {\\n                // Case 2: Token owner is other external top-down composable\\n                if (returnedRootOwner & ERC998_MAGIC_MASK == ERC998_MAGIC_VALUE) {\\n                    return returnedRootOwner;\\n                }\\n            } catch {\\n                // solhint-disable-previous-line no-empty-blocks\\n            }\\n        }\\n\\n        // Case 3: Token owner is other contract\\n        // Or\\n        // Case 4: Token owner is user\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            rootOwner := or(ERC998_MAGIC_VALUE, rootOwnerAddress)\\n        }\\n        return rootOwner;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     * The interface id 0x1efdf36a is added. The spec claims it to be the interface id of IERC998ERC721TopDown.\\n     * But it is not.\\n     * It is added anyway in case some contract checks it being compliant with the spec.\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC721Enumerable) returns (bool) {\\n        return\\n            _interfaceId == type(IERC998ERC721TopDown).interfaceId ||\\n            _interfaceId == type(IERC998ERC721TopDownEnumerable).interfaceId ||\\n            _interfaceId == 0x1efdf36a ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @notice Mints a new bundle\\n     * @param _to The address that owns the new bundle\\n     * @return The id of the new bundle\\n     */\\n    function safeMint(address _to) public virtual returns (uint256) {\\n        uint256 id = ++tokenCount;\\n        _safeMint(_to, id);\\n\\n        return id;\\n    }\\n\\n    /**\\n     * @notice Transfer child token from top-down composable to address\\n     * @param _fromTokenId The owning token to transfer from\\n     * @param _to The address that receives the child token\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The tokenId of the token that is being transferred\\n     */\\n    function safeTransferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) external virtual override nonReentrant {\\n        _transferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n        IERC721(_childContract).safeTransferFrom(address(this), _to, _childTokenId);\\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n    }\\n\\n    /**\\n     * @notice Transfer child token from top-down composable to address or other top-down composable\\n     * @param _fromTokenId The owning token to transfer from\\n     * @param _to The address that receives the child token\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The tokenId of the token that is being transferred\\n     * @param _data Additional data with no specified format\\n     */\\n    function safeTransferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId,\\n        bytes memory _data\\n    ) external virtual override nonReentrant {\\n        _transferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n        if (_to == address(this)) {\\n            _validateAndReceiveChild(msg.sender, _childContract, _childTokenId, _data);\\n        } else {\\n            IERC721(_childContract).safeTransferFrom(address(this), _to, _childTokenId, _data);\\n            emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer child token from top-down composable to address\\n     * @param _fromTokenId The owning token to transfer from\\n     * @param _to The address that receives the child token\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The tokenId of the token that is being transferred\\n     */\\n    function transferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) external virtual override nonReentrant {\\n        _transferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n        _oldNFTsTransfer(_to, _childContract, _childTokenId);\\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n    }\\n\\n    /**\\n     * @notice NOT SUPPORTED\\n     * Intended to transfer bottom-up composable child token from top-down composable to other ERC721 token.\\n     */\\n    function transferChildToParent(\\n        uint256,\\n        address,\\n        uint256,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) external virtual override {\\n        revert(\\\"BOTTOM_UP_CHILD_NOT_SUPPORTED\\\");\\n    }\\n\\n    /**\\n     * @notice Transfer a child token from an ERC721 contract to a composable. Used for old tokens that does not\\n     * have a safeTransferFrom method like cryptokitties\\n     * @dev This contract has to be approved first in _childContract\\n     * @param _from The address that owns the child token.\\n     * @param _tokenId The token that becomes the parent owner\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The tokenId of the child token\\n     */\\n    function getChild(\\n        address _from,\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) public virtual override nonReentrant {\\n        require(_from == msg.sender, \\\"_from should be msg.sender\\\");\\n        _receiveChild(_from, _tokenId, _childContract, _childTokenId);\\n        IERC721(_childContract).transferFrom(_from, address(this), _childTokenId);\\n    }\\n\\n    /**\\n     * @notice A token receives a child token\\n     * param The address that caused the transfer\\n     * @param _from The owner of the child token\\n     * @param _childTokenId The token that is being transferred to the parent\\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId\\n     * @return the selector of this method\\n     */\\n    function onERC721Received(\\n        address,\\n        address _from,\\n        uint256 _childTokenId,\\n        bytes calldata _data\\n    ) external virtual override nonReentrant returns (bytes4) {\\n        _validateAndReceiveChild(_from, msg.sender, _childTokenId, _data);\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev ERC721 implementation hook that is called before any token transfer. Prevents nested bundles\\n     * @param _from address of the current owner of the token\\n     * @param _to destination address\\n     * @param _tokenId id of the token to transfer\\n     */\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal virtual override {\\n        require(_to != address(this), \\\"nested bundles not allowed\\\");\\n        super._beforeTokenTransfer(_from, _to, _tokenId);\\n    }\\n\\n    /**\\n     * @dev Validates the child transfer parameters and remove the child from the bundle\\n     * @param _fromTokenId The owning token to transfer from\\n     * @param _to The address that receives the child token\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The tokenId of the token that is being transferred\\n     */\\n    function _transferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) internal virtual {\\n        _validateReceiver(_to);\\n        _validateChildTransfer(_fromTokenId, _childContract, _childTokenId);\\n        _removeChild(_fromTokenId, _childContract, _childTokenId);\\n    }\\n\\n    /**\\n     * @dev Validates the child transfer parameters\\n     * @param _fromTokenId The owning token to transfer from\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The tokenId of the token that is being transferred\\n     */\\n    function _validateChildTransfer(\\n        uint256 _fromTokenId,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) internal virtual {\\n        uint256 tokenId = childTokenOwner[_childContract][_childTokenId];\\n        require(tokenId != 0, \\\"_transferChild _childContract _childTokenId not found\\\");\\n        require(tokenId == _fromTokenId, \\\"ComposableTopDown: _transferChild wrong tokenId found\\\");\\n        _validateTransferSender(tokenId);\\n    }\\n\\n    /**\\n     * @dev Validates the receiver of a child transfer\\n     * @param _to The address that receives the child token\\n     */\\n    function _validateReceiver(address _to) internal virtual {\\n        require(_to != address(0), \\\"child transfer to zero address\\\");\\n    }\\n\\n    /**\\n     * @dev Updates the state to remove a child\\n     * @param _tokenId The owning token to transfer from\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The tokenId of the token that is being transferred\\n     */\\n    function _removeChild(\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) internal virtual {\\n        // remove child token\\n        childTokens[_tokenId][_childContract].remove(_childTokenId);\\n        delete childTokenOwner[_childContract][_childTokenId];\\n\\n        // remove contract\\n        if (childTokens[_tokenId][_childContract].length() == 0) {\\n            childContracts[_tokenId].remove(_childContract);\\n        }\\n    }\\n\\n    /**\\n     * @dev Validates the data from a child transfer and receives it\\n     * @param _from The owner of the child token\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The token that is being transferred to the parent\\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId\\n     */\\n    function _validateAndReceiveChild(\\n        address _from,\\n        address _childContract,\\n        uint256 _childTokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        require(_data.length > 0, \\\"data must contain tokenId to transfer the child token to\\\");\\n        // convert up to 32 bytes of _data to uint256, owner nft tokenId passed as uint in bytes\\n        uint256 tokenId = _parseTokenId(_data);\\n        _receiveChild(_from, tokenId, _childContract, _childTokenId);\\n    }\\n\\n    /**\\n     * @dev Update the state to receive a child\\n     * @param _from The owner of the child token\\n     * @param _tokenId The token receiving the child\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The token that is being transferred to the parent\\n     */\\n    function _receiveChild(\\n        address _from,\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) internal virtual {\\n        require(_exists(_tokenId), \\\"bundle tokenId does not exist\\\");\\n        uint256 childTokensLength = childTokens[_tokenId][_childContract].length();\\n        if (childTokensLength == 0) {\\n            childContracts[_tokenId].add(_childContract);\\n        }\\n        childTokens[_tokenId][_childContract].add(_childTokenId);\\n        childTokenOwner[_childContract][_childTokenId] = _tokenId;\\n        emit ReceivedChild(_from, _tokenId, _childContract, _childTokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of a child\\n     * @param _childContract The contract address of the child token\\n     * @param _childTokenId The tokenId of the child\\n     * @return parentTokenOwner The parent address of the parent token and ERC998 magic value\\n     * @return parentTokenId The parent tokenId of _childTokenId\\n     */\\n    function _ownerOfChild(address _childContract, uint256 _childTokenId)\\n        internal\\n        view\\n        virtual\\n        returns (address parentTokenOwner, uint256 parentTokenId)\\n    {\\n        parentTokenId = childTokenOwner[_childContract][_childTokenId];\\n        require(parentTokenId != 0, \\\"child token does not exist\\\");\\n        return (ownerOf(parentTokenId), parentTokenId);\\n    }\\n\\n    /**\\n     * @dev Convert up to 32 bytes of_data to uint256, owner nft tokenId passed as uint in bytes\\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId\\n     * @return tokenId the token Id encoded in the data\\n     */\\n    function _parseTokenId(bytes memory _data) internal pure virtual returns (uint256 tokenId) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            tokenId := mload(add(_data, 0x20))\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers the NFT using method compatible with old token contracts\\n     * @param _to address of the receiver of the children\\n     * @param _childContract The contract address of the child token\\n     * @param _childTokenId The tokenId of the child\\n     */\\n    function _oldNFTsTransfer(\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) internal {\\n        // This is here to be compatible with cryptokitties and other old contracts that require being owner and\\n        // approved before transferring.\\n        // Does not work with current standard which does not allow approving self, so we must let it fail in that case.\\n        try IERC721(_childContract).approve(address(this), _childTokenId) {\\n            // solhint-disable-previous-line no-empty-blocks\\n        } catch {\\n            // solhint-disable-previous-line no-empty-blocks\\n        }\\n\\n        IERC721(_childContract).transferFrom(address(this), _to, _childTokenId);\\n    }\\n\\n    /**\\n     * @notice Validates that the sender is authorized to perform a child transfer\\n     * @param _fromTokenId The owning token to transfer from\\n     */\\n    function _validateTransferSender(uint256 _fromTokenId) internal virtual {\\n        address rootOwner = address(uint160(uint256(rootOwnerOf(_fromTokenId))));\\n        require(\\n            rootOwner == msg.sender ||\\n                getApproved(_fromTokenId) == msg.sender ||\\n                isApprovedForAll(rootOwner, msg.sender),\\n            \\\"transferChild msg.sender not eligible\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8b432ec7cee3cbba22dd63fa63d4cbb54eb319c9da18f3803e4e04668b5ba79e\",\"license\":\"MIT\"},\"contracts/IBundleBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\ninterface IBundleBuilder {\\n    /**\\n     * @notice data of a erc721 bundle element\\n     *\\n     * @param tokenContract - address of the token contract\\n     * @param id - id of the token\\n     * @param safeTransferable - wether the implementing token contract has a safeTransfer function or not\\n     */\\n    struct BundleElementERC721 {\\n        address tokenContract;\\n        uint256[] ids;\\n        bool safeTransferable;\\n    }\\n\\n    /**\\n     * @notice used to build a bundle from the BundleElements struct,\\n     * returns the id of the created bundle\\n     *\\n     * @param _bundleElements - the lists of erc721 tokens that are to be bundled\\n     */\\n    function buildBundle(BundleElementERC721[] memory _bundleElements) external returns (uint256);\\n\\n    /**\\n     * @notice Remove all the children from the bundle\\n     * @dev This method may run out of gas if the list of children is too big. In that case, children can be removed\\n     *      individually or in smaller batches.\\n     * @param _tokenId the id of the bundle\\n     * @param _receiver address of the receiver of the children\\n     */\\n    function decomposeBundle(uint256 _tokenId, address _receiver) external;\\n\\n    event AddBundleElements(uint256 indexed _tokenId, BundleElementERC721[] _bundleElements);\\n    event RemoveBundleElements(uint256 indexed _tokenId, BundleElementERC721[] _bundleElements);\\n}\\n\",\"keccak256\":\"0x748ecd95e5d440a7dca7d9736cd24932c9756645f04ed6a0ed2c73c6816e44a9\",\"license\":\"BUSL-1.1\"},\"contracts/IERC998ERC721TopDown.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IERC998ERC721TopDown {\\n    event ReceivedChild(\\n        address indexed _from,\\n        uint256 indexed _tokenId,\\n        address indexed _childContract,\\n        uint256 _childTokenId\\n    );\\n    event TransferChild(\\n        uint256 indexed tokenId,\\n        address indexed _to,\\n        address indexed _childContract,\\n        uint256 _childTokenId\\n    );\\n\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _childTokenId,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    function transferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) external;\\n\\n    function safeTransferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) external;\\n\\n    function safeTransferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId,\\n        bytes memory _data\\n    ) external;\\n\\n    function transferChildToParent(\\n        uint256 _fromTokenId,\\n        address _toContract,\\n        uint256 _toTokenId,\\n        address _childContract,\\n        uint256 _childTokenId,\\n        bytes memory _data\\n    ) external;\\n\\n    // getChild function enables older contracts like cryptokitties to be transferred into a composable\\n    // The _childContract must approve this contract. Then getChild can be called.\\n    function getChild(\\n        address _from,\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) external;\\n\\n    function rootOwnerOf(uint256 _tokenId) external view returns (bytes32 rootOwner);\\n\\n    function rootOwnerOfChild(address _childContract, uint256 _childTokenId) external view returns (bytes32 rootOwner);\\n\\n    function ownerOfChild(address _childContract, uint256 _childTokenId)\\n        external\\n        view\\n        returns (bytes32 parentTokenOwner, uint256 parentTokenId);\\n}\\n\",\"keccak256\":\"0x618d02e468cd16a425026d6aa5ef2a6500868cd8f833b34e0cfd63cbefbc37cd\",\"license\":\"MIT\"},\"contracts/IERC998ERC721TopDownEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IERC998ERC721TopDownEnumerable {\\n    function totalChildContracts(uint256 _tokenId) external view returns (uint256);\\n\\n    function childContractByIndex(uint256 _tokenId, uint256 _index) external view returns (address childContract);\\n\\n    function totalChildTokens(uint256 _tokenId, address _childContract) external view returns (uint256);\\n\\n    function childTokenByIndex(\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _index\\n    ) external view returns (uint256 childTokenId);\\n}\\n\",\"keccak256\":\"0xf1aa556e8ebebe9a4ba166ffb77d414b0ee396920ad4943941f66ca6dc7c17fc\",\"license\":\"MIT\"},\"contracts/INftfiBundler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface INftfiBundler is IERC721 {\\n    function safeMint(address _to) external returns (uint256);\\n\\n    function decomposeBundle(uint256 _tokenId, address _receiver) external;\\n}\\n\",\"keccak256\":\"0xca2dcf302199bd5cb13160fb190ee85442bdd5532d6136b10e6dfacabe459819\",\"license\":\"MIT\"},\"contracts/IPermittedNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\ninterface IPermittedNFTs {\\n    function getNFTPermit(address _nftContract) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf2be96024fd118f0eab5a45fcfa618847299fdcd4bd8798824b2331624285ce2\",\"license\":\"BUSL-1.1\"},\"contracts/ImmutableBundle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./PersonalBundlerFactory.sol\\\";\\nimport \\\"./NftfiBundler.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title ImmutableBundle\\n * @author NFTfi\\n * @notice Bundle wrapper that allows users to lock bundles so they can be used for loans.\\n * @dev This contract prevents owners of the bundles to remove any child, but they can still receive new children.\\n *      Solves the problem of bundles being emptied by their owner between they are listed and the loan begins.\\n */\\ncontract ImmutableBundle is ERC721Enumerable, IERC721Receiver, Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n    using Strings for uint256;\\n\\n    // Incremental token id\\n    uint256 public tokenCount = 0;\\n\\n    uint8 public constant personalBundleId = 1;\\n\\n    // Address of the bundler contract\\n    NftfiBundler public immutable bundler;\\n\\n    address public immutable personalBundlerFactory;\\n\\n    string public baseURI;\\n\\n    // immutable tokenId => bundleId\\n    mapping(uint256 => uint256) public bundleOfImmutable;\\n    // bundleId => immutable tokenId\\n    mapping(uint256 => uint256) public immutableOfBundle;\\n\\n    // immutable tokenId => personalBundler contract\\n    mapping(uint256 => address) public personalBundlerOfImmutable;\\n    //personalBundler contract => immutable tokenId\\n    mapping(address => uint256) public immutableOfPersonalBundler;\\n\\n    event ImmutableMinted(uint256 indexed immutableId, uint256 indexed bundleId, address indexed personalBundler);\\n    event ConvertedToPersonalBundler(\\n        uint256 indexed immutableId,\\n        uint256 indexed bundleId,\\n        address indexed personalBundler\\n    );\\n\\n    /**\\n     * @dev Stores the bundler, name and symbol\\n     *\\n     * @param _bundler Address of the bundler contract\\n     * @param _name name of the token contract\\n     * @param _symbol symbol of the token contract\\n     */\\n    constructor(\\n        address _admin,\\n        address _bundler,\\n        address _personalBundlerFactory,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _customBaseURI\\n    ) ERC721(_name, _symbol) Ownable(_admin) {\\n        bundler = NftfiBundler(_bundler);\\n        personalBundlerFactory = _personalBundlerFactory;\\n        _setBaseURI(_customBaseURI);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC721Enumerable) returns (bool) {\\n        return _interfaceId == type(IERC721Receiver).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @notice Mints a new bundle storing it as immutable bundle.\\n     *         The bundle can receive children but there is no way to remove a child, unless withdrawing the bundle.\\n     * @param _to The address that owns the new immutable bundle\\n     * @return The id of the new created immutable bundle\\n     */\\n    function mintBundle(address _to) external whenNotPaused returns (uint256) {\\n        uint256 bundleId = bundler.safeMint(address(this));\\n        return _mintImmutableBundle(_to, bundleId);\\n    }\\n\\n    /**\\n     * @notice Method invoked when a bundle is received\\n     * param The address that caused the transfer\\n     * @param _from The previous owner of the token\\n     * @param _bundleId The bundle that is being transferred\\n     * param _data Arbitrary data\\n     * @return the selector of this method\\n     */\\n    function onERC721Received(\\n        address,\\n        address _from,\\n        uint256 _bundleId,\\n        bytes memory\\n    ) external virtual override whenNotPaused returns (bytes4) {\\n        require(\\n            msg.sender == address(bundler) ||\\n                PersonalBundlerFactory(personalBundlerFactory).personalBundlerExists(msg.sender),\\n            \\\"asset not allowed\\\"\\n        );\\n\\n        // Special check for when onERC721Received is invoked from `mintBundle` call\\n        if (_from != address(0)) {\\n            uint256 immutableId;\\n            if (msg.sender == address(bundler)) {\\n                immutableId = _mintImmutableBundle(_from, _bundleId);\\n            } else {\\n                immutableId = _mintImmutablePersonalBundle(_from, msg.sender);\\n            }\\n        }\\n\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @notice Withdraw a bundle\\n     * @param _immutableId the id of the immutable bundle\\n     * @param _to the address of the receiver of the bundle\\n     */\\n    function withdraw(uint256 _immutableId, address _to) external {\\n        _validateWithdraw(_immutableId, _to);\\n\\n        uint256 bundleId = bundleOfImmutable[_immutableId];\\n        address personalBundler = personalBundlerOfImmutable[_immutableId];\\n\\n        _burnImmutableBundle(_immutableId);\\n\\n        if (personalBundler == address(0)) {\\n            bundler.safeTransferFrom(address(this), _to, bundleId);\\n        } else {\\n            IERC721(personalBundler).safeTransferFrom(address(this), _to, personalBundleId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw a bundle and remove all the children from the bundle\\n     * @param _immutableId the id of the immutable bundle\\n     * @param _to the address of the receiver of the bundle\\n     */\\n    function withdrawAndDecompose(uint256 _immutableId, address _to) external {\\n        _validateWithdraw(_immutableId, _to);\\n\\n        uint256 bundleId = bundleOfImmutable[_immutableId];\\n        address personalBundler = personalBundlerOfImmutable[_immutableId];\\n\\n        _burnImmutableBundle(_immutableId);\\n\\n        if (personalBundler == address(0)) {\\n            bundler.decomposeBundle(bundleId, _to);\\n            bundler.safeTransferFrom(address(this), _to, bundleId);\\n        } else {\\n            NftfiBundler(personalBundler).decomposeBundle(personalBundleId, _to);\\n            IERC721(personalBundler).safeTransferFrom(address(this), _to, personalBundleId);\\n        }\\n    }\\n\\n    /**\\n     * Takes an existing immutable regular bundle and converts it to a personal bundle,\\n     * creates the personal bundler contract implicitly.\\n     *\\n     * @param _immutableId the id of the immutable bundle\\n     */\\n    function createAndConvertToPersonalBundler(uint256 _immutableId) public {\\n        address personalBundler = PersonalBundlerFactory(personalBundlerFactory).createPersonalBundler(address(this));\\n        convertToPersonalBundler(_immutableId, personalBundler);\\n    }\\n\\n    /**\\n     * Takes an existing immutable regular bundle and converts it to a personal bundle,\\n     * has to be provided with a personal bundler contract address\\n     *\\n     * @param _immutableId the id of the immutable bundle\\n     * @param _personalBundler the address of the personal bundler conract\\n     */\\n    function convertToPersonalBundler(uint256 _immutableId, address _personalBundler) public {\\n        require(ownerOf(_immutableId) == msg.sender, \\\"msg.sender not eligible\\\");\\n        require(personalBundlerOfImmutable[_immutableId] == address(0), \\\"already personal bundler\\\");\\n        require(\\n            PersonalBundlerFactory(personalBundlerFactory).personalBundlerExists(_personalBundler),\\n            \\\"not personal bundler\\\"\\n        );\\n        require(ERC721(_personalBundler).ownerOf(personalBundleId) == address(this), \\\"owner has to be this contract\\\");\\n        uint256 bundleId = bundleOfImmutable[_immutableId];\\n        delete bundleOfImmutable[_immutableId];\\n        delete immutableOfBundle[bundleId];\\n        bundler.sendElementsToPersonalBundler(bundleId, _personalBundler);\\n        emit ConvertedToPersonalBundler(_immutableId, bundleId, _personalBundler);\\n        personalBundlerOfImmutable[_immutableId] = _personalBundler;\\n        immutableOfPersonalBundler[_personalBundler] = _immutableId;\\n    }\\n\\n    /**\\n     * @notice this function initiates a flashloan to pull an airdrop from a tartget contract\\n     *\\n     * @param _immutableId - the id of the immutable bundle\\n     * @param _nftContract - contract address of the target nft of the drop\\n     * @param _nftId - id of the target nft of the drop\\n     * @param _target - address of the airdropping contract\\n     * @param _data - function selector to be called on the airdropping contract\\n     * @param _nftAirdrop - address of the used claiming nft in the drop\\n     * @param _nftAirdropId - id of the used claiming nft in the drop\\n     * @param _is1155 -\\n     * @param _nftAirdropAmount - amount in case of 1155\\n     */\\n    function pullAirdrop(\\n        uint256 _immutableId,\\n        address _nftContract,\\n        uint256 _nftId,\\n        address _target,\\n        bytes calldata _data,\\n        address _nftAirdrop,\\n        uint256 _nftAirdropId,\\n        bool _is1155,\\n        uint256 _nftAirdropAmount\\n    ) external {\\n        require(ownerOf(_immutableId) == msg.sender, \\\"pullAirdrop msg.sender not eligible\\\");\\n        if (personalBundlerOfImmutable[_immutableId] != address(0)) {\\n            require(\\n                NftfiBundler(personalBundlerOfImmutable[_immutableId]).childExists(_nftContract, _nftId),\\n                \\\"immutable-nft mismatch\\\"\\n            );\\n            NftfiBundler(personalBundlerOfImmutable[_immutableId]).pullAirdrop(\\n                _nftContract,\\n                _nftId,\\n                _target,\\n                _data,\\n                _nftAirdrop,\\n                _nftAirdropId,\\n                _is1155,\\n                _nftAirdropAmount,\\n                msg.sender\\n            );\\n        } else {\\n            (, uint256 bundleId) = bundler.ownerOfChild(_nftContract, _nftId);\\n            require(bundleOfImmutable[_immutableId] == bundleId, \\\"immutable-nft mismatch\\\");\\n            bundler.pullAirdrop(\\n                _nftContract,\\n                _nftId,\\n                _target,\\n                _data,\\n                _nftAirdrop,\\n                _nftAirdropId,\\n                _is1155,\\n                _nftAirdropAmount,\\n                msg.sender\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Validates the withdraw params\\n     * @param _immutableId the id of the immutable bundle\\n     * @param _to the address of the receiver of the bundle\\n     */\\n    function _validateWithdraw(uint256 _immutableId, address _to) internal view {\\n        require(ownerOf(_immutableId) == msg.sender, \\\"caller is not owner\\\");\\n        require(_to != address(0), \\\"transfer to zero address\\\");\\n    }\\n\\n    /**\\n     * @notice Mints a new immutable bundle.\\n     * @param _to The address that owns the new immutable bundle\\n     * @param _bundleId The associated bundle id\\n     * @return The id of the new created immutable bundle\\n     */\\n    function _mintImmutableBundle(address _to, uint256 _bundleId) internal returns (uint256) {\\n        uint256 immutableId = ++tokenCount;\\n        _safeMint(_to, immutableId);\\n        bundleOfImmutable[immutableId] = _bundleId;\\n        immutableOfBundle[_bundleId] = immutableId;\\n        emit ImmutableMinted(immutableId, _bundleId, address(0));\\n        return immutableId;\\n    }\\n\\n    /**\\n     * @notice Mints a new immutable bundle.\\n     * @param _to The address that owns the new immutable bundle\\n     * @param _personalBundler The associated personal bundler\\n     * @return The id of the new created immutable bundle\\n     */\\n    function _mintImmutablePersonalBundle(address _to, address _personalBundler) internal returns (uint256) {\\n        uint256 immutableId = ++tokenCount;\\n        _safeMint(_to, immutableId);\\n\\n        personalBundlerOfImmutable[immutableId] = _personalBundler;\\n        immutableOfPersonalBundler[_personalBundler] = immutableId;\\n\\n        emit ImmutableMinted(immutableId, 0, _personalBundler);\\n        return immutableId;\\n    }\\n\\n    /**\\n     * @notice Burns an immutable bundle\\n     * @param _immutableId the id of the immutable bundle\\n     */\\n    function _burnImmutableBundle(uint256 _immutableId) internal {\\n        _burn(_immutableId);\\n        if (personalBundlerOfImmutable[_immutableId] != address(0)) {\\n            address personalBundler = personalBundlerOfImmutable[_immutableId];\\n            delete personalBundlerOfImmutable[_immutableId];\\n            delete immutableOfPersonalBundler[personalBundler];\\n        } else {\\n            uint256 bundleId = bundleOfImmutable[_immutableId];\\n            delete bundleOfImmutable[_immutableId];\\n            delete immutableOfBundle[bundleId];\\n        }\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC721 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _tokenId - id token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function rescueERC721(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        address _receiver\\n    ) external onlyOwner {\\n        IERC721 tokenContract = IERC721(_tokenAddress);\\n        if (_tokenAddress == address(bundler)) {\\n            require(immutableOfBundle[_tokenId] == 0, \\\"token is in immutable\\\");\\n        } else if (PersonalBundlerFactory(personalBundlerFactory).personalBundlerExists(_tokenAddress)) {\\n            require(immutableOfPersonalBundler[_tokenAddress] == 0, \\\"token is in immutable\\\");\\n        }\\n        require(tokenContract.ownerOf(_tokenId) == address(this), \\\"nft not owned\\\");\\n        tokenContract.safeTransferFrom(address(this), _receiver, _tokenId);\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC20 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function rescueERC20(address _tokenAddress, address _receiver) external onlyOwner {\\n        IERC20 tokenContract = IERC20(_tokenAddress);\\n        uint256 amount = tokenContract.balanceOf(address(this));\\n        require(amount > 0, \\\"no tokens owned\\\");\\n        tokenContract.safeTransfer(_receiver, amount);\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - Only the owner can call this method.\\n     * - The contract must not be paused.\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - Only the owner can call this method.\\n     * - The contract must be paused.\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Sets baseURI.\\n     * @param _customBaseURI - Base URI\\n     */\\n    function setBaseURI(string memory _customBaseURI) external onlyOwner {\\n        _setBaseURI(_customBaseURI);\\n    }\\n\\n    /**\\n     * @dev Sets baseURI.\\n     */\\n    function _setBaseURI(string memory _customBaseURI) internal virtual {\\n        baseURI = bytes(_customBaseURI).length > 0\\n            ? string(abi.encodePacked(_customBaseURI, _getChainID().toString(), \\\"/\\\"))\\n            : \\\"\\\";\\n    }\\n\\n    /** @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`.\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @dev This function gets the current chain ID.\\n     */\\n    function _getChainID() internal view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\\n\",\"keccak256\":\"0x8ecbcee17a0811768fcf098c953fb26970e14d201a56446ad5cb50ef370b5eac\",\"license\":\"MIT\"},\"contracts/NftfiBundler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ERC998TopDown.sol\\\";\\nimport \\\"./INftfiBundler.sol\\\";\\nimport \\\"./IBundleBuilder.sol\\\";\\nimport \\\"./IPermittedNFTs.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./airdrop/AirdropFlashLoan.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title NftfiBundler\\n * @author NFTfi\\n * @dev ERC998 Top-Down Composable Non-Fungible Token that supports ERC721 children.\\n */\\ncontract NftfiBundler is ERC998TopDown, IBundleBuilder, Ownable {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n    using Strings for uint256;\\n\\n    address public immutable permittedNfts;\\n    address public immutable airdropFlashLoan;\\n\\n    string public baseURI;\\n\\n    /**\\n     * @dev Stores name and symbol\\n     *\\n     * @param _admin - Initial admin of this contract.\\n     * @param _name name of the token contract\\n     * @param _symbol symbol of the token contract\\n     */\\n    constructor(\\n        address _admin,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _customBaseURI,\\n        address _permittedNfts,\\n        address _airdropFlashLoan\\n    ) ERC721(_name, _symbol) Ownable(_admin) {\\n        permittedNfts = _permittedNfts;\\n        airdropFlashLoan = _airdropFlashLoan;\\n        _setBaseURI(_customBaseURI);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IERC721Receiver).interfaceId ||\\n            _interfaceId == type(INftfiBundler).interfaceId ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @notice Tells if an asset is permitted or not\\n     * @param _asset address of the asset\\n     * @return true if permitted, false otherwise\\n     */\\n    function permittedAsset(address _asset) public view returns (bool) {\\n        IPermittedNFTs permittedNFTs = IPermittedNFTs(permittedNfts);\\n        return permittedNFTs.getNFTPermit(_asset) > 0;\\n    }\\n\\n    /**\\n     * @dev used to build a bundle from the BundleElements struct,\\n     * returns the id of the created bundle\\n     *\\n     * @param _bundleElements - the lists of erc721 tokens that are to be bundled\\n     */\\n    function buildBundle(BundleElementERC721[] memory _bundleElements) external override returns (uint256) {\\n        uint256 tokenId = safeMint(msg.sender);\\n        _addBundleElements(tokenId, _bundleElements);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev Adds a set of BundleElementERC721 objects to the specified token ID.\\n     *\\n     * @param _tokenId The ID of the token to add the bundle elements to.\\n     * @param _bundleElements The array of BundleElementERC721 objects to add.\\n     */\\n    function addBundleElements(uint256 _tokenId, BundleElementERC721[] memory _bundleElements) external {\\n        _addBundleElements(_tokenId, _bundleElements);\\n    }\\n\\n    /**\\n     * @dev Removes a set of BundleElementERC721 objects to the specified token ID.\\n     *\\n     * @param _tokenId The ID of the token to remove the bundle elements from.\\n     * @param _bundleElements The array of BundleElementERC721 objects to remove.\\n     */\\n    function removeBundleElements(uint256 _tokenId, BundleElementERC721[] memory _bundleElements) external {\\n        _removeBundleElements(_tokenId, _bundleElements);\\n    }\\n\\n    /**\\n     * @dev Adds and removes a set of BundleElementERC721 objects from the specified token ID.\\n     *\\n     * @param _tokenId The ID of the token to add and remove the bundle elements from.\\n     * @param _toAdd The array of BundleElementERC721 objects to add.\\n     * @param _toRemove The array of BundleElementERC721 objects to remove.\\n     */\\n    function addAndRemoveBundleElements(\\n        uint256 _tokenId,\\n        BundleElementERC721[] memory _toAdd,\\n        BundleElementERC721[] memory _toRemove\\n    ) external {\\n        _addBundleElements(_tokenId, _toAdd);\\n        _removeBundleElements(_tokenId, _toRemove);\\n    }\\n\\n    /**\\n     * @notice Remove all the children from the bundle\\n     * @dev This method may run out of gas if the list of children is too big. In that case, children can be removed\\n     *      individually.\\n     * @param _tokenId the id of the bundle\\n     * @param _receiver address of the receiver of the children\\n     */\\n    function decomposeBundle(uint256 _tokenId, address _receiver) external override {\\n        _validateReceiver(_receiver);\\n        _validateTransferSender(_tokenId);\\n\\n        // In each iteration all contracts children are removed, so eventually all contracts are removed\\n        while (childContracts[_tokenId].length() > 0) {\\n            address childContract = childContracts[_tokenId].at(0);\\n\\n            // In each iteration a child is removed, so eventually all contracts children are removed\\n            while (childTokens[_tokenId][childContract].length() > 0) {\\n                uint256 childId = childTokens[_tokenId][childContract].at(0);\\n\\n                _removeChild(_tokenId, childContract, childId);\\n\\n                try IERC721(childContract).safeTransferFrom(address(this), _receiver, childId) {\\n                    // solhint-disable-previous-line no-empty-blocks\\n                } catch {\\n                    _oldNFTsTransfer(_receiver, childContract, childId);\\n                }\\n                emit TransferChild(_tokenId, _receiver, childContract, childId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove all the children from the bundle and send to personla bundler.\\n     * If bundle contains a legacy ERC721 element, this will not work.\\n     * @dev This method may run out of gas if the list of children is too big. In that case, children can be removed\\n     *      individually.\\n     * @param _tokenId the id of the bundle\\n     * @param _personalBundler address of the receiver of the children\\n     */\\n    function sendElementsToPersonalBundler(uint256 _tokenId, address _personalBundler) external virtual {\\n        _validateReceiver(_personalBundler);\\n        _validateTransferSender(_tokenId);\\n        require(_personalBundler != address(this), \\\"cannot send to self\\\");\\n        require(\\n            IERC165(_personalBundler).supportsInterface(type(IERC998ERC721TopDown).interfaceId),\\n            \\\"has to implement IERC998ERC721TopDown\\\"\\n        );\\n        uint256 personalBundleId = 1;\\n        //make sure sendeer owns personal bundler token\\n        require(IERC721(_personalBundler).ownerOf(personalBundleId) == msg.sender, \\\"has to own personal bundle token\\\");\\n\\n        // In each iteration all contracts children are removed, so eventually all contracts are removed\\n        while (childContracts[_tokenId].length() > 0) {\\n            address childContract = childContracts[_tokenId].at(0);\\n\\n            // In each iteration a child is removed, so eventually all contracts children are removed\\n            while (childTokens[_tokenId][childContract].length() > 0) {\\n                uint256 childId = childTokens[_tokenId][childContract].at(0);\\n\\n                _removeChild(_tokenId, childContract, childId);\\n\\n                try\\n                    IERC721(childContract).safeTransferFrom(\\n                        address(this),\\n                        _personalBundler,\\n                        childId,\\n                        abi.encodePacked(personalBundleId)\\n                    )\\n                {\\n                    // solhint-disable-previous-line no-empty-blocks\\n                } catch {\\n                    revert(\\\"only safe transfer\\\");\\n                }\\n                emit TransferChild(_tokenId, _personalBundler, childContract, childId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to add a set of BundleElementERC721 objects to the specified token ID.\\n     *\\n     * @param _tokenId The ID of the token to add the bundle elements to.\\n     * @param _bundleElements The array of BundleElementERC721 objects to add.\\n     */\\n    function _addBundleElements(uint256 _tokenId, BundleElementERC721[] memory _bundleElements) internal {\\n        require(_bundleElements.length > 0, \\\"bundle is empty\\\");\\n        uint256 elementNumber = _bundleElements.length;\\n        for (uint256 i; i != elementNumber; ++i) {\\n            require(permittedAsset(_bundleElements[i].tokenContract), \\\"erc721 not permitted\\\");\\n            if (_bundleElements[i].safeTransferable) {\\n                uint256 nuberOfIds = _bundleElements[i].ids.length;\\n                for (uint256 j; j != nuberOfIds; ++j) {\\n                    IERC721(_bundleElements[i].tokenContract).safeTransferFrom(\\n                        msg.sender,\\n                        address(this),\\n                        _bundleElements[i].ids[j],\\n                        abi.encodePacked(_tokenId)\\n                    );\\n                }\\n            } else {\\n                uint256 nuberOfIds = _bundleElements[i].ids.length;\\n                for (uint256 j; j != nuberOfIds; ++j) {\\n                    getChild(msg.sender, _tokenId, _bundleElements[i].tokenContract, _bundleElements[i].ids[j]);\\n                }\\n            }\\n        }\\n\\n        emit AddBundleElements(_tokenId, _bundleElements);\\n    }\\n\\n    /**\\n     * @dev Internal function to remove a set of BundleElementERC721 objects to the specified token ID.\\n     *\\n     * @param _tokenId The ID of the token to remove the bundle elements from.\\n     * @param _bundleElements The array of BundleElementERC721 objects to remove.\\n     */\\n    function _removeBundleElements(uint256 _tokenId, BundleElementERC721[] memory _bundleElements) internal {\\n        _validateTransferSender(_tokenId);\\n        require(_bundleElements.length > 0, \\\"bundle is empty\\\");\\n        uint256 elementNumber = _bundleElements.length;\\n        for (uint256 i; i != elementNumber; ++i) {\\n            address erc721Contract = _bundleElements[i].tokenContract;\\n            uint256 nuberOfIds = _bundleElements[i].ids.length;\\n            for (uint256 j; j != nuberOfIds; ++j) {\\n                uint256 childId = _bundleElements[i].ids[j];\\n\\n                _removeChild(_tokenId, erc721Contract, childId);\\n                if (_bundleElements[i].safeTransferable) {\\n                    IERC721(erc721Contract).safeTransferFrom(address(this), msg.sender, childId);\\n                } else {\\n                    _oldNFTsTransfer(msg.sender, erc721Contract, childId);\\n                }\\n                emit TransferChild(_tokenId, msg.sender, erc721Contract, childId);\\n            }\\n        }\\n\\n        emit RemoveBundleElements(_tokenId, _bundleElements);\\n    }\\n\\n    /**\\n     * @dev Update the state to receive a ERC721 child\\n     * Overrides the implementation to check if the asset is permitted\\n     * @param _from The owner of the child token\\n     * @param _tokenId The token receiving the child\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The token that is being transferred to the parent\\n     */\\n    function _receiveChild(\\n        address _from,\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) internal virtual override {\\n        require(permittedAsset(_childContract), \\\"erc721 not permitted\\\");\\n        super._receiveChild(_from, _tokenId, _childContract, _childTokenId);\\n    }\\n\\n    /**\\n     * @dev Override validation if it is a transfer from the airdropFlashLoan contract giving back the flashloan.\\n     * Validates the data from a child transfer and receives it otherwise\\n     * @param _from The owner of the child token\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The token that is being transferred to the parent\\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId\\n     */\\n    function _validateAndReceiveChild(\\n        address _from,\\n        address _childContract,\\n        uint256 _childTokenId,\\n        bytes memory _data\\n    ) internal virtual override {\\n        if (_from == airdropFlashLoan) {\\n            return;\\n        } else {\\n            super._validateAndReceiveChild(_from, _childContract, _childTokenId, _data);\\n        }\\n    }\\n\\n    /**\\n     * @notice this function initiates a flashloan to pull an airdrop from a tartget contract\\n     *\\n     * @param _nftContract - contract address of the target nft of the drop\\n     * @param _nftId - id of the target nft of the drop\\n     * @param _target - address of the airdropping contract\\n     * @param _data - function selector to be called on the airdropping contract\\n     * @param _nftAirdrop - address of the used claiming nft in the drop\\n     * @param _nftAirdropId - id of the used claiming nft in the drop\\n     * @param _is1155 -\\n     * @param _nftAirdropAmount - amount in case of 1155\\n     */\\n    function pullAirdrop(\\n        address _nftContract,\\n        uint256 _nftId,\\n        address _target,\\n        bytes calldata _data,\\n        address _nftAirdrop,\\n        uint256 _nftAirdropId,\\n        bool _is1155,\\n        uint256 _nftAirdropAmount,\\n        address _beneficiary\\n    ) external {\\n        uint256 tokenId = childTokenOwner[_nftContract][_nftId];\\n        address rootOwner = address(uint160(uint256(rootOwnerOf(tokenId))));\\n        require(rootOwner == msg.sender, \\\"pullAirdrop msg.sender not eligible\\\");\\n\\n        IERC721(_nftContract).safeTransferFrom(address(this), airdropFlashLoan, _nftId);\\n\\n        AirdropFlashLoan(airdropFlashLoan).pullAirdrop(\\n            _nftContract,\\n            _nftId,\\n            _target,\\n            _data,\\n            _nftAirdrop,\\n            _nftAirdropId,\\n            _is1155,\\n            _nftAirdropAmount,\\n            _beneficiary\\n        );\\n\\n        //take back collateral\\n        IERC721(_nftContract).safeTransferFrom(airdropFlashLoan, address(this), _nftId);\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC721 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _tokenId - id token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function rescueERC721(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        address _receiver\\n    ) external onlyOwner {\\n        IERC721 tokenContract = IERC721(_tokenAddress);\\n        require(childTokenOwner[_tokenAddress][_tokenId] == 0, \\\"token is in bundle\\\");\\n        require(tokenContract.ownerOf(_tokenId) == address(this), \\\"nft not owned\\\");\\n        tokenContract.safeTransferFrom(address(this), _receiver, _tokenId);\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC20 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function rescueERC20(address _tokenAddress, address _receiver) external onlyOwner {\\n        IERC20 tokenContract = IERC20(_tokenAddress);\\n        uint256 amount = tokenContract.balanceOf(address(this));\\n        require(amount > 0, \\\"no tokens owned\\\");\\n        tokenContract.safeTransfer(_receiver, amount);\\n    }\\n\\n    /**\\n     * @dev Sets baseURI.\\n     * @param _customBaseURI - Base URI\\n     */\\n    function setBaseURI(string memory _customBaseURI) external onlyOwner {\\n        _setBaseURI(_customBaseURI);\\n    }\\n\\n    /**\\n     * @dev Sets baseURI.\\n     */\\n    function _setBaseURI(string memory _customBaseURI) internal virtual {\\n        baseURI = bytes(_customBaseURI).length > 0\\n            ? string(abi.encodePacked(_customBaseURI, _getChainID().toString(), \\\"/\\\"))\\n            : \\\"\\\";\\n    }\\n\\n    /** @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`.\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @dev This function gets the current chain ID.\\n     */\\n    function _getChainID() internal view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\\n\",\"keccak256\":\"0x00ecc461a631481b77f38e360c08893b7abc54e6252bf93595489bd561f6b09b\",\"license\":\"MIT\"},\"contracts/PersonalBundler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\nimport \\\"./NftfiBundler.sol\\\";\\n\\n/**\\n * @title PersonalBundler\\n * @author NFTfi\\n * @dev ERC998 Top-Down Composable Non-Fungible Token that supports ERC721 children.\\n */\\ncontract PersonalBundler is NftfiBundler, Initializable, IERC1155Receiver {\\n    using SafeERC20 for IERC20;\\n\\n    uint8 public constant bundleId = 1;\\n    address public lastBundleOwner;\\n\\n    event Initialized(address owner);\\n\\n    /**\\n     * @dev only runs when the master copy is deplyoed, when cloned then initializer is ran\\n     * @param _admin admin address capable of setting URI-s and pausing\\n     * @param _permittedNfts permitted nft-s contract of the loan system\\n     * @param _airdropFlashLoan airdrop flashloan contract deplyoed alongside\\n     */\\n    constructor(\\n        address _admin,\\n        address _permittedNfts,\\n        address _airdropFlashLoan\\n    ) NftfiBundler(_admin, \\\"\\\", \\\"\\\", \\\"\\\", _permittedNfts, _airdropFlashLoan) {\\n        //original implementation rendering it unusable\\n        safeMint(_admin);\\n    }\\n\\n    /** @dev function enforcing that the caller is the bundle token owner */\\n    function onlyBundleOwner() internal view {\\n        require(ownerOf(bundleId) == msg.sender, \\\"Only bundle owner\\\");\\n    }\\n\\n    /**\\n     * @dev sets up initial parameters after cloning\\n     *\\n     * @param _admin admin address capable of setting URI-s and pausing\\n     * @param _owner of the personal bundler\\n     * @param _customBaseURI - Base URI\\n     */\\n    function initialize(\\n        address _admin,\\n        address _owner,\\n        string memory _customBaseURI\\n    ) external initializer nonReentrant {\\n        _setOwner(_admin);\\n        _setBaseURI(_customBaseURI);\\n        safeMint(_owner);\\n        emit Initialized(_owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     * have to override, because cloning doesn't work for it\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return \\\"NFTFi Personal Bundler\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     * have to override, because cloning doesn't work for it\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return \\\"PBNFI\\\";\\n    }\\n\\n    function safeMint(address _to) public override returns (uint256) {\\n        require(lastBundleOwner == address(0) || lastBundleOwner == msg.sender, \\\"only last bundle owner\\\");\\n        require(tokenCount == 0, \\\"only 1 bundle\\\");\\n\\n        return super.safeMint(_to);\\n    }\\n\\n    function burn() public {\\n        onlyBundleOwner();\\n        lastBundleOwner = msg.sender;\\n        require(totalChildContracts(bundleId) == 0, \\\"bundle has to be empty\\\");\\n        tokenCount -= 1;\\n        _burn(bundleId);\\n    }\\n\\n    /**\\n     * @notice disabled here\\n     */\\n    function sendElementsToPersonalBundler(uint256, address) external virtual override {\\n        revert(\\\"already personal bundler\\\");\\n    }\\n\\n    /**\\n     * @dev Validates the data from a child transfer and receives it\\n     * @param _from The owner of the child token\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The token that is being transferred to the parent\\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId\\n     */\\n    function _validateAndReceiveChild(\\n        address _from,\\n        address _childContract,\\n        uint256 _childTokenId,\\n        bytes memory _data\\n    ) internal virtual override {\\n        //CHECK DISABLED require(_data.length > 0, \\\"data must contain tokenId to transfer the child token to\\\");\\n        // if no data: airdrop\\n        if (_data.length > 0) {\\n            // convert up to 32 bytes of _data to uint256, owner nft tokenId passed as uint in bytes\\n            uint256 tokenId = _parseTokenId(_data);\\n            // 1 is the only existing valid token id, so all other data is an airdrop\\n            if (tokenId == bundleId) {\\n                _receiveChild(_from, tokenId, _childContract, _childTokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC721 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _tokenId - id token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function drainERC721Airdrop(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        address _receiver\\n    ) external {\\n        onlyBundleOwner();\\n        IERC721 tokenContract = IERC721(_tokenAddress);\\n        require(childTokenOwner[_tokenAddress][_tokenId] == 0, \\\"token is in bundle\\\");\\n        require(tokenContract.ownerOf(_tokenId) == address(this), \\\"nft not owned\\\");\\n        tokenContract.safeTransferFrom(address(this), _receiver, _tokenId);\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC1155 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _tokenId - id token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function drainERC1155Airdrop(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        address _receiver\\n    ) external {\\n        onlyBundleOwner();\\n        IERC1155 tokenContract = IERC1155(_tokenAddress);\\n        uint256 amount = tokenContract.balanceOf(address(this), _tokenId);\\n        require(amount > 0, \\\"no nfts owned\\\");\\n        tokenContract.safeTransferFrom(address(this), _receiver, _tokenId, amount, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC20 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function drainERC20Airdrop(address _tokenAddress, address _receiver) external {\\n        onlyBundleOwner();\\n        IERC20 tokenContract = IERC20(_tokenAddress);\\n        uint256 amount = tokenContract.balanceOf(address(this));\\n        require(amount > 0, \\\"no tokens owned\\\");\\n        tokenContract.safeTransfer(_receiver, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(IERC165, NftfiBundler) returns (bool) {\\n        return _interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     *  @dev Handles the receipt of a single ERC1155 token type. This function is called at the end of a\\n     * `safeTransferFrom` after the balance has been updated.\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if allowed\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     *  @dev Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a\\n     * `safeBatchTransferFrom` after the balances have been updated.\\n     *  @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x1c303c9514d69632c4cf576d29086120713222a4b115c7d87afd3a6e5c6fc33a\",\"license\":\"MIT\"},\"contracts/PersonalBundlerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport \\\"./utils/Ownable.sol\\\";\\n\\nimport \\\"./PersonalBundler.sol\\\";\\n\\n/**\\n * @title PersonalBundlerFactory\\n * @author NFTfi\\n * @dev\\n */\\ncontract PersonalBundlerFactory is Ownable {\\n    address public immutable personalBundlerImplementation;\\n    string public baseURI;\\n\\n    mapping(address => bool) public personalBundlerExists;\\n\\n    event PersonalBundlerCreated(address indexed instance, address indexed owner, address creator);\\n\\n    /**\\n     * @param _admin admin address capable of setting URI\\n     * @param _customBaseURI - Base URI\\n     * @param _personalBundlerImplementation - deployed master copy of the personal bundler contract\\n     */\\n    constructor(\\n        address _admin,\\n        string memory _customBaseURI,\\n        address _personalBundlerImplementation\\n    ) Ownable(_admin) {\\n        baseURI = _customBaseURI;\\n        personalBundlerImplementation = _personalBundlerImplementation;\\n    }\\n\\n    /**\\n     * @dev clones a new personal bundler contract\\n     *\\n     * @param _to - owner of the personal bundler\\n     */\\n    function createPersonalBundler(address _to) external returns (address) {\\n        address instance = Clones.clone(personalBundlerImplementation);\\n        personalBundlerExists[instance] = true;\\n        PersonalBundler(instance).initialize(owner(), _to, baseURI);\\n        emit PersonalBundlerCreated(instance, _to, msg.sender);\\n        return instance;\\n    }\\n\\n    /**\\n     * @dev Sets baseURI.\\n     * @param _customBaseURI - Base URI\\n     */\\n    function setBaseURI(string memory _customBaseURI) external onlyOwner {\\n        baseURI = _customBaseURI;\\n    }\\n}\\n\",\"keccak256\":\"0x093bf3fe130318d3c917a9ff3668efa0f7ab7c7f443ad0ad3ebe486b9659164d\",\"license\":\"BUSL-1.1\"},\"contracts/airdrop/AirdropFlashLoan.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title AirdropFlashLoan\\n * @author NFTfi\\n * @dev\\n */\\ncontract AirdropFlashLoan is ERC721Holder, ERC1155Holder, ReentrancyGuard {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice this function initiates a flashloan to pull an airdrop from a tartget contract\\n     *\\n     * @param _nftContract - contract address of the target nft of the drop\\n     * @param _nftId - id of the target nft of the drop\\n     * @param _target - address of the airdropping contract\\n     * @param _data - function selector to be called on the airdropping contract\\n     * @param _nftAirdrop - address of the used claiming nft in the drop\\n     * @param _nftAirdropId - id of the used claiming nft in the drop\\n     * @param _is1155 -\\n     * @param _nftAirdropAmount - amount in case of 1155\\n     * @param _beneficiary - address receiving the drop\\n     */\\n    function pullAirdrop(\\n        address _nftContract,\\n        uint256 _nftId,\\n        address _target,\\n        bytes calldata _data,\\n        address _nftAirdrop,\\n        uint256 _nftAirdropId,\\n        bool _is1155,\\n        uint256 _nftAirdropAmount,\\n        address _beneficiary\\n    ) external nonReentrant {\\n        // assumes that the collateral nft has been transferreded to this contract before calling this function\\n        _target.functionCall(_data);\\n\\n        // return the collateral\\n        IERC721(_nftContract).approve(msg.sender, _nftId);\\n\\n        // in case that arbitray function from _target does not send the airdrop to a specified address\\n        if (_nftAirdrop != address(0) && _beneficiary != address(0)) {\\n            // send the airdrop to the beneficiary\\n            if (_is1155) {\\n                IERC1155(_nftAirdrop).safeTransferFrom(\\n                    address(this),\\n                    _beneficiary,\\n                    _nftAirdropId,\\n                    _nftAirdropAmount,\\n                    \\\"0x\\\"\\n                );\\n            } else {\\n                IERC721(_nftAirdrop).safeTransferFrom(address(this), _beneficiary, _nftAirdropId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC1155Receiver) returns (bool) {\\n        return _interfaceId == type(IERC721Receiver).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfbf5ebeb54d625bebce3af1f5b1442ea028d06cf6f5a1f5b1b1fdb7a7fbfa201\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * Modified version from openzeppelin/contracts/access/Ownable.sol that allows to\\n * initialize the owner using a parameter in the constructor\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    address private _ownerCandidate;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /**\\n     * @dev Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`).\\n     * Can only be called by the current owner.\\n     */\\n    function requestTransferOwnership(address _newOwnerCandidate) public virtual onlyOwner {\\n        require(_newOwnerCandidate != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _ownerCandidate = _newOwnerCandidate;\\n    }\\n\\n    function acceptTransferOwnership() public virtual {\\n        require(_ownerCandidate == _msgSender(), \\\"Ownable: not owner candidate\\\");\\n        _setOwner(_ownerCandidate);\\n        delete _ownerCandidate;\\n    }\\n\\n    function cancelTransferOwnership() public virtual onlyOwner {\\n        delete _ownerCandidate;\\n    }\\n\\n    function rejectTransferOwnership() public virtual {\\n        require(_ownerCandidate == _msgSender(), \\\"Ownable: not owner candidate\\\");\\n        delete _ownerCandidate;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Sets the owner.\\n     */\\n    function _setOwner(address _newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(oldOwner, _newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x83bdd26c689547c2220deb46a3035803f6ce20f770f4a79b6ca5ae42e33c7378\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c06040526000600c553480156200001657600080fd5b506040516200415b3803806200415b83398101604081905262000039916200036e565b85838360006200004a8382620004c6565b506001620000598282620004c6565b5050506200006d81620000a560201b60201c565b50600b805460ff60a01b191690556001600160a01b03808616608052841660a0526200009981620000f7565b5050505050506200068f565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081511162000117576040518060200160405280600081525062000151565b806200012e466200016460201b6200201a1760201c565b6040516020016200014192919062000592565b6040516020818303038152906040525b600d90620001609082620004c6565b5050565b6060816000036200018c5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115620001bc5780620001a381620005e7565b9150620001b49050600a8362000619565b915062000190565b6000816001600160401b03811115620001d957620001d9620002a1565b6040519080825280601f01601f19166020018201604052801562000204576020820181803683370190505b5090505b84156200027c576200021c60018362000630565b91506200022b600a866200064c565b6200023890603062000663565b60f81b81838151811062000250576200025062000679565b60200101906001600160f81b031916908160001a90535062000274600a8662000619565b945062000208565b949350505050565b80516001600160a01b03811681146200029c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620002d4578181015183820152602001620002ba565b50506000910152565b600082601f830112620002ef57600080fd5b81516001600160401b03808211156200030c576200030c620002a1565b604051601f8301601f19908116603f01168101908282118183101715620003375762000337620002a1565b816040528381528660208588010111156200035157600080fd5b62000364846020830160208901620002b7565b9695505050505050565b60008060008060008060c087890312156200038857600080fd5b620003938762000284565b9550620003a36020880162000284565b9450620003b36040880162000284565b60608801519094506001600160401b0380821115620003d157600080fd5b620003df8a838b01620002dd565b94506080890151915080821115620003f657600080fd5b620004048a838b01620002dd565b935060a08901519150808211156200041b57600080fd5b506200042a89828a01620002dd565b9150509295509295509295565b600181811c908216806200044c57607f821691505b6020821081036200046d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004c157600081815260208120601f850160051c810160208610156200049c5750805b601f850160051c820191505b81811015620004bd57828155600101620004a8565b5050505b505050565b81516001600160401b03811115620004e257620004e2620002a1565b620004fa81620004f3845462000437565b8462000473565b602080601f831160018114620005325760008415620005195750858301515b600019600386901b1c1916600185901b178555620004bd565b600085815260208120601f198616915b82811015620005635788860151825594840194600190910190840162000542565b5085821015620005825787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008351620005a6818460208801620002b7565b835190830190620005bc818360208801620002b7565b602f60f81b9101908152600101949350505050565b634e487b7160e01b600052601160045260246000fd5b600060018201620005fc57620005fc620005d1565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826200062b576200062b62000603565b500490565b81810381811115620006465762000646620005d1565b92915050565b6000826200065e576200065e62000603565b500690565b80820180821115620006465762000646620005d1565b634e487b7160e01b600052603260045260246000fd5b60805160a051613a4462000717600039600081816105b401528181610a4801528181610c9c015281816118810152611e600152600081816105470152818161069601528181610a0c01528181610b16015281816111bb01528181611299015281816114a001528181611526015281816116da01528181611a3b0152611dbf0152613a446000f3fe608060405234801561001057600080fd5b50600436106102675760003560e01c8063647bec33116101515780639a48b5eb116100c3578063b860fabb11610087578063b860fabb14610569578063b88d4fde14610589578063c87b56dd1461059c578063d90c739d146105af578063e985e9c5146105d6578063fa3e47051461061257600080fd5b80639a48b5eb146104ea5780639d6fa618146105135780639f181b5e14610526578063a22cb4651461052f578063ad0ffd8b1461054257600080fd5b80638456cb59116101155780638456cb591461049b5780638da5cb5b146104a35780638ee1f07a146104b457806392fede00146104c757806395d89b41146104cf5780639993b010146104d757600080fd5b8063647bec33146104525780636c0360eb1461046557806370a082311461046d5780637a82e93c146104805780637b3711071461049357600080fd5b80632f745c59116101ea578063542c4a13116101ae578063542c4a13146103e557806355f804b3146103ff5780635c975abb146104125780635d799f87146104245780635f992fdd146104375780636352211e1461043f57600080fd5b80632f745c59146103915780633f4ba83a146103a457806342842e0e146103ac57806349a931f2146103bf5780634f6ccce7146103d257600080fd5b8063095ea7b311610231578063095ea7b314610317578063098867441461032a578063150b7a021461034a57806318160ddd1461037657806323b872dd1461037e57600080fd5b8062296cd81461026c578062f714ce1461029f57806301ffc9a7146102b457806306fdde03146102d7578063081812fc146102ec575b600080fd5b61028c61027a3660046130ff565b60116020526000908152604090205481565b6040519081526020015b60405180910390f35b6102b26102ad36600461311c565b610625565b005b6102c76102c2366004613162565b610768565b6040519015158152602001610296565b6102df610793565b60405161029691906131cf565b6102ff6102fa3660046131e2565b610825565b6040516001600160a01b039091168152602001610296565b6102b26103253660046131fb565b6108bf565b61028c6103383660046131e2565b600f6020526000908152604090205481565b61035d6103583660046132b3565b6109d4565b6040516001600160e01b03199091168152602001610296565b60085461028c565b6102b261038c366004613333565b610b6e565b61028c61039f3660046131fb565b610b9f565b6102b2610c35565b6102b26103ba366004613333565b610c69565b6102b26103cd3660046131e2565b610c84565b61028c6103e03660046131e2565b610d21565b6103ed600181565b60405160ff9091168152602001610296565b6102b261040d366004613374565b610db4565b600b54600160a01b900460ff166102c7565b6102b26104323660046133bd565b610dea565b6102b2610ed9565b6102ff61044d3660046131e2565b610f45565b6102b2610460366004613404565b610fbc565b6102df611320565b61028c61047b3660046130ff565b6113ae565b6102b261048e36600461311c565b611435565b6102b26115f4565b6102b2611663565b600a546001600160a01b03166102ff565b61028c6104c23660046130ff565b611695565b6102b2611764565b6102df61178e565b6102b26104e536600461311c565b61179d565b6102ff6104f83660046131e2565b6010602052600090815260409020546001600160a01b031681565b6102b26105213660046130ff565b611b09565b61028c600c5481565b6102b261053d3660046134e5565b611bba565b6102ff7f000000000000000000000000000000000000000000000000000000000000000081565b61028c6105773660046131e2565b600e6020526000908152604090205481565b6102b26105973660046132b3565b611c7e565b6102df6105aa3660046131e2565b611cb0565b6102ff7f000000000000000000000000000000000000000000000000000000000000000081565b6102c76105e43660046133bd565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102b2610620366004613513565b611d8a565b61062f828261211b565b6000828152600e60209081526040808320546010909252909120546001600160a01b031661065c846121c7565b6001600160a01b0381166106f857604051632142170760e11b81523060048201526001600160a01b038481166024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906342842e0e906064015b600060405180830381600087803b1580156106db57600080fd5b505af11580156106ef573d6000803e3d6000fd5b50505050610762565b604051632142170760e11b81523060048201526001600160a01b038481166024830152600160448301528216906342842e0e906064015b600060405180830381600087803b15801561074957600080fd5b505af115801561075d573d6000803e3d6000fd5b505050505b50505050565b60006001600160e01b03198216630a85bd0160e11b148061078d575061078d82612246565b92915050565b6060600080546107a290613555565b80601f01602080910402602001604051908101604052809291908181526020018280546107ce90613555565b801561081b5780601f106107f05761010080835404028352916020019161081b565b820191906000526020600020905b8154815290600101906020018083116107fe57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166108a35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006108ca82610f45565b9050806001600160a01b0316836001600160a01b0316036109375760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161089a565b336001600160a01b0382161480610953575061095381336105e4565b6109c55760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161089a565b6109cf838361226b565b505050565b600b54600090600160a01b900460ff1615610a015760405162461bcd60e51b815260040161089a9061358f565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610abb575060405163397140fd60e21b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e5c503f490602401602060405180830381865afa158015610a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abb91906135b9565b610afb5760405162461bcd60e51b8152602060048201526011602482015270185cdcd95d081b9bdd08185b1b1bddd959607a1b604482015260640161089a565b6001600160a01b03841615610b5c5760006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163303610b4d57610b4685856122d9565b9050610b5a565b610b57853361234f565b90505b505b50630a85bd0160e11b5b949350505050565b610b7833826123df565b610b945760405162461bcd60e51b815260040161089a906135d6565b6109cf8383836124d2565b6000610baa836113ae565b8210610c0c5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161089a565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b03163314610c5f5760405162461bcd60e51b815260040161089a90613627565b610c6761267d565b565b6109cf83838360405180602001604052806000815250611c7e565b60405163464b8be160e11b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638c9717c2906024016020604051808303816000875af1158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d11919061365c565b9050610d1d828261179d565b5050565b6000610d2c60085490565b8210610d8f5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161089a565b60088281548110610da257610da2613679565b90600052602060002001549050919050565b600a546001600160a01b03163314610dde5760405162461bcd60e51b815260040161089a90613627565b610de78161271a565b50565b600a546001600160a01b03163314610e145760405162461bcd60e51b815260040161089a90613627565b6040516370a0823160e01b815230600482015282906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e81919061368f565b905060008111610ec55760405162461bcd60e51b815260206004820152600f60248201526e1b9bc81d1bdad95b9cc81bdddb9959608a1b604482015260640161089a565b6107626001600160a01b0383168483612770565b600b546001600160a01b03163314610f335760405162461bcd60e51b815260206004820152601c60248201527f4f776e61626c653a206e6f74206f776e65722063616e64696461746500000000604482015260640161089a565b600b80546001600160a01b0319169055565b6000818152600260205260408120546001600160a01b03168061078d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161089a565b33610fc68b610f45565b6001600160a01b0316146110285760405162461bcd60e51b815260206004820152602360248201527f70756c6c41697264726f70206d73672e73656e646572206e6f7420656c696769604482015262626c6560e81b606482015260840161089a565b60008a8152601060205260409020546001600160a01b0316156111925760008a81526010602052604090819020549051635680a3ad60e01b81526001600160a01b038b81166004830152602482018b905290911690635680a3ad90604401602060405180830381865afa1580156110a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c791906135b9565b61110c5760405162461bcd60e51b81526020600482015260166024820152750d2dadaeae8c2c4d8ca5adccce840dad2e6dac2e8c6d60531b604482015260640161089a565b60008a81526010602052604090819020549051633f77844b60e11b81526001600160a01b0390911690637eef08969061115b908c908c908c908c908c908c908c908c908c9033906004016136a8565b600060405180830381600087803b15801561117557600080fd5b505af1158015611189573d6000803e3d6000fd5b50505050611314565b604051631d5b701760e31b81526001600160a01b038a81166004830152602482018a90526000917f00000000000000000000000000000000000000000000000000000000000000009091169063eadb80b8906044016040805180830381865afa158015611203573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611227919061372a565b60008d8152600e6020526040902054909250821490506112825760405162461bcd60e51b81526020600482015260166024820152750d2dadaeae8c2c4d8ca5adccce840dad2e6dac2e8c6d60531b604482015260640161089a565b604051633f77844b60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637eef0896906112e0908d908d908d908d908d908d908d908d908d9033906004016136a8565b600060405180830381600087803b1580156112fa57600080fd5b505af115801561130e573d6000803e3d6000fd5b50505050505b50505050505050505050565b600d805461132d90613555565b80601f016020809104026020016040519081016040528092919081815260200182805461135990613555565b80156113a65780601f1061137b576101008083540402835291602001916113a6565b820191906000526020600020905b81548152906001019060200180831161138957829003601f168201915b505050505081565b60006001600160a01b0382166114195760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161089a565b506001600160a01b031660009081526003602052604090205490565b61143f828261211b565b6000828152600e60209081526040808320546010909252909120546001600160a01b031661146c846121c7565b6001600160a01b03811661155757604051636fba484360e11b8152600481018390526001600160a01b0384811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063df74908690604401600060405180830381600087803b1580156114e457600080fd5b505af11580156114f8573d6000803e3d6000fd5b5050604051632142170760e11b81523060048201526001600160a01b038681166024830152604482018690527f00000000000000000000000000000000000000000000000000000000000000001692506342842e0e91506064016106c1565b604051636fba484360e11b8152600160048201526001600160a01b03848116602483015282169063df74908690604401600060405180830381600087803b1580156115a157600080fd5b505af11580156115b5573d6000803e3d6000fd5b5050604051632142170760e11b81523060048201526001600160a01b03868116602483015260016044830152841692506342842e0e915060640161072f565b600b546001600160a01b0316331461164e5760405162461bcd60e51b815260206004820152601c60248201527f4f776e61626c653a206e6f74206f776e65722063616e64696461746500000000604482015260640161089a565b600b54610f33906001600160a01b03166127c2565b600a546001600160a01b0316331461168d5760405162461bcd60e51b815260040161089a90613627565b610c67612814565b600b54600090600160a01b900460ff16156116c25760405162461bcd60e51b815260040161089a9061358f565b6040516340d097c360e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340d097c3906024016020604051808303816000875af115801561172b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174f919061368f565b905061175b83826122d9565b9150505b919050565b600a546001600160a01b03163314610f335760405162461bcd60e51b815260040161089a90613627565b6060600180546107a290613555565b336117a783610f45565b6001600160a01b0316146117fd5760405162461bcd60e51b815260206004820152601760248201527f6d73672e73656e646572206e6f7420656c696769626c65000000000000000000604482015260640161089a565b6000828152601060205260409020546001600160a01b0316156118625760405162461bcd60e51b815260206004820152601860248201527f616c726561647920706572736f6e616c2062756e646c65720000000000000000604482015260640161089a565b60405163397140fd60e21b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063e5c503f490602401602060405180830381865afa1580156118c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ec91906135b9565b61192f5760405162461bcd60e51b81526020600482015260146024820152733737ba103832b939b7b730b610313ab7323632b960611b604482015260640161089a565b6040516331a9108f60e11b81526001600482015230906001600160a01b03831690636352211e90602401602060405180830381865afa158015611976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199a919061365c565b6001600160a01b0316146119f05760405162461bcd60e51b815260206004820152601d60248201527f6f776e65722068617320746f206265207468697320636f6e7472616374000000604482015260640161089a565b6000828152600e60209081526040808320805490849055808452600f909252808320929092559051638daf2d6160e01b8152600481018290526001600160a01b0383811660248301527f00000000000000000000000000000000000000000000000000000000000000001690638daf2d6190604401600060405180830381600087803b158015611a7f57600080fd5b505af1158015611a93573d6000803e3d6000fd5b50505050816001600160a01b031681847f52ac19043c7718796c5d11822f560e2526c7b5d6f6eea1066befb6d03e82a80560405160405180910390a450600082815260106020908152604080832080546001600160a01b039095166001600160a01b031990951685179055928252601190522055565b600a546001600160a01b03163314611b335760405162461bcd60e51b815260040161089a90613627565b6001600160a01b038116611b985760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161089a565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b03831603611c125760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161089a565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611c8833836123df565b611ca45760405162461bcd60e51b815260040161089a906135d6565b61076284848484612879565b6000818152600260205260409020546060906001600160a01b0316611d2f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161089a565b6000611d396128ac565b90506000815111611d59576040518060200160405280600081525061175b565b80611d638461201a565b604051602001611d7492919061374e565b6040516020818303038152906040529392505050565b600a546001600160a01b03163314611db45760405162461bcd60e51b815260040161089a90613627565b826001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690821603611e41576000838152600f602052604090205415611e3c5760405162461bcd60e51b8152602060048201526015602482015274746f6b656e20697320696e20696d6d757461626c6560581b604482015260640161089a565b611f2e565b60405163397140fd60e21b81526001600160a01b0385811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063e5c503f490602401602060405180830381865afa158015611ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecb91906135b9565b15611f2e576001600160a01b03841660009081526011602052604090205415611f2e5760405162461bcd60e51b8152602060048201526015602482015274746f6b656e20697320696e20696d6d757461626c6560581b604482015260640161089a565b6040516331a9108f60e11b81526004810184905230906001600160a01b03831690636352211e90602401602060405180830381865afa158015611f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f99919061365c565b6001600160a01b031614611fdf5760405162461bcd60e51b815260206004820152600d60248201526c1b999d081b9bdd081bdddb9959609a1b604482015260640161089a565b604051632142170760e11b81523060048201526001600160a01b038381166024830152604482018590528216906342842e0e9060640161072f565b6060816000036120415750506040805180820190915260018152600360fc1b602082015290565b8160005b811561206b578061205581613793565b91506120649050600a836137c2565b9150612045565b60008167ffffffffffffffff81111561208657612086613227565b6040519080825280601f01601f1916602001820160405280156120b0576020820181803683370190505b5090505b8415610b66576120c56001836137d6565b91506120d2600a866137e9565b6120dd9060306137fd565b60f81b8183815181106120f2576120f2613679565b60200101906001600160f81b031916908160001a905350612114600a866137c2565b94506120b4565b3361212583610f45565b6001600160a01b0316146121715760405162461bcd60e51b815260206004820152601360248201527231b0b63632b91034b9903737ba1037bbb732b960691b604482015260640161089a565b6001600160a01b038116610d1d5760405162461bcd60e51b815260206004820152601860248201527f7472616e7366657220746f207a65726f20616464726573730000000000000000604482015260640161089a565b6121d0816128bb565b6000818152601060205260409020546001600160a01b03161561222357600090815260106020908152604080832080546001600160a01b031981169091556001600160a01b031683526011909152812055565b6000908152600e602090815260408083208054908490558352600f909152812055565b60006001600160e01b0319821663780e9d6360e01b148061078d575061078d82612962565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906122a082610f45565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080600c600081546122eb90613793565b918290555090506122fc84826129b2565b6000818152600e60209081526040808320869055858352600f90915280822083905551849083907f3d29d48d72f16f3d1e30b1064f89960da7256796039bcb7cf0e613029188922b908490a49392505050565b600080600c6000815461236190613793565b9182905550905061237284826129b2565b600081815260106020908152604080832080546001600160a01b0319166001600160a01b03881690811790915580845260119092528083208490555190919083907f3d29d48d72f16f3d1e30b1064f89960da7256796039bcb7cf0e613029188922b908390a49392505050565b6000818152600260205260408120546001600160a01b03166124585760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161089a565b600061246383610f45565b9050806001600160a01b0316846001600160a01b0316148061249e5750836001600160a01b031661249384610825565b6001600160a01b0316145b80610b6657506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16610b66565b826001600160a01b03166124e582610f45565b6001600160a01b03161461254d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161089a565b6001600160a01b0382166125af5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161089a565b6125ba8383836129cc565b6125c560008261226b565b6001600160a01b03831660009081526003602052604081208054600192906125ee9084906137d6565b90915550506001600160a01b038216600090815260036020526040812080546001929061261c9084906137fd565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600b54600160a01b900460ff166126cd5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161089a565b600b805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60008151116127385760405180602001604052806000815250612763565b806127424661201a565b604051602001612753929190613810565b6040516020818303038152906040525b600d90610d1d9082613899565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526109cf908490612a84565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600b54600160a01b900460ff161561283e5760405162461bcd60e51b815260040161089a9061358f565b600b805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126fd3390565b6128848484846124d2565b61289084848484612b56565b6107625760405162461bcd60e51b815260040161089a90613959565b6060600d80546107a290613555565b60006128c682610f45565b90506128d4816000846129cc565b6128df60008361226b565b6001600160a01b03811660009081526003602052604081208054600192906129089084906137d6565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006001600160e01b031982166380ac58cd60e01b148061299357506001600160e01b03198216635b5e139f60e01b145b8061078d57506301ffc9a760e01b6001600160e01b031983161461078d565b610d1d828260405180602001604052806000815250612c54565b6001600160a01b038316612a2757612a2281600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612a4a565b816001600160a01b0316836001600160a01b031614612a4a57612a4a8382612c87565b6001600160a01b038216612a61576109cf81612d24565b826001600160a01b0316826001600160a01b0316146109cf576109cf8282612dd3565b6000612ad9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e179092919063ffffffff16565b8051909150156109cf5780806020019051810190612af791906135b9565b6109cf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161089a565b60006001600160a01b0384163b15612c4c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612b9a9033908990889088906004016139ab565b6020604051808303816000875af1925050508015612bd5575060408051601f3d908101601f19168201909252612bd2918101906139e8565b60015b612c32573d808015612c03576040519150601f19603f3d011682016040523d82523d6000602084013e612c08565b606091505b508051600003612c2a5760405162461bcd60e51b815260040161089a90613959565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610b66565b506001610b66565b612c5e8383612e30565b612c6b6000848484612b56565b6109cf5760405162461bcd60e51b815260040161089a90613959565b60006001612c94846113ae565b612c9e91906137d6565b600083815260076020526040902054909150808214612cf1576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612d36906001906137d6565b60008381526009602052604081205460088054939450909284908110612d5e57612d5e613679565b906000526020600020015490508060088381548110612d7f57612d7f613679565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612db757612db7613a05565b6001900381819060005260206000200160009055905550505050565b6000612dde836113ae565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6060612e268484600085612f7e565b90505b9392505050565b6001600160a01b038216612e865760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161089a565b6000818152600260205260409020546001600160a01b031615612eeb5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161089a565b612ef7600083836129cc565b6001600160a01b0382166000908152600360205260408120805460019290612f209084906137fd565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b606082471015612fdf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161089a565b843b61302d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161089a565b600080866001600160a01b031685876040516130499190613a1b565b60006040518083038185875af1925050503d8060008114613086576040519150601f19603f3d011682016040523d82523d6000602084013e61308b565b606091505b509150915061309b8282866130a6565b979650505050505050565b606083156130b5575081612e29565b8251156130c55782518084602001fd5b8160405162461bcd60e51b815260040161089a91906131cf565b6001600160a01b0381168114610de757600080fd5b803561175f816130df565b60006020828403121561311157600080fd5b8135612e29816130df565b6000806040838503121561312f57600080fd5b823591506020830135613141816130df565b809150509250929050565b6001600160e01b031981168114610de757600080fd5b60006020828403121561317457600080fd5b8135612e298161314c565b60005b8381101561319a578181015183820152602001613182565b50506000910152565b600081518084526131bb81602086016020860161317f565b601f01601f19169290920160200192915050565b602081526000612e2960208301846131a3565b6000602082840312156131f457600080fd5b5035919050565b6000806040838503121561320e57600080fd5b8235613219816130df565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561325857613258613227565b604051601f8501601f19908116603f0116810190828211818310171561328057613280613227565b8160405280935085815286868601111561329957600080fd5b858560208301376000602087830101525050509392505050565b600080600080608085870312156132c957600080fd5b84356132d4816130df565b935060208501356132e4816130df565b925060408501359150606085013567ffffffffffffffff81111561330757600080fd5b8501601f8101871361331857600080fd5b6133278782356020840161323d565b91505092959194509250565b60008060006060848603121561334857600080fd5b8335613353816130df565b92506020840135613363816130df565b929592945050506040919091013590565b60006020828403121561338657600080fd5b813567ffffffffffffffff81111561339d57600080fd5b8201601f810184136133ae57600080fd5b610b668482356020840161323d565b600080604083850312156133d057600080fd5b82356133db816130df565b91506020830135613141816130df565b8015158114610de757600080fd5b803561175f816133eb565b6000806000806000806000806000806101208b8d03121561342457600080fd5b8a35995060208b0135613436816130df565b985060408b0135975060608b013561344d816130df565b965060808b013567ffffffffffffffff8082111561346a57600080fd5b818d0191508d601f83011261347e57600080fd5b81358181111561348d57600080fd5b8e602082850101111561349f57600080fd5b6020830198508097505050506134b760a08c016130f4565b935060c08b013592506134cc60e08c016133f9565b91506101008b013590509295989b9194979a5092959850565b600080604083850312156134f857600080fd5b8235613503816130df565b91506020830135613141816133eb565b60008060006060848603121561352857600080fd5b8335613533816130df565b925060208401359150604084013561354a816130df565b809150509250925092565b600181811c9082168061356957607f821691505b60208210810361358957634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6000602082840312156135cb57600080fd5b8151612e29816133eb565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561366e57600080fd5b8151612e29816130df565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156136a157600080fd5b5051919050565b6001600160a01b038b81168252602082018b9052898116604083015261012060608301819052820188905260009061014090898b838601376000848b0183015290971660808301525060a081019490945291151560c084015260e08301526001600160a01b0316610100820152601f909201601f191690910101949350505050565b6000806040838503121561373d57600080fd5b505080516020909101519092909150565b6000835161376081846020880161317f565b83519083019061377481836020880161317f565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016137a5576137a561377d565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826137d1576137d16137ac565b500490565b8181038181111561078d5761078d61377d565b6000826137f8576137f86137ac565b500690565b8082018082111561078d5761078d61377d565b6000835161382281846020880161317f565b83519083019061383681836020880161317f565b602f60f81b9101908152600101949350505050565b601f8211156109cf57600081815260208120601f850160051c810160208610156138725750805b601f850160051c820191505b818110156138915782815560010161387e565b505050505050565b815167ffffffffffffffff8111156138b3576138b3613227565b6138c7816138c18454613555565b8461384b565b602080601f8311600181146138fc57600084156138e45750858301515b600019600386901b1c1916600185901b178555613891565b600085815260208120601f198616915b8281101561392b5788860151825594840194600190910190840161390c565b50858210156139495787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906139de908301846131a3565b9695505050505050565b6000602082840312156139fa57600080fd5b8151612e298161314c565b634e487b7160e01b600052603160045260246000fd5b60008251613a2d81846020870161317f565b919091019291505056fea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102675760003560e01c8063647bec33116101515780639a48b5eb116100c3578063b860fabb11610087578063b860fabb14610569578063b88d4fde14610589578063c87b56dd1461059c578063d90c739d146105af578063e985e9c5146105d6578063fa3e47051461061257600080fd5b80639a48b5eb146104ea5780639d6fa618146105135780639f181b5e14610526578063a22cb4651461052f578063ad0ffd8b1461054257600080fd5b80638456cb59116101155780638456cb591461049b5780638da5cb5b146104a35780638ee1f07a146104b457806392fede00146104c757806395d89b41146104cf5780639993b010146104d757600080fd5b8063647bec33146104525780636c0360eb1461046557806370a082311461046d5780637a82e93c146104805780637b3711071461049357600080fd5b80632f745c59116101ea578063542c4a13116101ae578063542c4a13146103e557806355f804b3146103ff5780635c975abb146104125780635d799f87146104245780635f992fdd146104375780636352211e1461043f57600080fd5b80632f745c59146103915780633f4ba83a146103a457806342842e0e146103ac57806349a931f2146103bf5780634f6ccce7146103d257600080fd5b8063095ea7b311610231578063095ea7b314610317578063098867441461032a578063150b7a021461034a57806318160ddd1461037657806323b872dd1461037e57600080fd5b8062296cd81461026c578062f714ce1461029f57806301ffc9a7146102b457806306fdde03146102d7578063081812fc146102ec575b600080fd5b61028c61027a3660046130ff565b60116020526000908152604090205481565b6040519081526020015b60405180910390f35b6102b26102ad36600461311c565b610625565b005b6102c76102c2366004613162565b610768565b6040519015158152602001610296565b6102df610793565b60405161029691906131cf565b6102ff6102fa3660046131e2565b610825565b6040516001600160a01b039091168152602001610296565b6102b26103253660046131fb565b6108bf565b61028c6103383660046131e2565b600f6020526000908152604090205481565b61035d6103583660046132b3565b6109d4565b6040516001600160e01b03199091168152602001610296565b60085461028c565b6102b261038c366004613333565b610b6e565b61028c61039f3660046131fb565b610b9f565b6102b2610c35565b6102b26103ba366004613333565b610c69565b6102b26103cd3660046131e2565b610c84565b61028c6103e03660046131e2565b610d21565b6103ed600181565b60405160ff9091168152602001610296565b6102b261040d366004613374565b610db4565b600b54600160a01b900460ff166102c7565b6102b26104323660046133bd565b610dea565b6102b2610ed9565b6102ff61044d3660046131e2565b610f45565b6102b2610460366004613404565b610fbc565b6102df611320565b61028c61047b3660046130ff565b6113ae565b6102b261048e36600461311c565b611435565b6102b26115f4565b6102b2611663565b600a546001600160a01b03166102ff565b61028c6104c23660046130ff565b611695565b6102b2611764565b6102df61178e565b6102b26104e536600461311c565b61179d565b6102ff6104f83660046131e2565b6010602052600090815260409020546001600160a01b031681565b6102b26105213660046130ff565b611b09565b61028c600c5481565b6102b261053d3660046134e5565b611bba565b6102ff7f000000000000000000000000000000000000000000000000000000000000000081565b61028c6105773660046131e2565b600e6020526000908152604090205481565b6102b26105973660046132b3565b611c7e565b6102df6105aa3660046131e2565b611cb0565b6102ff7f000000000000000000000000000000000000000000000000000000000000000081565b6102c76105e43660046133bd565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102b2610620366004613513565b611d8a565b61062f828261211b565b6000828152600e60209081526040808320546010909252909120546001600160a01b031661065c846121c7565b6001600160a01b0381166106f857604051632142170760e11b81523060048201526001600160a01b038481166024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906342842e0e906064015b600060405180830381600087803b1580156106db57600080fd5b505af11580156106ef573d6000803e3d6000fd5b50505050610762565b604051632142170760e11b81523060048201526001600160a01b038481166024830152600160448301528216906342842e0e906064015b600060405180830381600087803b15801561074957600080fd5b505af115801561075d573d6000803e3d6000fd5b505050505b50505050565b60006001600160e01b03198216630a85bd0160e11b148061078d575061078d82612246565b92915050565b6060600080546107a290613555565b80601f01602080910402602001604051908101604052809291908181526020018280546107ce90613555565b801561081b5780601f106107f05761010080835404028352916020019161081b565b820191906000526020600020905b8154815290600101906020018083116107fe57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166108a35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006108ca82610f45565b9050806001600160a01b0316836001600160a01b0316036109375760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161089a565b336001600160a01b0382161480610953575061095381336105e4565b6109c55760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161089a565b6109cf838361226b565b505050565b600b54600090600160a01b900460ff1615610a015760405162461bcd60e51b815260040161089a9061358f565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610abb575060405163397140fd60e21b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e5c503f490602401602060405180830381865afa158015610a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abb91906135b9565b610afb5760405162461bcd60e51b8152602060048201526011602482015270185cdcd95d081b9bdd08185b1b1bddd959607a1b604482015260640161089a565b6001600160a01b03841615610b5c5760006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163303610b4d57610b4685856122d9565b9050610b5a565b610b57853361234f565b90505b505b50630a85bd0160e11b5b949350505050565b610b7833826123df565b610b945760405162461bcd60e51b815260040161089a906135d6565b6109cf8383836124d2565b6000610baa836113ae565b8210610c0c5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161089a565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b03163314610c5f5760405162461bcd60e51b815260040161089a90613627565b610c6761267d565b565b6109cf83838360405180602001604052806000815250611c7e565b60405163464b8be160e11b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638c9717c2906024016020604051808303816000875af1158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d11919061365c565b9050610d1d828261179d565b5050565b6000610d2c60085490565b8210610d8f5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161089a565b60088281548110610da257610da2613679565b90600052602060002001549050919050565b600a546001600160a01b03163314610dde5760405162461bcd60e51b815260040161089a90613627565b610de78161271a565b50565b600a546001600160a01b03163314610e145760405162461bcd60e51b815260040161089a90613627565b6040516370a0823160e01b815230600482015282906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e81919061368f565b905060008111610ec55760405162461bcd60e51b815260206004820152600f60248201526e1b9bc81d1bdad95b9cc81bdddb9959608a1b604482015260640161089a565b6107626001600160a01b0383168483612770565b600b546001600160a01b03163314610f335760405162461bcd60e51b815260206004820152601c60248201527f4f776e61626c653a206e6f74206f776e65722063616e64696461746500000000604482015260640161089a565b600b80546001600160a01b0319169055565b6000818152600260205260408120546001600160a01b03168061078d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161089a565b33610fc68b610f45565b6001600160a01b0316146110285760405162461bcd60e51b815260206004820152602360248201527f70756c6c41697264726f70206d73672e73656e646572206e6f7420656c696769604482015262626c6560e81b606482015260840161089a565b60008a8152601060205260409020546001600160a01b0316156111925760008a81526010602052604090819020549051635680a3ad60e01b81526001600160a01b038b81166004830152602482018b905290911690635680a3ad90604401602060405180830381865afa1580156110a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c791906135b9565b61110c5760405162461bcd60e51b81526020600482015260166024820152750d2dadaeae8c2c4d8ca5adccce840dad2e6dac2e8c6d60531b604482015260640161089a565b60008a81526010602052604090819020549051633f77844b60e11b81526001600160a01b0390911690637eef08969061115b908c908c908c908c908c908c908c908c908c9033906004016136a8565b600060405180830381600087803b15801561117557600080fd5b505af1158015611189573d6000803e3d6000fd5b50505050611314565b604051631d5b701760e31b81526001600160a01b038a81166004830152602482018a90526000917f00000000000000000000000000000000000000000000000000000000000000009091169063eadb80b8906044016040805180830381865afa158015611203573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611227919061372a565b60008d8152600e6020526040902054909250821490506112825760405162461bcd60e51b81526020600482015260166024820152750d2dadaeae8c2c4d8ca5adccce840dad2e6dac2e8c6d60531b604482015260640161089a565b604051633f77844b60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637eef0896906112e0908d908d908d908d908d908d908d908d908d9033906004016136a8565b600060405180830381600087803b1580156112fa57600080fd5b505af115801561130e573d6000803e3d6000fd5b50505050505b50505050505050505050565b600d805461132d90613555565b80601f016020809104026020016040519081016040528092919081815260200182805461135990613555565b80156113a65780601f1061137b576101008083540402835291602001916113a6565b820191906000526020600020905b81548152906001019060200180831161138957829003601f168201915b505050505081565b60006001600160a01b0382166114195760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161089a565b506001600160a01b031660009081526003602052604090205490565b61143f828261211b565b6000828152600e60209081526040808320546010909252909120546001600160a01b031661146c846121c7565b6001600160a01b03811661155757604051636fba484360e11b8152600481018390526001600160a01b0384811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063df74908690604401600060405180830381600087803b1580156114e457600080fd5b505af11580156114f8573d6000803e3d6000fd5b5050604051632142170760e11b81523060048201526001600160a01b038681166024830152604482018690527f00000000000000000000000000000000000000000000000000000000000000001692506342842e0e91506064016106c1565b604051636fba484360e11b8152600160048201526001600160a01b03848116602483015282169063df74908690604401600060405180830381600087803b1580156115a157600080fd5b505af11580156115b5573d6000803e3d6000fd5b5050604051632142170760e11b81523060048201526001600160a01b03868116602483015260016044830152841692506342842e0e915060640161072f565b600b546001600160a01b0316331461164e5760405162461bcd60e51b815260206004820152601c60248201527f4f776e61626c653a206e6f74206f776e65722063616e64696461746500000000604482015260640161089a565b600b54610f33906001600160a01b03166127c2565b600a546001600160a01b0316331461168d5760405162461bcd60e51b815260040161089a90613627565b610c67612814565b600b54600090600160a01b900460ff16156116c25760405162461bcd60e51b815260040161089a9061358f565b6040516340d097c360e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340d097c3906024016020604051808303816000875af115801561172b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174f919061368f565b905061175b83826122d9565b9150505b919050565b600a546001600160a01b03163314610f335760405162461bcd60e51b815260040161089a90613627565b6060600180546107a290613555565b336117a783610f45565b6001600160a01b0316146117fd5760405162461bcd60e51b815260206004820152601760248201527f6d73672e73656e646572206e6f7420656c696769626c65000000000000000000604482015260640161089a565b6000828152601060205260409020546001600160a01b0316156118625760405162461bcd60e51b815260206004820152601860248201527f616c726561647920706572736f6e616c2062756e646c65720000000000000000604482015260640161089a565b60405163397140fd60e21b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063e5c503f490602401602060405180830381865afa1580156118c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ec91906135b9565b61192f5760405162461bcd60e51b81526020600482015260146024820152733737ba103832b939b7b730b610313ab7323632b960611b604482015260640161089a565b6040516331a9108f60e11b81526001600482015230906001600160a01b03831690636352211e90602401602060405180830381865afa158015611976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199a919061365c565b6001600160a01b0316146119f05760405162461bcd60e51b815260206004820152601d60248201527f6f776e65722068617320746f206265207468697320636f6e7472616374000000604482015260640161089a565b6000828152600e60209081526040808320805490849055808452600f909252808320929092559051638daf2d6160e01b8152600481018290526001600160a01b0383811660248301527f00000000000000000000000000000000000000000000000000000000000000001690638daf2d6190604401600060405180830381600087803b158015611a7f57600080fd5b505af1158015611a93573d6000803e3d6000fd5b50505050816001600160a01b031681847f52ac19043c7718796c5d11822f560e2526c7b5d6f6eea1066befb6d03e82a80560405160405180910390a450600082815260106020908152604080832080546001600160a01b039095166001600160a01b031990951685179055928252601190522055565b600a546001600160a01b03163314611b335760405162461bcd60e51b815260040161089a90613627565b6001600160a01b038116611b985760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161089a565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b03831603611c125760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161089a565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611c8833836123df565b611ca45760405162461bcd60e51b815260040161089a906135d6565b61076284848484612879565b6000818152600260205260409020546060906001600160a01b0316611d2f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161089a565b6000611d396128ac565b90506000815111611d59576040518060200160405280600081525061175b565b80611d638461201a565b604051602001611d7492919061374e565b6040516020818303038152906040529392505050565b600a546001600160a01b03163314611db45760405162461bcd60e51b815260040161089a90613627565b826001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690821603611e41576000838152600f602052604090205415611e3c5760405162461bcd60e51b8152602060048201526015602482015274746f6b656e20697320696e20696d6d757461626c6560581b604482015260640161089a565b611f2e565b60405163397140fd60e21b81526001600160a01b0385811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063e5c503f490602401602060405180830381865afa158015611ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecb91906135b9565b15611f2e576001600160a01b03841660009081526011602052604090205415611f2e5760405162461bcd60e51b8152602060048201526015602482015274746f6b656e20697320696e20696d6d757461626c6560581b604482015260640161089a565b6040516331a9108f60e11b81526004810184905230906001600160a01b03831690636352211e90602401602060405180830381865afa158015611f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f99919061365c565b6001600160a01b031614611fdf5760405162461bcd60e51b815260206004820152600d60248201526c1b999d081b9bdd081bdddb9959609a1b604482015260640161089a565b604051632142170760e11b81523060048201526001600160a01b038381166024830152604482018590528216906342842e0e9060640161072f565b6060816000036120415750506040805180820190915260018152600360fc1b602082015290565b8160005b811561206b578061205581613793565b91506120649050600a836137c2565b9150612045565b60008167ffffffffffffffff81111561208657612086613227565b6040519080825280601f01601f1916602001820160405280156120b0576020820181803683370190505b5090505b8415610b66576120c56001836137d6565b91506120d2600a866137e9565b6120dd9060306137fd565b60f81b8183815181106120f2576120f2613679565b60200101906001600160f81b031916908160001a905350612114600a866137c2565b94506120b4565b3361212583610f45565b6001600160a01b0316146121715760405162461bcd60e51b815260206004820152601360248201527231b0b63632b91034b9903737ba1037bbb732b960691b604482015260640161089a565b6001600160a01b038116610d1d5760405162461bcd60e51b815260206004820152601860248201527f7472616e7366657220746f207a65726f20616464726573730000000000000000604482015260640161089a565b6121d0816128bb565b6000818152601060205260409020546001600160a01b03161561222357600090815260106020908152604080832080546001600160a01b031981169091556001600160a01b031683526011909152812055565b6000908152600e602090815260408083208054908490558352600f909152812055565b60006001600160e01b0319821663780e9d6360e01b148061078d575061078d82612962565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906122a082610f45565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080600c600081546122eb90613793565b918290555090506122fc84826129b2565b6000818152600e60209081526040808320869055858352600f90915280822083905551849083907f3d29d48d72f16f3d1e30b1064f89960da7256796039bcb7cf0e613029188922b908490a49392505050565b600080600c6000815461236190613793565b9182905550905061237284826129b2565b600081815260106020908152604080832080546001600160a01b0319166001600160a01b03881690811790915580845260119092528083208490555190919083907f3d29d48d72f16f3d1e30b1064f89960da7256796039bcb7cf0e613029188922b908390a49392505050565b6000818152600260205260408120546001600160a01b03166124585760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161089a565b600061246383610f45565b9050806001600160a01b0316846001600160a01b0316148061249e5750836001600160a01b031661249384610825565b6001600160a01b0316145b80610b6657506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16610b66565b826001600160a01b03166124e582610f45565b6001600160a01b03161461254d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161089a565b6001600160a01b0382166125af5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161089a565b6125ba8383836129cc565b6125c560008261226b565b6001600160a01b03831660009081526003602052604081208054600192906125ee9084906137d6565b90915550506001600160a01b038216600090815260036020526040812080546001929061261c9084906137fd565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600b54600160a01b900460ff166126cd5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161089a565b600b805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60008151116127385760405180602001604052806000815250612763565b806127424661201a565b604051602001612753929190613810565b6040516020818303038152906040525b600d90610d1d9082613899565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526109cf908490612a84565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600b54600160a01b900460ff161561283e5760405162461bcd60e51b815260040161089a9061358f565b600b805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126fd3390565b6128848484846124d2565b61289084848484612b56565b6107625760405162461bcd60e51b815260040161089a90613959565b6060600d80546107a290613555565b60006128c682610f45565b90506128d4816000846129cc565b6128df60008361226b565b6001600160a01b03811660009081526003602052604081208054600192906129089084906137d6565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006001600160e01b031982166380ac58cd60e01b148061299357506001600160e01b03198216635b5e139f60e01b145b8061078d57506301ffc9a760e01b6001600160e01b031983161461078d565b610d1d828260405180602001604052806000815250612c54565b6001600160a01b038316612a2757612a2281600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612a4a565b816001600160a01b0316836001600160a01b031614612a4a57612a4a8382612c87565b6001600160a01b038216612a61576109cf81612d24565b826001600160a01b0316826001600160a01b0316146109cf576109cf8282612dd3565b6000612ad9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e179092919063ffffffff16565b8051909150156109cf5780806020019051810190612af791906135b9565b6109cf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161089a565b60006001600160a01b0384163b15612c4c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612b9a9033908990889088906004016139ab565b6020604051808303816000875af1925050508015612bd5575060408051601f3d908101601f19168201909252612bd2918101906139e8565b60015b612c32573d808015612c03576040519150601f19603f3d011682016040523d82523d6000602084013e612c08565b606091505b508051600003612c2a5760405162461bcd60e51b815260040161089a90613959565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610b66565b506001610b66565b612c5e8383612e30565b612c6b6000848484612b56565b6109cf5760405162461bcd60e51b815260040161089a90613959565b60006001612c94846113ae565b612c9e91906137d6565b600083815260076020526040902054909150808214612cf1576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612d36906001906137d6565b60008381526009602052604081205460088054939450909284908110612d5e57612d5e613679565b906000526020600020015490508060088381548110612d7f57612d7f613679565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612db757612db7613a05565b6001900381819060005260206000200160009055905550505050565b6000612dde836113ae565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6060612e268484600085612f7e565b90505b9392505050565b6001600160a01b038216612e865760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161089a565b6000818152600260205260409020546001600160a01b031615612eeb5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161089a565b612ef7600083836129cc565b6001600160a01b0382166000908152600360205260408120805460019290612f209084906137fd565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b606082471015612fdf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161089a565b843b61302d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161089a565b600080866001600160a01b031685876040516130499190613a1b565b60006040518083038185875af1925050503d8060008114613086576040519150601f19603f3d011682016040523d82523d6000602084013e61308b565b606091505b509150915061309b8282866130a6565b979650505050505050565b606083156130b5575081612e29565b8251156130c55782518084602001fd5b8160405162461bcd60e51b815260040161089a91906131cf565b6001600160a01b0381168114610de757600080fd5b803561175f816130df565b60006020828403121561311157600080fd5b8135612e29816130df565b6000806040838503121561312f57600080fd5b823591506020830135613141816130df565b809150509250929050565b6001600160e01b031981168114610de757600080fd5b60006020828403121561317457600080fd5b8135612e298161314c565b60005b8381101561319a578181015183820152602001613182565b50506000910152565b600081518084526131bb81602086016020860161317f565b601f01601f19169290920160200192915050565b602081526000612e2960208301846131a3565b6000602082840312156131f457600080fd5b5035919050565b6000806040838503121561320e57600080fd5b8235613219816130df565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561325857613258613227565b604051601f8501601f19908116603f0116810190828211818310171561328057613280613227565b8160405280935085815286868601111561329957600080fd5b858560208301376000602087830101525050509392505050565b600080600080608085870312156132c957600080fd5b84356132d4816130df565b935060208501356132e4816130df565b925060408501359150606085013567ffffffffffffffff81111561330757600080fd5b8501601f8101871361331857600080fd5b6133278782356020840161323d565b91505092959194509250565b60008060006060848603121561334857600080fd5b8335613353816130df565b92506020840135613363816130df565b929592945050506040919091013590565b60006020828403121561338657600080fd5b813567ffffffffffffffff81111561339d57600080fd5b8201601f810184136133ae57600080fd5b610b668482356020840161323d565b600080604083850312156133d057600080fd5b82356133db816130df565b91506020830135613141816130df565b8015158114610de757600080fd5b803561175f816133eb565b6000806000806000806000806000806101208b8d03121561342457600080fd5b8a35995060208b0135613436816130df565b985060408b0135975060608b013561344d816130df565b965060808b013567ffffffffffffffff8082111561346a57600080fd5b818d0191508d601f83011261347e57600080fd5b81358181111561348d57600080fd5b8e602082850101111561349f57600080fd5b6020830198508097505050506134b760a08c016130f4565b935060c08b013592506134cc60e08c016133f9565b91506101008b013590509295989b9194979a5092959850565b600080604083850312156134f857600080fd5b8235613503816130df565b91506020830135613141816133eb565b60008060006060848603121561352857600080fd5b8335613533816130df565b925060208401359150604084013561354a816130df565b809150509250925092565b600181811c9082168061356957607f821691505b60208210810361358957634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6000602082840312156135cb57600080fd5b8151612e29816133eb565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561366e57600080fd5b8151612e29816130df565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156136a157600080fd5b5051919050565b6001600160a01b038b81168252602082018b9052898116604083015261012060608301819052820188905260009061014090898b838601376000848b0183015290971660808301525060a081019490945291151560c084015260e08301526001600160a01b0316610100820152601f909201601f191690910101949350505050565b6000806040838503121561373d57600080fd5b505080516020909101519092909150565b6000835161376081846020880161317f565b83519083019061377481836020880161317f565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016137a5576137a561377d565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826137d1576137d16137ac565b500490565b8181038181111561078d5761078d61377d565b6000826137f8576137f86137ac565b500690565b8082018082111561078d5761078d61377d565b6000835161382281846020880161317f565b83519083019061383681836020880161317f565b602f60f81b9101908152600101949350505050565b601f8211156109cf57600081815260208120601f850160051c810160208610156138725750805b601f850160051c820191505b818110156138915782815560010161387e565b505050505050565b815167ffffffffffffffff8111156138b3576138b3613227565b6138c7816138c18454613555565b8461384b565b602080601f8311600181146138fc57600084156138e45750858301515b600019600386901b1c1916600185901b178555613891565b600085815260208120601f198616915b8281101561392b5788860151825594840194600190910190840161390c565b50858210156139495787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906139de908301846131a3565b9695505050505050565b6000602082840312156139fa57600080fd5b8151612e298161314c565b634e487b7160e01b600052603160045260246000fd5b60008251613a2d81846020870161317f565b919091019291505056fea164736f6c6343000811000a",
  "devdoc": {
    "author": "NFTfi",
    "details": "This contract prevents owners of the bundles to remove any child, but they can still receive new children.      Solves the problem of bundles being emptied by their owner between they are listed and the loan begins.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "details": "Stores the bundler, name and symbol",
        "params": {
          "_bundler": "Address of the bundler contract",
          "_name": "name of the token contract",
          "_symbol": "symbol of the token contract"
        }
      },
      "convertToPersonalBundler(uint256,address)": {
        "params": {
          "_immutableId": "the id of the immutable bundle",
          "_personalBundler": "the address of the personal bundler conract"
        }
      },
      "createAndConvertToPersonalBundler(uint256)": {
        "params": {
          "_immutableId": "the id of the immutable bundle"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintBundle(address)": {
        "params": {
          "_to": "The address that owns the new immutable bundle"
        },
        "returns": {
          "_0": "The id of the new created immutable bundle"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "params": {
          "_bundleId": "The bundle that is being transferred param _data Arbitrary data",
          "_from": "The previous owner of the token"
        },
        "returns": {
          "_0": "the selector of this method"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pause()": {
        "details": "Triggers stopped state. Requirements: - Only the owner can call this method. - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pullAirdrop(uint256,address,uint256,address,bytes,address,uint256,bool,uint256)": {
        "params": {
          "_data": "- function selector to be called on the airdropping contract",
          "_immutableId": "- the id of the immutable bundle",
          "_is1155": "-",
          "_nftAirdrop": "- address of the used claiming nft in the drop",
          "_nftAirdropAmount": "- amount in case of 1155",
          "_nftAirdropId": "- id of the used claiming nft in the drop",
          "_nftContract": "- contract address of the target nft of the drop",
          "_nftId": "- id of the target nft of the drop",
          "_target": "- address of the airdropping contract"
        }
      },
      "requestTransferOwnership(address)": {
        "details": "Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`). Can only be called by the current owner."
      },
      "rescueERC20(address,address)": {
        "params": {
          "_receiver": "- receiver of the token",
          "_tokenAddress": "- address of the token contract for the token to be sent out"
        }
      },
      "rescueERC721(address,uint256,address)": {
        "params": {
          "_receiver": "- receiver of the token",
          "_tokenAddress": "- address of the token contract for the token to be sent out",
          "_tokenId": "- id token to be sent out"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "Sets baseURI.",
        "params": {
          "_customBaseURI": "- Base URI"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "unpause()": {
        "details": "Returns to normal state. Requirements: - Only the owner can call this method. - The contract must be paused."
      },
      "withdraw(uint256,address)": {
        "params": {
          "_immutableId": "the id of the immutable bundle",
          "_to": "the address of the receiver of the bundle"
        }
      },
      "withdrawAndDecompose(uint256,address)": {
        "params": {
          "_immutableId": "the id of the immutable bundle",
          "_to": "the address of the receiver of the bundle"
        }
      }
    },
    "title": "ImmutableBundle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "convertToPersonalBundler(uint256,address)": {
        "notice": "Takes an existing immutable regular bundle and converts it to a personal bundle, has to be provided with a personal bundler contract address"
      },
      "createAndConvertToPersonalBundler(uint256)": {
        "notice": "Takes an existing immutable regular bundle and converts it to a personal bundle, creates the personal bundler contract implicitly."
      },
      "mintBundle(address)": {
        "notice": "Mints a new bundle storing it as immutable bundle.         The bundle can receive children but there is no way to remove a child, unless withdrawing the bundle."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Method invoked when a bundle is received param The address that caused the transfer"
      },
      "pullAirdrop(uint256,address,uint256,address,bytes,address,uint256,bool,uint256)": {
        "notice": "this function initiates a flashloan to pull an airdrop from a tartget contract"
      },
      "rescueERC20(address,address)": {
        "notice": "used by the owner account to be able to drain ERC20 tokens received as airdrops for the locked  collateral NFT-s"
      },
      "rescueERC721(address,uint256,address)": {
        "notice": "used by the owner account to be able to drain ERC721 tokens received as airdrops for the locked  collateral NFT-s"
      },
      "withdraw(uint256,address)": {
        "notice": "Withdraw a bundle"
      },
      "withdrawAndDecompose(uint256,address)": {
        "notice": "Withdraw a bundle and remove all the children from the bundle"
      }
    },
    "notice": "Bundle wrapper that allows users to lock bundles so they can be used for loans.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3606,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3608,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3612,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3616,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3620,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3626,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4577,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4581,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4584,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4588,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 12135,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 12137,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "_ownerCandidate",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 805,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "_paused",
        "offset": 20,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 7896,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "tokenCount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 7906,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "baseURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 7910,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "bundleOfImmutable",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7914,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "immutableOfBundle",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7918,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "personalBundlerOfImmutable",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7922,
        "contract": "contracts/ImmutableBundle.sol:ImmutableBundle",
        "label": "immutableOfPersonalBundler",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}