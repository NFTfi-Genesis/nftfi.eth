{
  "address": "0x92881963dE60D878a3e3AD1f14472DE80B6Ef6fe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_permittedNfts",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_airdropFlashLoan",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "safeTransferable",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct IBundleBuilder.BundleElementERC721[]",
          "name": "_bundleElements",
          "type": "tuple[]"
        }
      ],
      "name": "AddBundleElements",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_childContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_childTokenId",
          "type": "uint256"
        }
      ],
      "name": "ReceivedChild",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "safeTransferable",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct IBundleBuilder.BundleElementERC721[]",
          "name": "_bundleElements",
          "type": "tuple[]"
        }
      ],
      "name": "RemoveBundleElements",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_childContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_childTokenId",
          "type": "uint256"
        }
      ],
      "name": "TransferChild",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC998_MAGIC_VALUE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "safeTransferable",
              "type": "bool"
            }
          ],
          "internalType": "struct IBundleBuilder.BundleElementERC721[]",
          "name": "_toAdd",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "safeTransferable",
              "type": "bool"
            }
          ],
          "internalType": "struct IBundleBuilder.BundleElementERC721[]",
          "name": "_toRemove",
          "type": "tuple[]"
        }
      ],
      "name": "addAndRemoveBundleElements",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "safeTransferable",
              "type": "bool"
            }
          ],
          "internalType": "struct IBundleBuilder.BundleElementERC721[]",
          "name": "_bundleElements",
          "type": "tuple[]"
        }
      ],
      "name": "addBundleElements",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "airdropFlashLoan",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "safeTransferable",
              "type": "bool"
            }
          ],
          "internalType": "struct IBundleBuilder.BundleElementERC721[]",
          "name": "_bundleElements",
          "type": "tuple[]"
        }
      ],
      "name": "buildBundle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bundleId",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "childContractByIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "childContract",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_childContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_childTokenId",
          "type": "uint256"
        }
      ],
      "name": "childExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_childContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "childTokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "childTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "decomposeBundle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "drainERC1155Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "drainERC20Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "drainERC721Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_childContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_childTokenId",
          "type": "uint256"
        }
      ],
      "name": "getChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_customBaseURI",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBundleOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_childTokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_childContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_childTokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOfChild",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "parentTokenOwner",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "parentTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "permittedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "permittedNfts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_nftAirdrop",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftAirdropId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_is1155",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_nftAirdropAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "pullAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rejectTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "safeTransferable",
              "type": "bool"
            }
          ],
          "internalType": "struct IBundleBuilder.BundleElementERC721[]",
          "name": "_bundleElements",
          "type": "tuple[]"
        }
      ],
      "name": "removeBundleElements",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwnerCandidate",
          "type": "address"
        }
      ],
      "name": "requestTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "rescueERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "rescueERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "rootOwnerOf",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "rootOwner",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_childContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_childTokenId",
          "type": "uint256"
        }
      ],
      "name": "rootOwnerOfChild",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "rootOwner",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "safeMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_childContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_childTokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_childContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_childTokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sendElementsToPersonalBundler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_customBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "totalChildContracts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_childContract",
          "type": "address"
        }
      ],
      "name": "totalChildTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_childContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_childTokenId",
          "type": "uint256"
        }
      ],
      "name": "transferChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "transferChildToParent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x66cd58cf9ea911facee552f33a1e826106427c6468badae7a4c1546eba4902f2",
  "receipt": {
    "to": null,
    "from": "0x02e037F56728E947e92Af2c05baF7FeF387Ddd06",
    "contractAddress": "0x92881963dE60D878a3e3AD1f14472DE80B6Ef6fe",
    "transactionIndex": 72,
    "gasUsed": "4734945",
    "logsBloom": "0x
    "blockHash": "0xebc5189660a576b5cfecdbafc65bfb4d310a8a0fcfcbb20e4de69a64ac09840c",
    "transactionHash": "0x66cd58cf9ea911facee552f33a1e826106427c6468badae7a4c1546eba4902f2",
    "logs": [
      {
        "transactionIndex": 72,
        "blockNumber": 8103087,
        "transactionHash": "0x66cd58cf9ea911facee552f33a1e826106427c6468badae7a4c1546eba4902f2",
        "address": "0x92881963dE60D878a3e3AD1f14472DE80B6Ef6fe",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000042e0911810c50ff07b12305365495aeb0b2b4f93"
        ],
        "data": "0x",
        "logIndex": 236,
        "blockHash": "0xebc5189660a576b5cfecdbafc65bfb4d310a8a0fcfcbb20e4de69a64ac09840c"
      },
      {
        "transactionIndex": 72,
        "blockNumber": 8103087,
        "transactionHash": "0x66cd58cf9ea911facee552f33a1e826106427c6468badae7a4c1546eba4902f2",
        "address": "0x92881963dE60D878a3e3AD1f14472DE80B6Ef6fe",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000042e0911810c50ff07b12305365495aeb0b2b4f93",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 237,
        "blockHash": "0xebc5189660a576b5cfecdbafc65bfb4d310a8a0fcfcbb20e4de69a64ac09840c"
      }
    ],
    "blockNumber": 8103087,
    "cumulativeGasUsed": "20606338",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x42e0911810C50FF07B12305365495aeb0b2b4f93",
    "0x78A911794A51A65cA9be8F94032331F3e8b4F1C2",
    "0xE3608d172168a1e6c2dc54777554f2FB3a72ac72"
  ],
  "solcInputHash": "4d2fe29bb9bcc7b729a2a79c750939bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_permittedNfts\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_airdropFlashLoan\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"safeTransferable\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IBundleBuilder.BundleElementERC721[]\",\"name\":\"_bundleElements\",\"type\":\"tuple[]\"}],\"name\":\"AddBundleElements\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"ReceivedChild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"safeTransferable\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IBundleBuilder.BundleElementERC721[]\",\"name\":\"_bundleElements\",\"type\":\"tuple[]\"}],\"name\":\"RemoveBundleElements\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"TransferChild\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC998_MAGIC_VALUE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"safeTransferable\",\"type\":\"bool\"}],\"internalType\":\"struct IBundleBuilder.BundleElementERC721[]\",\"name\":\"_toAdd\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"safeTransferable\",\"type\":\"bool\"}],\"internalType\":\"struct IBundleBuilder.BundleElementERC721[]\",\"name\":\"_toRemove\",\"type\":\"tuple[]\"}],\"name\":\"addAndRemoveBundleElements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"safeTransferable\",\"type\":\"bool\"}],\"internalType\":\"struct IBundleBuilder.BundleElementERC721[]\",\"name\":\"_bundleElements\",\"type\":\"tuple[]\"}],\"name\":\"addBundleElements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropFlashLoan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"safeTransferable\",\"type\":\"bool\"}],\"internalType\":\"struct IBundleBuilder.BundleElementERC721[]\",\"name\":\"_bundleElements\",\"type\":\"tuple[]\"}],\"name\":\"buildBundle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bundleId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"childContractByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"childContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"childExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"childTokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"childTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"decomposeBundle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"drainERC1155Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"drainERC20Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"drainERC721Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"getChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_customBaseURI\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBundleOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOfChild\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentTokenOwner\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"parentTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"permittedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permittedNfts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_nftAirdrop\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftAirdropId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_is1155\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_nftAirdropAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"pullAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rejectTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"safeTransferable\",\"type\":\"bool\"}],\"internalType\":\"struct IBundleBuilder.BundleElementERC721[]\",\"name\":\"_bundleElements\",\"type\":\"tuple[]\"}],\"name\":\"removeBundleElements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"requestTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"rescueERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"rootOwnerOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootOwner\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"rootOwnerOfChild\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootOwner\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sendElementsToPersonalBundler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_customBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"totalChildContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"}],\"name\":\"totalChildTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"transferChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"transferChildToParent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"NFTfi\",\"details\":\"ERC998 Top-Down Composable Non-Fungible Token that supports ERC721 children.\",\"kind\":\"dev\",\"methods\":{\"addAndRemoveBundleElements(uint256,(address,uint256[],bool)[],(address,uint256[],bool)[])\":{\"details\":\"Adds and removes a set of BundleElementERC721 objects from the specified token ID.\",\"params\":{\"_toAdd\":\"The array of BundleElementERC721 objects to add.\",\"_toRemove\":\"The array of BundleElementERC721 objects to remove.\",\"_tokenId\":\"The ID of the token to add and remove the bundle elements from.\"}},\"addBundleElements(uint256,(address,uint256[],bool)[])\":{\"details\":\"Adds a set of BundleElementERC721 objects to the specified token ID.\",\"params\":{\"_bundleElements\":\"The array of BundleElementERC721 objects to add.\",\"_tokenId\":\"The ID of the token to add the bundle elements to.\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"buildBundle((address,uint256[],bool)[])\":{\"details\":\"used to build a bundle from the BundleElements struct, returns the id of the created bundle\",\"params\":{\"_bundleElements\":\"- the lists of erc721 tokens that are to be bundled\"}},\"childContractByIndex(uint256,uint256)\":{\"params\":{\"_index\":\"The index position of the child contract\",\"_tokenId\":\"The parent token of child tokens in child contract\"},\"returns\":{\"childContract\":\"The contract found at the _tokenId and index\"}},\"childExists(address,uint256)\":{\"params\":{\"_childContract\":\"The contract address of the child token\",\"_childTokenId\":\"The tokenId of the child\"},\"returns\":{\"_0\":\"True if the child exists, false otherwise\"}},\"childTokenByIndex(uint256,address,uint256)\":{\"params\":{\"_childContract\":\"The child contract of the child token\",\"_index\":\"The index position of the child token\",\"_tokenId\":\"The parent token of the child token\"},\"returns\":{\"childTokenId\":\"The child tokenId for the parent token, child token and index\"}},\"constructor\":{\"details\":\"only runs when the master copy is deplyoed, when cloned then initializer is ran\",\"params\":{\"_admin\":\"admin address capable of setting URI-s and pausing\",\"_airdropFlashLoan\":\"airdrop flashloan contract deplyoed alongside\",\"_permittedNfts\":\"permitted nft-s contract of the loan system\"}},\"decomposeBundle(uint256,address)\":{\"details\":\"This method may run out of gas if the list of children is too big. In that case, children can be removed      individually.\",\"params\":{\"_receiver\":\"address of the receiver of the children\",\"_tokenId\":\"the id of the bundle\"}},\"drainERC1155Airdrop(address,uint256,address)\":{\"params\":{\"_receiver\":\"- receiver of the token\",\"_tokenAddress\":\"- address of the token contract for the token to be sent out\",\"_tokenId\":\"- id token to be sent out\"}},\"drainERC20Airdrop(address,address)\":{\"params\":{\"_receiver\":\"- receiver of the token\",\"_tokenAddress\":\"- address of the token contract for the token to be sent out\"}},\"drainERC721Airdrop(address,uint256,address)\":{\"params\":{\"_receiver\":\"- receiver of the token\",\"_tokenAddress\":\"- address of the token contract for the token to be sent out\",\"_tokenId\":\"- id token to be sent out\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getChild(address,uint256,address,uint256)\":{\"details\":\"This contract has to be approved first in _childContract\",\"params\":{\"_childContract\":\"The ERC721 contract of the child token\",\"_childTokenId\":\"The tokenId of the child token\",\"_from\":\"The address that owns the child token.\",\"_tokenId\":\"The token that becomes the parent owner\"}},\"initialize(address,address,string)\":{\"details\":\"sets up initial parameters after cloning\",\"params\":{\"_admin\":\"admin address capable of setting URI-s and pausing\",\"_customBaseURI\":\"- Base URI\",\"_owner\":\"of the personal bundler\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}. have to override, because cloning doesn't work for it\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated.\",\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated.\",\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if allowed\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"params\":{\"_childTokenId\":\"The token that is being transferred to the parent\",\"_data\":\"Up to the first 32 bytes contains an integer which is the receiving parent tokenId\",\"_from\":\"The owner of the child token\"},\"returns\":{\"_0\":\"the selector of this method\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"ownerOfChild(address,uint256)\":{\"params\":{\"_childContract\":\"The contract address of the child token\",\"_childTokenId\":\"The tokenId of the child\"},\"returns\":{\"parentTokenId\":\"The parent tokenId of _childTokenId\",\"parentTokenOwner\":\"The parent address of the parent token and ERC998 magic value\"}},\"permittedAsset(address)\":{\"params\":{\"_asset\":\"address of the asset\"},\"returns\":{\"_0\":\"true if permitted, false otherwise\"}},\"pullAirdrop(address,uint256,address,bytes,address,uint256,bool,uint256,address)\":{\"params\":{\"_data\":\"- function selector to be called on the airdropping contract\",\"_is1155\":\"-\",\"_nftAirdrop\":\"- address of the used claiming nft in the drop\",\"_nftAirdropAmount\":\"- amount in case of 1155\",\"_nftAirdropId\":\"- id of the used claiming nft in the drop\",\"_nftContract\":\"- contract address of the target nft of the drop\",\"_nftId\":\"- id of the target nft of the drop\",\"_target\":\"- address of the airdropping contract\"}},\"removeBundleElements(uint256,(address,uint256[],bool)[])\":{\"details\":\"Removes a set of BundleElementERC721 objects to the specified token ID.\",\"params\":{\"_bundleElements\":\"The array of BundleElementERC721 objects to remove.\",\"_tokenId\":\"The ID of the token to remove the bundle elements from.\"}},\"requestTransferOwnership(address)\":{\"details\":\"Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`). Can only be called by the current owner.\"},\"rescueERC20(address,address)\":{\"params\":{\"_receiver\":\"- receiver of the token\",\"_tokenAddress\":\"- address of the token contract for the token to be sent out\"}},\"rescueERC721(address,uint256,address)\":{\"params\":{\"_receiver\":\"- receiver of the token\",\"_tokenAddress\":\"- address of the token contract for the token to be sent out\",\"_tokenId\":\"- id token to be sent out\"}},\"rootOwnerOf(uint256)\":{\"params\":{\"_tokenId\":\"The token to query for a root owner address\"},\"returns\":{\"rootOwner\":\"The root owner at the top of tree of tokens and ERC998 magic value.\"}},\"rootOwnerOfChild(address,uint256)\":{\"details\":\"Returns the owner at the top of the tree of composables Use Cases handled: - Case 1: Token owner is this contract and token. - Case 2: Token owner is other external top-down composable - Case 3: Token owner is other contract - Case 4: Token owner is user\",\"params\":{\"_childContract\":\"The contract address of the child token\",\"_childTokenId\":\"The tokenId of the child\"},\"returns\":{\"rootOwner\":\"The root owner at the top of tree of tokens and ERC998 magic value\"}},\"safeMint(address)\":{\"params\":{\"_to\":\"The address that owns the new bundle\"},\"returns\":{\"_0\":\"The id of the new bundle\"}},\"safeTransferChild(uint256,address,address,uint256)\":{\"params\":{\"_childContract\":\"The ERC721 contract of the child token\",\"_childTokenId\":\"The tokenId of the token that is being transferred\",\"_fromTokenId\":\"The owning token to transfer from\",\"_to\":\"The address that receives the child token\"}},\"safeTransferChild(uint256,address,address,uint256,bytes)\":{\"params\":{\"_childContract\":\"The ERC721 contract of the child token\",\"_childTokenId\":\"The tokenId of the token that is being transferred\",\"_data\":\"Additional data with no specified format\",\"_fromTokenId\":\"The owning token to transfer from\",\"_to\":\"The address that receives the child token\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"Sets baseURI.\",\"params\":{\"_customBaseURI\":\"- Base URI\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}. have to override, because cloning doesn't work for it\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalChildContracts(uint256)\":{\"params\":{\"_tokenId\":\"The parent token of child tokens in child contracts\"},\"returns\":{\"_0\":\"uint256 The total number of child contracts with tokens owned by _tokenId\"}},\"totalChildTokens(uint256,address)\":{\"params\":{\"_childContract\":\"The child contract containing the child tokens\",\"_tokenId\":\"The parent token of child tokens\"},\"returns\":{\"_0\":\"uint256 The total number of child tokens found in child contract that are owned by _tokenId\"}},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferChild(uint256,address,address,uint256)\":{\"details\":\"Transfer child token from top-down composable to address\",\"params\":{\"_childContract\":\"The ERC721 contract of the child token\",\"_childTokenId\":\"The tokenId of the token that is being transferred\",\"_fromTokenId\":\"The owning token to transfer from\",\"_to\":\"The address that receives the child token\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"PersonalBundler\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"childContractByIndex(uint256,uint256)\":{\"notice\":\"Get child contract by tokenId and index\"},\"childExists(address,uint256)\":{\"notice\":\"Tells whether the ERC721 type child exists or not\"},\"childTokenByIndex(uint256,address,uint256)\":{\"notice\":\"Get child token owned by _tokenId, in child contract, at index position\"},\"decomposeBundle(uint256,address)\":{\"notice\":\"Remove all the children from the bundle\"},\"drainERC1155Airdrop(address,uint256,address)\":{\"notice\":\"used by the owner account to be able to drain ERC1155 tokens received as airdrops for the locked  collateral NFT-s\"},\"drainERC20Airdrop(address,address)\":{\"notice\":\"used by the owner account to be able to drain ERC20 tokens received as airdrops for the locked  collateral NFT-s\"},\"drainERC721Airdrop(address,uint256,address)\":{\"notice\":\"used by the owner account to be able to drain ERC721 tokens received as airdrops for the locked  collateral NFT-s\"},\"getChild(address,uint256,address,uint256)\":{\"notice\":\"Transfer a child token from an ERC721 contract to a composable. Used for old tokens that does not have a safeTransferFrom method like cryptokitties\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"A token receives a child token param The address that caused the transfer\"},\"ownerOfChild(address,uint256)\":{\"notice\":\"Get the parent tokenId and its owner of a ERC721 child token\"},\"permittedAsset(address)\":{\"notice\":\"Tells if an asset is permitted or not\"},\"pullAirdrop(address,uint256,address,bytes,address,uint256,bool,uint256,address)\":{\"notice\":\"this function initiates a flashloan to pull an airdrop from a tartget contract\"},\"rescueERC20(address,address)\":{\"notice\":\"used by the owner account to be able to drain ERC20 tokens received as airdrops for the locked  collateral NFT-s\"},\"rescueERC721(address,uint256,address)\":{\"notice\":\"used by the owner account to be able to drain ERC721 tokens received as airdrops for the locked  collateral NFT-s\"},\"rootOwnerOf(uint256)\":{\"notice\":\"Get the root owner of tokenId\"},\"rootOwnerOfChild(address,uint256)\":{\"notice\":\"Get the root owner of a child token\"},\"safeMint(address)\":{\"notice\":\"Mints a new bundle\"},\"safeTransferChild(uint256,address,address,uint256)\":{\"notice\":\"Transfer child token from top-down composable to address\"},\"safeTransferChild(uint256,address,address,uint256,bytes)\":{\"notice\":\"Transfer child token from top-down composable to address or other top-down composable\"},\"sendElementsToPersonalBundler(uint256,address)\":{\"notice\":\"disabled here\"},\"totalChildContracts(uint256)\":{\"notice\":\"Get the total number of child contracts with tokens that are owned by _tokenId\"},\"totalChildTokens(uint256,address)\":{\"notice\":\"Get the total number of child tokens owned by tokenId that exist in a child contract\"},\"transferChildToParent(uint256,address,uint256,address,uint256,bytes)\":{\"notice\":\"NOT SUPPORTED Intended to transfer bottom-up composable child token from top-down composable to other ERC721 token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PersonalBundler.sol\":\"PersonalBundler\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8c578d9e30c8f2bb7ac01d108766df87d42b73d4d3638f01d494a894fe7c1f4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd644260d8e4e64563a7adba96d774dbaac6ae89c2ee58ef49a19850ff1239b08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/ERC998TopDown.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./IERC998ERC721TopDown.sol\\\";\\nimport \\\"./IERC998ERC721TopDownEnumerable.sol\\\";\\n\\n/**\\n * @title ERC998TopDown\\n * @author NFTfi\\n * @dev ERC998ERC721 Top-Down Composable Non-Fungible Token.\\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-998.md\\n * This implementation does not support children to be nested bundles, erc20 nor bottom-up\\n */\\nabstract contract ERC998TopDown is\\n    ERC721Enumerable,\\n    IERC998ERC721TopDown,\\n    IERC998ERC721TopDownEnumerable,\\n    ReentrancyGuard\\n{\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // return this.rootOwnerOf.selector ^ this.rootOwnerOfChild.selector ^\\n    //   this.tokenOwnerOf.selector ^ this.ownerOfChild.selector;\\n    bytes32 public constant ERC998_MAGIC_VALUE = 0xcd740db500000000000000000000000000000000000000000000000000000000;\\n    bytes32 internal constant ERC998_MAGIC_MASK = 0xffffffff00000000000000000000000000000000000000000000000000000000;\\n\\n    uint256 public tokenCount = 0;\\n\\n    // tokenId => child contract\\n    mapping(uint256 => EnumerableSet.AddressSet) internal childContracts;\\n\\n    // tokenId => (child address => array of child tokens)\\n    mapping(uint256 => mapping(address => EnumerableSet.UintSet)) internal childTokens;\\n\\n    // child address => childId => tokenId\\n    // this is used for ERC721 type tokens\\n    mapping(address => mapping(uint256 => uint256)) internal childTokenOwner;\\n\\n    /**\\n     * @notice Tells whether the ERC721 type child exists or not\\n     * @param _childContract The contract address of the child token\\n     * @param _childTokenId The tokenId of the child\\n     * @return True if the child exists, false otherwise\\n     */\\n    function childExists(address _childContract, uint256 _childTokenId) external view virtual returns (bool) {\\n        uint256 tokenId = childTokenOwner[_childContract][_childTokenId];\\n        return tokenId != 0;\\n    }\\n\\n    /**\\n     * @notice Get the total number of child contracts with tokens that are owned by _tokenId\\n     * @param _tokenId The parent token of child tokens in child contracts\\n     * @return uint256 The total number of child contracts with tokens owned by _tokenId\\n     */\\n    function totalChildContracts(uint256 _tokenId) public view virtual override returns (uint256) {\\n        return childContracts[_tokenId].length();\\n    }\\n\\n    /**\\n     * @notice Get child contract by tokenId and index\\n     * @param _tokenId The parent token of child tokens in child contract\\n     * @param _index The index position of the child contract\\n     * @return childContract The contract found at the _tokenId and index\\n     */\\n    function childContractByIndex(uint256 _tokenId, uint256 _index)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address childContract)\\n    {\\n        return childContracts[_tokenId].at(_index);\\n    }\\n\\n    /**\\n     * @notice Get the total number of child tokens owned by tokenId that exist in a child contract\\n     * @param _tokenId The parent token of child tokens\\n     * @param _childContract The child contract containing the child tokens\\n     * @return uint256 The total number of child tokens found in child contract that are owned by _tokenId\\n     */\\n    function totalChildTokens(uint256 _tokenId, address _childContract) external view override returns (uint256) {\\n        return childTokens[_tokenId][_childContract].length();\\n    }\\n\\n    /**\\n     * @notice Get child token owned by _tokenId, in child contract, at index position\\n     * @param _tokenId The parent token of the child token\\n     * @param _childContract The child contract of the child token\\n     * @param _index The index position of the child token\\n     * @return childTokenId The child tokenId for the parent token, child token and index\\n     */\\n    function childTokenByIndex(\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _index\\n    ) external view virtual override returns (uint256 childTokenId) {\\n        return childTokens[_tokenId][_childContract].at(_index);\\n    }\\n\\n    /**\\n     * @notice Get the parent tokenId and its owner of a ERC721 child token\\n     * @param _childContract The contract address of the child token\\n     * @param _childTokenId The tokenId of the child\\n     * @return parentTokenOwner The parent address of the parent token and ERC998 magic value\\n     * @return parentTokenId The parent tokenId of _childTokenId\\n     */\\n    function ownerOfChild(address _childContract, uint256 _childTokenId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bytes32 parentTokenOwner, uint256 parentTokenId)\\n    {\\n        parentTokenId = childTokenOwner[_childContract][_childTokenId];\\n        require(parentTokenId != 0, \\\"child token does not exist\\\");\\n        address parentTokenOwnerAddress = ownerOf(parentTokenId);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            parentTokenOwner := or(ERC998_MAGIC_VALUE, parentTokenOwnerAddress)\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the root owner of tokenId\\n     * @param _tokenId The token to query for a root owner address\\n     * @return rootOwner The root owner at the top of tree of tokens and ERC998 magic value.\\n     */\\n    function rootOwnerOf(uint256 _tokenId) public view virtual override returns (bytes32 rootOwner) {\\n        return rootOwnerOfChild(address(0), _tokenId);\\n    }\\n\\n    /**\\n     * @notice Get the root owner of a child token\\n     * @dev Returns the owner at the top of the tree of composables\\n     * Use Cases handled:\\n     * - Case 1: Token owner is this contract and token.\\n     * - Case 2: Token owner is other external top-down composable\\n     * - Case 3: Token owner is other contract\\n     * - Case 4: Token owner is user\\n     * @param _childContract The contract address of the child token\\n     * @param _childTokenId The tokenId of the child\\n     * @return rootOwner The root owner at the top of tree of tokens and ERC998 magic value\\n     */\\n    function rootOwnerOfChild(address _childContract, uint256 _childTokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bytes32 rootOwner)\\n    {\\n        address rootOwnerAddress;\\n        if (_childContract != address(0)) {\\n            (rootOwnerAddress, _childTokenId) = _ownerOfChild(_childContract, _childTokenId);\\n        } else {\\n            rootOwnerAddress = ownerOf(_childTokenId);\\n        }\\n\\n        if (rootOwnerAddress.isContract()) {\\n            try IERC998ERC721TopDown(rootOwnerAddress).rootOwnerOfChild(address(this), _childTokenId) returns (\\n                bytes32 returnedRootOwner\\n            ) {\\n                // Case 2: Token owner is other external top-down composable\\n                if (returnedRootOwner & ERC998_MAGIC_MASK == ERC998_MAGIC_VALUE) {\\n                    return returnedRootOwner;\\n                }\\n            } catch {\\n                // solhint-disable-previous-line no-empty-blocks\\n            }\\n        }\\n\\n        // Case 3: Token owner is other contract\\n        // Or\\n        // Case 4: Token owner is user\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            rootOwner := or(ERC998_MAGIC_VALUE, rootOwnerAddress)\\n        }\\n        return rootOwner;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     * The interface id 0x1efdf36a is added. The spec claims it to be the interface id of IERC998ERC721TopDown.\\n     * But it is not.\\n     * It is added anyway in case some contract checks it being compliant with the spec.\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC721Enumerable) returns (bool) {\\n        return\\n            _interfaceId == type(IERC998ERC721TopDown).interfaceId ||\\n            _interfaceId == type(IERC998ERC721TopDownEnumerable).interfaceId ||\\n            _interfaceId == 0x1efdf36a ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @notice Mints a new bundle\\n     * @param _to The address that owns the new bundle\\n     * @return The id of the new bundle\\n     */\\n    function safeMint(address _to) public virtual returns (uint256) {\\n        uint256 id = ++tokenCount;\\n        _safeMint(_to, id);\\n\\n        return id;\\n    }\\n\\n    /**\\n     * @notice Transfer child token from top-down composable to address\\n     * @param _fromTokenId The owning token to transfer from\\n     * @param _to The address that receives the child token\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The tokenId of the token that is being transferred\\n     */\\n    function safeTransferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) external virtual override nonReentrant {\\n        _transferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n        IERC721(_childContract).safeTransferFrom(address(this), _to, _childTokenId);\\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n    }\\n\\n    /**\\n     * @notice Transfer child token from top-down composable to address or other top-down composable\\n     * @param _fromTokenId The owning token to transfer from\\n     * @param _to The address that receives the child token\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The tokenId of the token that is being transferred\\n     * @param _data Additional data with no specified format\\n     */\\n    function safeTransferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId,\\n        bytes memory _data\\n    ) external virtual override nonReentrant {\\n        _transferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n        if (_to == address(this)) {\\n            _validateAndReceiveChild(msg.sender, _childContract, _childTokenId, _data);\\n        } else {\\n            IERC721(_childContract).safeTransferFrom(address(this), _to, _childTokenId, _data);\\n            emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer child token from top-down composable to address\\n     * @param _fromTokenId The owning token to transfer from\\n     * @param _to The address that receives the child token\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The tokenId of the token that is being transferred\\n     */\\n    function transferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) external virtual override nonReentrant {\\n        _transferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n        _oldNFTsTransfer(_to, _childContract, _childTokenId);\\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n    }\\n\\n    /**\\n     * @notice NOT SUPPORTED\\n     * Intended to transfer bottom-up composable child token from top-down composable to other ERC721 token.\\n     */\\n    function transferChildToParent(\\n        uint256,\\n        address,\\n        uint256,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) external virtual override {\\n        revert(\\\"BOTTOM_UP_CHILD_NOT_SUPPORTED\\\");\\n    }\\n\\n    /**\\n     * @notice Transfer a child token from an ERC721 contract to a composable. Used for old tokens that does not\\n     * have a safeTransferFrom method like cryptokitties\\n     * @dev This contract has to be approved first in _childContract\\n     * @param _from The address that owns the child token.\\n     * @param _tokenId The token that becomes the parent owner\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The tokenId of the child token\\n     */\\n    function getChild(\\n        address _from,\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) public virtual override nonReentrant {\\n        require(_from == msg.sender, \\\"_from should be msg.sender\\\");\\n        _receiveChild(_from, _tokenId, _childContract, _childTokenId);\\n        IERC721(_childContract).transferFrom(_from, address(this), _childTokenId);\\n    }\\n\\n    /**\\n     * @notice A token receives a child token\\n     * param The address that caused the transfer\\n     * @param _from The owner of the child token\\n     * @param _childTokenId The token that is being transferred to the parent\\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId\\n     * @return the selector of this method\\n     */\\n    function onERC721Received(\\n        address,\\n        address _from,\\n        uint256 _childTokenId,\\n        bytes calldata _data\\n    ) external virtual override nonReentrant returns (bytes4) {\\n        _validateAndReceiveChild(_from, msg.sender, _childTokenId, _data);\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev ERC721 implementation hook that is called before any token transfer. Prevents nested bundles\\n     * @param _from address of the current owner of the token\\n     * @param _to destination address\\n     * @param _tokenId id of the token to transfer\\n     */\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal virtual override {\\n        require(_to != address(this), \\\"nested bundles not allowed\\\");\\n        super._beforeTokenTransfer(_from, _to, _tokenId);\\n    }\\n\\n    /**\\n     * @dev Validates the child transfer parameters and remove the child from the bundle\\n     * @param _fromTokenId The owning token to transfer from\\n     * @param _to The address that receives the child token\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The tokenId of the token that is being transferred\\n     */\\n    function _transferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) internal virtual {\\n        _validateReceiver(_to);\\n        _validateChildTransfer(_fromTokenId, _childContract, _childTokenId);\\n        _removeChild(_fromTokenId, _childContract, _childTokenId);\\n    }\\n\\n    /**\\n     * @dev Validates the child transfer parameters\\n     * @param _fromTokenId The owning token to transfer from\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The tokenId of the token that is being transferred\\n     */\\n    function _validateChildTransfer(\\n        uint256 _fromTokenId,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) internal virtual {\\n        uint256 tokenId = childTokenOwner[_childContract][_childTokenId];\\n        require(tokenId != 0, \\\"_transferChild _childContract _childTokenId not found\\\");\\n        require(tokenId == _fromTokenId, \\\"ComposableTopDown: _transferChild wrong tokenId found\\\");\\n        _validateTransferSender(tokenId);\\n    }\\n\\n    /**\\n     * @dev Validates the receiver of a child transfer\\n     * @param _to The address that receives the child token\\n     */\\n    function _validateReceiver(address _to) internal virtual {\\n        require(_to != address(0), \\\"child transfer to zero address\\\");\\n    }\\n\\n    /**\\n     * @dev Updates the state to remove a child\\n     * @param _tokenId The owning token to transfer from\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The tokenId of the token that is being transferred\\n     */\\n    function _removeChild(\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) internal virtual {\\n        // remove child token\\n        childTokens[_tokenId][_childContract].remove(_childTokenId);\\n        delete childTokenOwner[_childContract][_childTokenId];\\n\\n        // remove contract\\n        if (childTokens[_tokenId][_childContract].length() == 0) {\\n            childContracts[_tokenId].remove(_childContract);\\n        }\\n    }\\n\\n    /**\\n     * @dev Validates the data from a child transfer and receives it\\n     * @param _from The owner of the child token\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The token that is being transferred to the parent\\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId\\n     */\\n    function _validateAndReceiveChild(\\n        address _from,\\n        address _childContract,\\n        uint256 _childTokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        require(_data.length > 0, \\\"data must contain tokenId to transfer the child token to\\\");\\n        // convert up to 32 bytes of _data to uint256, owner nft tokenId passed as uint in bytes\\n        uint256 tokenId = _parseTokenId(_data);\\n        _receiveChild(_from, tokenId, _childContract, _childTokenId);\\n    }\\n\\n    /**\\n     * @dev Update the state to receive a child\\n     * @param _from The owner of the child token\\n     * @param _tokenId The token receiving the child\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The token that is being transferred to the parent\\n     */\\n    function _receiveChild(\\n        address _from,\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) internal virtual {\\n        require(_exists(_tokenId), \\\"bundle tokenId does not exist\\\");\\n        uint256 childTokensLength = childTokens[_tokenId][_childContract].length();\\n        if (childTokensLength == 0) {\\n            childContracts[_tokenId].add(_childContract);\\n        }\\n        childTokens[_tokenId][_childContract].add(_childTokenId);\\n        childTokenOwner[_childContract][_childTokenId] = _tokenId;\\n        emit ReceivedChild(_from, _tokenId, _childContract, _childTokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of a child\\n     * @param _childContract The contract address of the child token\\n     * @param _childTokenId The tokenId of the child\\n     * @return parentTokenOwner The parent address of the parent token and ERC998 magic value\\n     * @return parentTokenId The parent tokenId of _childTokenId\\n     */\\n    function _ownerOfChild(address _childContract, uint256 _childTokenId)\\n        internal\\n        view\\n        virtual\\n        returns (address parentTokenOwner, uint256 parentTokenId)\\n    {\\n        parentTokenId = childTokenOwner[_childContract][_childTokenId];\\n        require(parentTokenId != 0, \\\"child token does not exist\\\");\\n        return (ownerOf(parentTokenId), parentTokenId);\\n    }\\n\\n    /**\\n     * @dev Convert up to 32 bytes of_data to uint256, owner nft tokenId passed as uint in bytes\\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId\\n     * @return tokenId the token Id encoded in the data\\n     */\\n    function _parseTokenId(bytes memory _data) internal pure virtual returns (uint256 tokenId) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            tokenId := mload(add(_data, 0x20))\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers the NFT using method compatible with old token contracts\\n     * @param _to address of the receiver of the children\\n     * @param _childContract The contract address of the child token\\n     * @param _childTokenId The tokenId of the child\\n     */\\n    function _oldNFTsTransfer(\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) internal {\\n        // This is here to be compatible with cryptokitties and other old contracts that require being owner and\\n        // approved before transferring.\\n        // Does not work with current standard which does not allow approving self, so we must let it fail in that case.\\n        try IERC721(_childContract).approve(address(this), _childTokenId) {\\n            // solhint-disable-previous-line no-empty-blocks\\n        } catch {\\n            // solhint-disable-previous-line no-empty-blocks\\n        }\\n\\n        IERC721(_childContract).transferFrom(address(this), _to, _childTokenId);\\n    }\\n\\n    /**\\n     * @notice Validates that the sender is authorized to perform a child transfer\\n     * @param _fromTokenId The owning token to transfer from\\n     */\\n    function _validateTransferSender(uint256 _fromTokenId) internal virtual {\\n        address rootOwner = address(uint160(uint256(rootOwnerOf(_fromTokenId))));\\n        require(\\n            rootOwner == msg.sender ||\\n                getApproved(_fromTokenId) == msg.sender ||\\n                isApprovedForAll(rootOwner, msg.sender),\\n            \\\"transferChild msg.sender not eligible\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8b432ec7cee3cbba22dd63fa63d4cbb54eb319c9da18f3803e4e04668b5ba79e\",\"license\":\"MIT\"},\"contracts/IBundleBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\ninterface IBundleBuilder {\\n    /**\\n     * @notice data of a erc721 bundle element\\n     *\\n     * @param tokenContract - address of the token contract\\n     * @param id - id of the token\\n     * @param safeTransferable - wether the implementing token contract has a safeTransfer function or not\\n     */\\n    struct BundleElementERC721 {\\n        address tokenContract;\\n        uint256[] ids;\\n        bool safeTransferable;\\n    }\\n\\n    /**\\n     * @notice used to build a bundle from the BundleElements struct,\\n     * returns the id of the created bundle\\n     *\\n     * @param _bundleElements - the lists of erc721 tokens that are to be bundled\\n     */\\n    function buildBundle(BundleElementERC721[] memory _bundleElements) external returns (uint256);\\n\\n    /**\\n     * @notice Remove all the children from the bundle\\n     * @dev This method may run out of gas if the list of children is too big. In that case, children can be removed\\n     *      individually or in smaller batches.\\n     * @param _tokenId the id of the bundle\\n     * @param _receiver address of the receiver of the children\\n     */\\n    function decomposeBundle(uint256 _tokenId, address _receiver) external;\\n\\n    event AddBundleElements(uint256 indexed _tokenId, BundleElementERC721[] _bundleElements);\\n    event RemoveBundleElements(uint256 indexed _tokenId, BundleElementERC721[] _bundleElements);\\n}\\n\",\"keccak256\":\"0x748ecd95e5d440a7dca7d9736cd24932c9756645f04ed6a0ed2c73c6816e44a9\",\"license\":\"BUSL-1.1\"},\"contracts/IERC998ERC721TopDown.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IERC998ERC721TopDown {\\n    event ReceivedChild(\\n        address indexed _from,\\n        uint256 indexed _tokenId,\\n        address indexed _childContract,\\n        uint256 _childTokenId\\n    );\\n    event TransferChild(\\n        uint256 indexed tokenId,\\n        address indexed _to,\\n        address indexed _childContract,\\n        uint256 _childTokenId\\n    );\\n\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _childTokenId,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    function transferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) external;\\n\\n    function safeTransferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) external;\\n\\n    function safeTransferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId,\\n        bytes memory _data\\n    ) external;\\n\\n    function transferChildToParent(\\n        uint256 _fromTokenId,\\n        address _toContract,\\n        uint256 _toTokenId,\\n        address _childContract,\\n        uint256 _childTokenId,\\n        bytes memory _data\\n    ) external;\\n\\n    // getChild function enables older contracts like cryptokitties to be transferred into a composable\\n    // The _childContract must approve this contract. Then getChild can be called.\\n    function getChild(\\n        address _from,\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) external;\\n\\n    function rootOwnerOf(uint256 _tokenId) external view returns (bytes32 rootOwner);\\n\\n    function rootOwnerOfChild(address _childContract, uint256 _childTokenId) external view returns (bytes32 rootOwner);\\n\\n    function ownerOfChild(address _childContract, uint256 _childTokenId)\\n        external\\n        view\\n        returns (bytes32 parentTokenOwner, uint256 parentTokenId);\\n}\\n\",\"keccak256\":\"0x618d02e468cd16a425026d6aa5ef2a6500868cd8f833b34e0cfd63cbefbc37cd\",\"license\":\"MIT\"},\"contracts/IERC998ERC721TopDownEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IERC998ERC721TopDownEnumerable {\\n    function totalChildContracts(uint256 _tokenId) external view returns (uint256);\\n\\n    function childContractByIndex(uint256 _tokenId, uint256 _index) external view returns (address childContract);\\n\\n    function totalChildTokens(uint256 _tokenId, address _childContract) external view returns (uint256);\\n\\n    function childTokenByIndex(\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _index\\n    ) external view returns (uint256 childTokenId);\\n}\\n\",\"keccak256\":\"0xf1aa556e8ebebe9a4ba166ffb77d414b0ee396920ad4943941f66ca6dc7c17fc\",\"license\":\"MIT\"},\"contracts/INftfiBundler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface INftfiBundler is IERC721 {\\n    function safeMint(address _to) external returns (uint256);\\n\\n    function decomposeBundle(uint256 _tokenId, address _receiver) external;\\n}\\n\",\"keccak256\":\"0xca2dcf302199bd5cb13160fb190ee85442bdd5532d6136b10e6dfacabe459819\",\"license\":\"MIT\"},\"contracts/IPermittedNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\ninterface IPermittedNFTs {\\n    function getNFTPermit(address _nftContract) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf2be96024fd118f0eab5a45fcfa618847299fdcd4bd8798824b2331624285ce2\",\"license\":\"BUSL-1.1\"},\"contracts/NftfiBundler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ERC998TopDown.sol\\\";\\nimport \\\"./INftfiBundler.sol\\\";\\nimport \\\"./IBundleBuilder.sol\\\";\\nimport \\\"./IPermittedNFTs.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./airdrop/AirdropFlashLoan.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title NftfiBundler\\n * @author NFTfi\\n * @dev ERC998 Top-Down Composable Non-Fungible Token that supports ERC721 children.\\n */\\ncontract NftfiBundler is ERC998TopDown, IBundleBuilder, Ownable {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n    using Strings for uint256;\\n\\n    address public immutable permittedNfts;\\n    address public immutable airdropFlashLoan;\\n\\n    string public baseURI;\\n\\n    /**\\n     * @dev Stores name and symbol\\n     *\\n     * @param _admin - Initial admin of this contract.\\n     * @param _name name of the token contract\\n     * @param _symbol symbol of the token contract\\n     */\\n    constructor(\\n        address _admin,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _customBaseURI,\\n        address _permittedNfts,\\n        address _airdropFlashLoan\\n    ) ERC721(_name, _symbol) Ownable(_admin) {\\n        permittedNfts = _permittedNfts;\\n        airdropFlashLoan = _airdropFlashLoan;\\n        _setBaseURI(_customBaseURI);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IERC721Receiver).interfaceId ||\\n            _interfaceId == type(INftfiBundler).interfaceId ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @notice Tells if an asset is permitted or not\\n     * @param _asset address of the asset\\n     * @return true if permitted, false otherwise\\n     */\\n    function permittedAsset(address _asset) public view returns (bool) {\\n        IPermittedNFTs permittedNFTs = IPermittedNFTs(permittedNfts);\\n        return permittedNFTs.getNFTPermit(_asset) > 0;\\n    }\\n\\n    /**\\n     * @dev used to build a bundle from the BundleElements struct,\\n     * returns the id of the created bundle\\n     *\\n     * @param _bundleElements - the lists of erc721 tokens that are to be bundled\\n     */\\n    function buildBundle(BundleElementERC721[] memory _bundleElements) external override returns (uint256) {\\n        uint256 tokenId = safeMint(msg.sender);\\n        _addBundleElements(tokenId, _bundleElements);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev Adds a set of BundleElementERC721 objects to the specified token ID.\\n     *\\n     * @param _tokenId The ID of the token to add the bundle elements to.\\n     * @param _bundleElements The array of BundleElementERC721 objects to add.\\n     */\\n    function addBundleElements(uint256 _tokenId, BundleElementERC721[] memory _bundleElements) external {\\n        _addBundleElements(_tokenId, _bundleElements);\\n    }\\n\\n    /**\\n     * @dev Removes a set of BundleElementERC721 objects to the specified token ID.\\n     *\\n     * @param _tokenId The ID of the token to remove the bundle elements from.\\n     * @param _bundleElements The array of BundleElementERC721 objects to remove.\\n     */\\n    function removeBundleElements(uint256 _tokenId, BundleElementERC721[] memory _bundleElements) external {\\n        _removeBundleElements(_tokenId, _bundleElements);\\n    }\\n\\n    /**\\n     * @dev Adds and removes a set of BundleElementERC721 objects from the specified token ID.\\n     *\\n     * @param _tokenId The ID of the token to add and remove the bundle elements from.\\n     * @param _toAdd The array of BundleElementERC721 objects to add.\\n     * @param _toRemove The array of BundleElementERC721 objects to remove.\\n     */\\n    function addAndRemoveBundleElements(\\n        uint256 _tokenId,\\n        BundleElementERC721[] memory _toAdd,\\n        BundleElementERC721[] memory _toRemove\\n    ) external {\\n        _addBundleElements(_tokenId, _toAdd);\\n        _removeBundleElements(_tokenId, _toRemove);\\n    }\\n\\n    /**\\n     * @notice Remove all the children from the bundle\\n     * @dev This method may run out of gas if the list of children is too big. In that case, children can be removed\\n     *      individually.\\n     * @param _tokenId the id of the bundle\\n     * @param _receiver address of the receiver of the children\\n     */\\n    function decomposeBundle(uint256 _tokenId, address _receiver) external override {\\n        _validateReceiver(_receiver);\\n        _validateTransferSender(_tokenId);\\n\\n        // In each iteration all contracts children are removed, so eventually all contracts are removed\\n        while (childContracts[_tokenId].length() > 0) {\\n            address childContract = childContracts[_tokenId].at(0);\\n\\n            // In each iteration a child is removed, so eventually all contracts children are removed\\n            while (childTokens[_tokenId][childContract].length() > 0) {\\n                uint256 childId = childTokens[_tokenId][childContract].at(0);\\n\\n                _removeChild(_tokenId, childContract, childId);\\n\\n                try IERC721(childContract).safeTransferFrom(address(this), _receiver, childId) {\\n                    // solhint-disable-previous-line no-empty-blocks\\n                } catch {\\n                    _oldNFTsTransfer(_receiver, childContract, childId);\\n                }\\n                emit TransferChild(_tokenId, _receiver, childContract, childId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove all the children from the bundle and send to personla bundler.\\n     * If bundle contains a legacy ERC721 element, this will not work.\\n     * @dev This method may run out of gas if the list of children is too big. In that case, children can be removed\\n     *      individually.\\n     * @param _tokenId the id of the bundle\\n     * @param _personalBundler address of the receiver of the children\\n     */\\n    function sendElementsToPersonalBundler(uint256 _tokenId, address _personalBundler) external virtual {\\n        _validateReceiver(_personalBundler);\\n        _validateTransferSender(_tokenId);\\n        require(_personalBundler != address(this), \\\"cannot send to self\\\");\\n        require(\\n            IERC165(_personalBundler).supportsInterface(type(IERC998ERC721TopDown).interfaceId),\\n            \\\"has to implement IERC998ERC721TopDown\\\"\\n        );\\n        uint256 personalBundleId = 1;\\n        //make sure sendeer owns personal bundler token\\n        require(IERC721(_personalBundler).ownerOf(personalBundleId) == msg.sender, \\\"has to own personal bundle token\\\");\\n\\n        // In each iteration all contracts children are removed, so eventually all contracts are removed\\n        while (childContracts[_tokenId].length() > 0) {\\n            address childContract = childContracts[_tokenId].at(0);\\n\\n            // In each iteration a child is removed, so eventually all contracts children are removed\\n            while (childTokens[_tokenId][childContract].length() > 0) {\\n                uint256 childId = childTokens[_tokenId][childContract].at(0);\\n\\n                _removeChild(_tokenId, childContract, childId);\\n\\n                try\\n                    IERC721(childContract).safeTransferFrom(\\n                        address(this),\\n                        _personalBundler,\\n                        childId,\\n                        abi.encodePacked(personalBundleId)\\n                    )\\n                {\\n                    // solhint-disable-previous-line no-empty-blocks\\n                } catch {\\n                    revert(\\\"only safe transfer\\\");\\n                }\\n                emit TransferChild(_tokenId, _personalBundler, childContract, childId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to add a set of BundleElementERC721 objects to the specified token ID.\\n     *\\n     * @param _tokenId The ID of the token to add the bundle elements to.\\n     * @param _bundleElements The array of BundleElementERC721 objects to add.\\n     */\\n    function _addBundleElements(uint256 _tokenId, BundleElementERC721[] memory _bundleElements) internal {\\n        require(_bundleElements.length > 0, \\\"bundle is empty\\\");\\n        uint256 elementNumber = _bundleElements.length;\\n        for (uint256 i; i != elementNumber; ++i) {\\n            require(permittedAsset(_bundleElements[i].tokenContract), \\\"erc721 not permitted\\\");\\n            if (_bundleElements[i].safeTransferable) {\\n                uint256 nuberOfIds = _bundleElements[i].ids.length;\\n                for (uint256 j; j != nuberOfIds; ++j) {\\n                    IERC721(_bundleElements[i].tokenContract).safeTransferFrom(\\n                        msg.sender,\\n                        address(this),\\n                        _bundleElements[i].ids[j],\\n                        abi.encodePacked(_tokenId)\\n                    );\\n                }\\n            } else {\\n                uint256 nuberOfIds = _bundleElements[i].ids.length;\\n                for (uint256 j; j != nuberOfIds; ++j) {\\n                    getChild(msg.sender, _tokenId, _bundleElements[i].tokenContract, _bundleElements[i].ids[j]);\\n                }\\n            }\\n        }\\n\\n        emit AddBundleElements(_tokenId, _bundleElements);\\n    }\\n\\n    /**\\n     * @dev Internal function to remove a set of BundleElementERC721 objects to the specified token ID.\\n     *\\n     * @param _tokenId The ID of the token to remove the bundle elements from.\\n     * @param _bundleElements The array of BundleElementERC721 objects to remove.\\n     */\\n    function _removeBundleElements(uint256 _tokenId, BundleElementERC721[] memory _bundleElements) internal {\\n        _validateTransferSender(_tokenId);\\n        require(_bundleElements.length > 0, \\\"bundle is empty\\\");\\n        uint256 elementNumber = _bundleElements.length;\\n        for (uint256 i; i != elementNumber; ++i) {\\n            address erc721Contract = _bundleElements[i].tokenContract;\\n            uint256 nuberOfIds = _bundleElements[i].ids.length;\\n            for (uint256 j; j != nuberOfIds; ++j) {\\n                uint256 childId = _bundleElements[i].ids[j];\\n\\n                _removeChild(_tokenId, erc721Contract, childId);\\n                if (_bundleElements[i].safeTransferable) {\\n                    IERC721(erc721Contract).safeTransferFrom(address(this), msg.sender, childId);\\n                } else {\\n                    _oldNFTsTransfer(msg.sender, erc721Contract, childId);\\n                }\\n                emit TransferChild(_tokenId, msg.sender, erc721Contract, childId);\\n            }\\n        }\\n\\n        emit RemoveBundleElements(_tokenId, _bundleElements);\\n    }\\n\\n    /**\\n     * @dev Update the state to receive a ERC721 child\\n     * Overrides the implementation to check if the asset is permitted\\n     * @param _from The owner of the child token\\n     * @param _tokenId The token receiving the child\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The token that is being transferred to the parent\\n     */\\n    function _receiveChild(\\n        address _from,\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) internal virtual override {\\n        require(permittedAsset(_childContract), \\\"erc721 not permitted\\\");\\n        super._receiveChild(_from, _tokenId, _childContract, _childTokenId);\\n    }\\n\\n    /**\\n     * @dev Override validation if it is a transfer from the airdropFlashLoan contract giving back the flashloan.\\n     * Validates the data from a child transfer and receives it otherwise\\n     * @param _from The owner of the child token\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The token that is being transferred to the parent\\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId\\n     */\\n    function _validateAndReceiveChild(\\n        address _from,\\n        address _childContract,\\n        uint256 _childTokenId,\\n        bytes memory _data\\n    ) internal virtual override {\\n        if (_from == airdropFlashLoan) {\\n            return;\\n        } else {\\n            super._validateAndReceiveChild(_from, _childContract, _childTokenId, _data);\\n        }\\n    }\\n\\n    /**\\n     * @notice this function initiates a flashloan to pull an airdrop from a tartget contract\\n     *\\n     * @param _nftContract - contract address of the target nft of the drop\\n     * @param _nftId - id of the target nft of the drop\\n     * @param _target - address of the airdropping contract\\n     * @param _data - function selector to be called on the airdropping contract\\n     * @param _nftAirdrop - address of the used claiming nft in the drop\\n     * @param _nftAirdropId - id of the used claiming nft in the drop\\n     * @param _is1155 -\\n     * @param _nftAirdropAmount - amount in case of 1155\\n     */\\n    function pullAirdrop(\\n        address _nftContract,\\n        uint256 _nftId,\\n        address _target,\\n        bytes calldata _data,\\n        address _nftAirdrop,\\n        uint256 _nftAirdropId,\\n        bool _is1155,\\n        uint256 _nftAirdropAmount,\\n        address _beneficiary\\n    ) external {\\n        uint256 tokenId = childTokenOwner[_nftContract][_nftId];\\n        address rootOwner = address(uint160(uint256(rootOwnerOf(tokenId))));\\n        require(rootOwner == msg.sender, \\\"pullAirdrop msg.sender not eligible\\\");\\n\\n        IERC721(_nftContract).safeTransferFrom(address(this), airdropFlashLoan, _nftId);\\n\\n        AirdropFlashLoan(airdropFlashLoan).pullAirdrop(\\n            _nftContract,\\n            _nftId,\\n            _target,\\n            _data,\\n            _nftAirdrop,\\n            _nftAirdropId,\\n            _is1155,\\n            _nftAirdropAmount,\\n            _beneficiary\\n        );\\n\\n        //take back collateral\\n        IERC721(_nftContract).safeTransferFrom(airdropFlashLoan, address(this), _nftId);\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC721 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _tokenId - id token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function rescueERC721(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        address _receiver\\n    ) external onlyOwner {\\n        IERC721 tokenContract = IERC721(_tokenAddress);\\n        require(childTokenOwner[_tokenAddress][_tokenId] == 0, \\\"token is in bundle\\\");\\n        require(tokenContract.ownerOf(_tokenId) == address(this), \\\"nft not owned\\\");\\n        tokenContract.safeTransferFrom(address(this), _receiver, _tokenId);\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC20 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function rescueERC20(address _tokenAddress, address _receiver) external onlyOwner {\\n        IERC20 tokenContract = IERC20(_tokenAddress);\\n        uint256 amount = tokenContract.balanceOf(address(this));\\n        require(amount > 0, \\\"no tokens owned\\\");\\n        tokenContract.safeTransfer(_receiver, amount);\\n    }\\n\\n    /**\\n     * @dev Sets baseURI.\\n     * @param _customBaseURI - Base URI\\n     */\\n    function setBaseURI(string memory _customBaseURI) external onlyOwner {\\n        _setBaseURI(_customBaseURI);\\n    }\\n\\n    /**\\n     * @dev Sets baseURI.\\n     */\\n    function _setBaseURI(string memory _customBaseURI) internal virtual {\\n        baseURI = bytes(_customBaseURI).length > 0\\n            ? string(abi.encodePacked(_customBaseURI, _getChainID().toString(), \\\"/\\\"))\\n            : \\\"\\\";\\n    }\\n\\n    /** @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`.\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @dev This function gets the current chain ID.\\n     */\\n    function _getChainID() internal view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\\n\",\"keccak256\":\"0x00ecc461a631481b77f38e360c08893b7abc54e6252bf93595489bd561f6b09b\",\"license\":\"MIT\"},\"contracts/PersonalBundler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\nimport \\\"./NftfiBundler.sol\\\";\\n\\n/**\\n * @title PersonalBundler\\n * @author NFTfi\\n * @dev ERC998 Top-Down Composable Non-Fungible Token that supports ERC721 children.\\n */\\ncontract PersonalBundler is NftfiBundler, Initializable, IERC1155Receiver {\\n    using SafeERC20 for IERC20;\\n\\n    uint8 public constant bundleId = 1;\\n    address public lastBundleOwner;\\n\\n    event Initialized(address owner);\\n\\n    /**\\n     * @dev only runs when the master copy is deplyoed, when cloned then initializer is ran\\n     * @param _admin admin address capable of setting URI-s and pausing\\n     * @param _permittedNfts permitted nft-s contract of the loan system\\n     * @param _airdropFlashLoan airdrop flashloan contract deplyoed alongside\\n     */\\n    constructor(\\n        address _admin,\\n        address _permittedNfts,\\n        address _airdropFlashLoan\\n    ) NftfiBundler(_admin, \\\"\\\", \\\"\\\", \\\"\\\", _permittedNfts, _airdropFlashLoan) {\\n        //original implementation rendering it unusable\\n        safeMint(_admin);\\n    }\\n\\n    /** @dev function enforcing that the caller is the bundle token owner */\\n    function onlyBundleOwner() internal view {\\n        require(ownerOf(bundleId) == msg.sender, \\\"Only bundle owner\\\");\\n    }\\n\\n    /**\\n     * @dev sets up initial parameters after cloning\\n     *\\n     * @param _admin admin address capable of setting URI-s and pausing\\n     * @param _owner of the personal bundler\\n     * @param _customBaseURI - Base URI\\n     */\\n    function initialize(\\n        address _admin,\\n        address _owner,\\n        string memory _customBaseURI\\n    ) external initializer nonReentrant {\\n        _setOwner(_admin);\\n        _setBaseURI(_customBaseURI);\\n        safeMint(_owner);\\n        emit Initialized(_owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     * have to override, because cloning doesn't work for it\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return \\\"NFTFi Personal Bundler\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     * have to override, because cloning doesn't work for it\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return \\\"PBNFI\\\";\\n    }\\n\\n    function safeMint(address _to) public override returns (uint256) {\\n        require(lastBundleOwner == address(0) || lastBundleOwner == msg.sender, \\\"only last bundle owner\\\");\\n        require(tokenCount == 0, \\\"only 1 bundle\\\");\\n\\n        return super.safeMint(_to);\\n    }\\n\\n    function burn() public {\\n        onlyBundleOwner();\\n        lastBundleOwner = msg.sender;\\n        require(totalChildContracts(bundleId) == 0, \\\"bundle has to be empty\\\");\\n        tokenCount -= 1;\\n        _burn(bundleId);\\n    }\\n\\n    /**\\n     * @notice disabled here\\n     */\\n    function sendElementsToPersonalBundler(uint256, address) external virtual override {\\n        revert(\\\"already personal bundler\\\");\\n    }\\n\\n    /**\\n     * @dev Validates the data from a child transfer and receives it\\n     * @param _from The owner of the child token\\n     * @param _childContract The ERC721 contract of the child token\\n     * @param _childTokenId The token that is being transferred to the parent\\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId\\n     */\\n    function _validateAndReceiveChild(\\n        address _from,\\n        address _childContract,\\n        uint256 _childTokenId,\\n        bytes memory _data\\n    ) internal virtual override {\\n        //CHECK DISABLED require(_data.length > 0, \\\"data must contain tokenId to transfer the child token to\\\");\\n        // if no data: airdrop\\n        if (_data.length > 0) {\\n            // convert up to 32 bytes of _data to uint256, owner nft tokenId passed as uint in bytes\\n            uint256 tokenId = _parseTokenId(_data);\\n            // 1 is the only existing valid token id, so all other data is an airdrop\\n            if (tokenId == bundleId) {\\n                _receiveChild(_from, tokenId, _childContract, _childTokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC721 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _tokenId - id token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function drainERC721Airdrop(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        address _receiver\\n    ) external {\\n        onlyBundleOwner();\\n        IERC721 tokenContract = IERC721(_tokenAddress);\\n        require(childTokenOwner[_tokenAddress][_tokenId] == 0, \\\"token is in bundle\\\");\\n        require(tokenContract.ownerOf(_tokenId) == address(this), \\\"nft not owned\\\");\\n        tokenContract.safeTransferFrom(address(this), _receiver, _tokenId);\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC1155 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _tokenId - id token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function drainERC1155Airdrop(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        address _receiver\\n    ) external {\\n        onlyBundleOwner();\\n        IERC1155 tokenContract = IERC1155(_tokenAddress);\\n        uint256 amount = tokenContract.balanceOf(address(this), _tokenId);\\n        require(amount > 0, \\\"no nfts owned\\\");\\n        tokenContract.safeTransferFrom(address(this), _receiver, _tokenId, amount, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC20 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function drainERC20Airdrop(address _tokenAddress, address _receiver) external {\\n        onlyBundleOwner();\\n        IERC20 tokenContract = IERC20(_tokenAddress);\\n        uint256 amount = tokenContract.balanceOf(address(this));\\n        require(amount > 0, \\\"no tokens owned\\\");\\n        tokenContract.safeTransfer(_receiver, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(IERC165, NftfiBundler) returns (bool) {\\n        return _interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     *  @dev Handles the receipt of a single ERC1155 token type. This function is called at the end of a\\n     * `safeTransferFrom` after the balance has been updated.\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if allowed\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     *  @dev Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a\\n     * `safeBatchTransferFrom` after the balances have been updated.\\n     *  @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x1c303c9514d69632c4cf576d29086120713222a4b115c7d87afd3a6e5c6fc33a\",\"license\":\"MIT\"},\"contracts/airdrop/AirdropFlashLoan.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title AirdropFlashLoan\\n * @author NFTfi\\n * @dev\\n */\\ncontract AirdropFlashLoan is ERC721Holder, ERC1155Holder, ReentrancyGuard {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice this function initiates a flashloan to pull an airdrop from a tartget contract\\n     *\\n     * @param _nftContract - contract address of the target nft of the drop\\n     * @param _nftId - id of the target nft of the drop\\n     * @param _target - address of the airdropping contract\\n     * @param _data - function selector to be called on the airdropping contract\\n     * @param _nftAirdrop - address of the used claiming nft in the drop\\n     * @param _nftAirdropId - id of the used claiming nft in the drop\\n     * @param _is1155 -\\n     * @param _nftAirdropAmount - amount in case of 1155\\n     * @param _beneficiary - address receiving the drop\\n     */\\n    function pullAirdrop(\\n        address _nftContract,\\n        uint256 _nftId,\\n        address _target,\\n        bytes calldata _data,\\n        address _nftAirdrop,\\n        uint256 _nftAirdropId,\\n        bool _is1155,\\n        uint256 _nftAirdropAmount,\\n        address _beneficiary\\n    ) external nonReentrant {\\n        // assumes that the collateral nft has been transferreded to this contract before calling this function\\n        _target.functionCall(_data);\\n\\n        // return the collateral\\n        IERC721(_nftContract).approve(msg.sender, _nftId);\\n\\n        // in case that arbitray function from _target does not send the airdrop to a specified address\\n        if (_nftAirdrop != address(0) && _beneficiary != address(0)) {\\n            // send the airdrop to the beneficiary\\n            if (_is1155) {\\n                IERC1155(_nftAirdrop).safeTransferFrom(\\n                    address(this),\\n                    _beneficiary,\\n                    _nftAirdropId,\\n                    _nftAirdropAmount,\\n                    \\\"0x\\\"\\n                );\\n            } else {\\n                IERC721(_nftAirdrop).safeTransferFrom(address(this), _beneficiary, _nftAirdropId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC1155Receiver) returns (bool) {\\n        return _interfaceId == type(IERC721Receiver).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfbf5ebeb54d625bebce3af1f5b1442ea028d06cf6f5a1f5b1b1fdb7a7fbfa201\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * Modified version from openzeppelin/contracts/access/Ownable.sol that allows to\\n * initialize the owner using a parameter in the constructor\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    address private _ownerCandidate;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /**\\n     * @dev Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`).\\n     * Can only be called by the current owner.\\n     */\\n    function requestTransferOwnership(address _newOwnerCandidate) public virtual onlyOwner {\\n        require(_newOwnerCandidate != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _ownerCandidate = _newOwnerCandidate;\\n    }\\n\\n    function acceptTransferOwnership() public virtual {\\n        require(_ownerCandidate == _msgSender(), \\\"Ownable: not owner candidate\\\");\\n        _setOwner(_ownerCandidate);\\n        delete _ownerCandidate;\\n    }\\n\\n    function cancelTransferOwnership() public virtual onlyOwner {\\n        delete _ownerCandidate;\\n    }\\n\\n    function rejectTransferOwnership() public virtual {\\n        require(_ownerCandidate == _msgSender(), \\\"Ownable: not owner candidate\\\");\\n        delete _ownerCandidate;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Sets the owner.\\n     */\\n    function _setOwner(address _newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(oldOwner, _newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x83bdd26c689547c2220deb46a3035803f6ce20f770f4a79b6ca5ae42e33c7378\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c06040526000600b553480156200001657600080fd5b5060405162005e7838038062005e78833981016040819052620000399162000ac1565b826040518060200160405280600081525060405180602001604052806000815250604051806020016040528060008152508585858585816000908162000080919062000baf565b5060016200008f828262000baf565b50506001600a5550620000a281620000e2565b506001600160a01b03808316608052811660a052620000c18362000134565b505050505050620000d883620001a160201b60201c565b5050505062000e37565b600f80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008151116200015457604051806020016040528060008152506200018e565b806200016b466200028360201b6200232c1760201c565b6040516020016200017e92919062000ca1565b6040516020818303038152906040525b6011906200019d908262000baf565b5050565b6012546000906201000090046001600160a01b03161580620001d357506012546201000090046001600160a01b031633145b620002255760405162461bcd60e51b815260206004820152601660248201527f6f6e6c79206c6173742062756e646c65206f776e65720000000000000000000060448201526064015b60405180910390fd5b600b5415620002675760405162461bcd60e51b815260206004820152600d60248201526c6f6e6c7920312062756e646c6560981b60448201526064016200021c565b6200027d82620003a360201b6200242c1760201c565b92915050565b606081600003620002ab5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115620002db5780620002c28162000cf6565b9150620002d39050600a8362000d28565b9150620002af565b6000816001600160401b03811115620002f857620002f862000b0b565b6040519080825280601f01601f19166020018201604052801562000323576020820181803683370190505b5090505b84156200039b576200033b60018362000d3f565b91506200034a600a8662000d55565b6200035790603062000d6c565b60f81b8183815181106200036f576200036f62000d82565b60200101906001600160f81b031916908160001a90535062000393600a8662000d28565b945062000327565b949350505050565b600080600b60008154620003b79062000cf6565b918290555090506200027d83826200019d828260405180602001604052806000815250620003e660201b60201c565b620003f283836200045e565b620004016000848484620005b4565b620004595760405162461bcd60e51b8152602060048201526032602482015260008051602062005e5883398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016200021c565b505050565b6001600160a01b038216620004b65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016200021c565b6000818152600260205260409020546001600160a01b0316156200051d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016200021c565b6200052b600083836200070f565b6001600160a01b03821660009081526003602052604081208054600192906200055690849062000d6c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000620005d5846001600160a01b03166200078160201b6200244f1760201c565b156200070457604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906200060f90339089908890889060040162000d98565b6020604051808303816000875af19250505080156200064d575060408051601f3d908101601f191682019092526200064a9181019062000dee565b60015b620006e9573d8080156200067e576040519150601f19603f3d011682016040523d82523d6000602084013e62000683565b606091505b508051600003620006e15760405162461bcd60e51b8152602060048201526032602482015260008051602062005e5883398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016200021c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506200039b565b506001949350505050565b306001600160a01b03831603620007695760405162461bcd60e51b815260206004820152601a60248201527f6e65737465642062756e646c6573206e6f7420616c6c6f77656400000000000060448201526064016200021c565b620004598383836200078760201b620024551760201c565b3b151590565b6200079f8383836200045960201b62000bef1760201c565b6001600160a01b038316620007fd57620007f781600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b62000823565b816001600160a01b0316836001600160a01b031614620008235762000823838262000863565b6001600160a01b0382166200083d57620004598162000910565b826001600160a01b0316826001600160a01b0316146200045957620004598282620009ca565b600060016200087d8462000a1b60201b620015ef1760201c565b62000889919062000d3f565b600083815260076020526040902054909150808214620008dd576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090620009249060019062000d3f565b600083815260096020526040812054600880549394509092849081106200094f576200094f62000d82565b90600052602060002001549050806008838154811062000973576200097362000d82565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480620009ae57620009ae62000e21565b6001900381819060005260206000200160009055905550505050565b6000620009e28362000a1b60201b620015ef1760201c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60006001600160a01b03821662000a885760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016200021c565b506001600160a01b031660009081526003602052604090205490565b80516001600160a01b038116811462000abc57600080fd5b919050565b60008060006060848603121562000ad757600080fd5b62000ae28462000aa4565b925062000af26020850162000aa4565b915062000b026040850162000aa4565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168062000b3657607f821691505b60208210810362000b5757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200045957600081815260208120601f850160051c8101602086101562000b865750805b601f850160051c820191505b8181101562000ba75782815560010162000b92565b505050505050565b81516001600160401b0381111562000bcb5762000bcb62000b0b565b62000be38162000bdc845462000b21565b8462000b5d565b602080601f83116001811462000c1b576000841562000c025750858301515b600019600386901b1c1916600185901b17855562000ba7565b600085815260208120601f198616915b8281101562000c4c5788860151825594840194600190910190840162000c2b565b508582101562000c6b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60005b8381101562000c9857818101518382015260200162000c7e565b50506000910152565b6000835162000cb581846020880162000c7b565b83519083019062000ccb81836020880162000c7b565b602f60f81b9101908152600101949350505050565b634e487b7160e01b600052601160045260246000fd5b60006001820162000d0b5762000d0b62000ce0565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008262000d3a5762000d3a62000d12565b500490565b818103818111156200027d576200027d62000ce0565b60008262000d675762000d6762000d12565b500690565b808201808211156200027d576200027d62000ce0565b634e487b7160e01b600052603260045260246000fd5b600060018060a01b03808716835280861660208401525083604083015260806060830152825180608084015262000dd78160a085016020870162000c7b565b601f01601f19169190910160a00195945050505050565b60006020828403121562000e0157600080fd5b81516001600160e01b03198116811462000e1a57600080fd5b9392505050565b634e487b7160e01b600052603160045260246000fd5b60805160a051614fdf62000e79600039600081816106d30152818161178b01528181611810015261189c0152600081816103b901526114e90152614fdf6000f3fe608060405234801561001057600080fd5b50600436106103af5760003560e01c8063676a196a116101f4578063a57a63b21161011a578063bff86757116100ad578063eadb80b81161007c578063eadb80b814610891578063ed81cdda146108b9578063f23a6e61146108cc578063fa3e4705146108ec57600080fd5b8063bff8675714610845578063c87b56dd14610858578063df7490861461086b578063e985e9c51461087e57600080fd5b8063b88d4fde116100e9578063b88d4fde146107ea578063ba6b5f96146107fd578063bc197c8114610810578063bef44f181461083257600080fd5b8063a57a63b214610797578063a7103afa146107aa578063aa8062ef146107bd578063ac4e35ea146107d757600080fd5b80638da5cb5b1161019257806395d89b411161016157806395d89b41146107475780639d6fa618146107685780639f181b5e1461077b578063a22cb4651461078457600080fd5b80638da5cb5b146107085780638da7d0b5146107195780638daf2d611461072c57806392fede001461073f57600080fd5b80637b371107116101ce5780637b371107146106b35780637eef0896146106bb578063804f3fb2146106ce5780638d81f51e146106f557600080fd5b8063676a196a146106855780636c0360eb1461069857806370a08231146106a057600080fd5b806334854fda116102d95780634f6ccce7116102775780635680a3ad116102465780635680a3ad1461061f5780635d799f87146106575780635f992fdd1461066a5780636352211e1461067257600080fd5b80634f6ccce7146105cd5780635163a1c3146105e0578063518ebfb9146105f357806355f804b31461060c57600080fd5b806342842e0e116102b357806342842e0e1461058c57806343a61a8e1461059f57806344df8e70146105b25780634571e3a6146105ba57600080fd5b806334854fda1461055357806335b21ceb1461056657806340d097c31461057957600080fd5b80630d5a621b116103515780631d98f3c5116103205780631d98f3c51461050c57806322ab2e6f1461051f57806323b872dd1461052d5780632f745c591461054057600080fd5b80630d5a621b146104a4578063150b7a02146104b7578063160b01a1146104e357806318160ddd1461050457600080fd5b806306fdde031161038d57806306fdde0314610430578063081812fc1461046b57806308937f621461047e578063095ea7b31461049157600080fd5b806301cf6902146103b457806301ffc9a7146103f857806305b406cf1461041b575b600080fd5b6103db7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61040b610406366004613f23565b6108ff565b60405190151581526020016103ef565b61042e610429366004613f55565b61092a565b005b60408051808201909152601681527527232a2334902832b939b7b730b610213ab7323632b960511b60208201525b6040516103ef9190613fde565b6103db610479366004613ff1565b610a02565b61042e61048c3660046140e7565b610a97565b61042e61049f366004614164565b610adf565b6103db6104b2366004614190565b610bf4565b6104ca6104c53660046141f3565b610c13565b6040516001600160e01b031990911681526020016103ef565b6104f66104f1366004614265565b610c98565b6040519081526020016103ef565b6008546104f6565b61042e61051a36600461429d565b610ccc565b6104f663cd740db560e01b81565b61042e61053b3660046142e5565b610da8565b6104f661054e366004614164565b610dd9565b6104f6610561366004614497565b610e6f565b6104f66105743660046144cb565b610e87565b6104f66105873660046144f0565b610eb2565b61042e61059a3660046142e5565b610f71565b6104f66105ad366004613ff1565b610f8c565b61042e610f99565b61042e6105c836600461450d565b61102f565b6104f66105db366004613ff1565b611168565b61042e6105ee36600461456e565b6111fb565b6012546103db906201000090046001600160a01b031681565b61042e61061a3660046145b0565b611384565b61040b61062d366004614164565b6001600160a01b03919091166000908152600e602090815260408083209383529290522054151590565b61042e610665366004613f55565b6113ba565b61042e6113e4565b6103db610680366004613ff1565b611450565b61040b6106933660046144f0565b6114c7565b61045e611561565b6104f66106ae3660046144f0565b6115ef565b61042e611676565b61042e6106c93660046145e4565b6116e5565b6103db7f000000000000000000000000000000000000000000000000000000000000000081565b61042e6107033660046146a3565b61191b565b600f546001600160a01b03166103db565b6104f6610727366004613ff1565b611a1c565b61042e61073a3660046144cb565b611a33565b61042e611a7b565b60408051808201909152600581526450424e464960d81b602082015261045e565b61042e6107763660046144f0565b611aa5565b6104f6600b5481565b61042e610792366004614718565b611b56565b61042e6107a5366004614746565b611c1a565b61042e6107b8366004614746565b611c28565b6107c5600181565b60405160ff90911681526020016103ef565b61042e6107e536600461456e565b611c32565b61042e6107f836600461478c565b611d72565b61042e61080b3660046147f7565b611da4565b6104ca61081e366004614873565b63bc197c8160e01b98975050505050505050565b61042e61084036600461429d565b611e9c565b61042e610853366004614931565b611f0e565b61045e610866366004613ff1565b611f22565b61042e6108793660046144cb565b611ffc565b61040b61088c366004613f55565b612162565b6108a461089f366004614164565b612190565b604080519283526020830191909152016103ef565b6104f66108c7366004614164565b612222565b6104ca6108da366004614993565b63f23a6e6160e01b9695505050505050565b61042e6108fa36600461456e565b612302565b60006001600160e01b03198216630271189760e51b148061092457506109248261250d565b92915050565b61093261254d565b6040516370a0823160e01b815230600482015282906000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561097b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099f9190614a0e565b9050600081116109e85760405162461bcd60e51b815260206004820152600f60248201526e1b9bc81d1bdad95b9cc81bdddb9959608a1b60448201526064015b60405180910390fd5b6109fc6001600160a01b03831684836125a2565b50505050565b6000818152600260205260408120546001600160a01b0316610a7b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109df565b506000908152600460205260409020546001600160a01b031690565b60405162461bcd60e51b815260206004820152601d60248201527f424f54544f4d5f55505f4348494c445f4e4f545f535550504f5254454400000060448201526064016109df565b6000610aea82611450565b9050806001600160a01b0316836001600160a01b031603610b575760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016109df565b336001600160a01b0382161480610b735750610b738133612162565b610be55760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016109df565b610bef83836125f4565b505050565b6000828152600c60205260408120610c0c9083612662565b9392505050565b60006002600a5403610c375760405162461bcd60e51b81526004016109df90614a27565b6002600a81905550610c8185338686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061266e92505050565b50630a85bd0160e11b6001600a5595945050505050565b6000838152600d602090815260408083206001600160a01b03861684529091528120610cc49083612662565b949350505050565b6002600a5403610cee5760405162461bcd60e51b81526004016109df90614a27565b6002600a55610cff848484846126a0565b604051632142170760e11b81526001600160a01b038316906342842e0e90610d2f90309087908690600401614a5e565b600060405180830381600087803b158015610d4957600080fd5b505af1158015610d5d573d6000803e3d6000fd5b50505050816001600160a01b0316836001600160a01b031685600080516020614fb383398151915284604051610d9591815260200190565b60405180910390a450506001600a555050565b610db233826126bf565b610dce5760405162461bcd60e51b81526004016109df90614a82565b610bef83838361278e565b6000610de4836115ef565b8210610e465760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016109df565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600080610e7b33610eb2565b90506109248184612939565b6000828152600d602090815260408083206001600160a01b03851684529091528120610c0c90612c1e565b6012546000906201000090046001600160a01b03161580610ee357506012546201000090046001600160a01b031633145b610f285760405162461bcd60e51b815260206004820152601660248201527537b7363c903630b9ba10313ab73236329037bbb732b960511b60448201526064016109df565b600b5415610f685760405162461bcd60e51b815260206004820152600d60248201526c6f6e6c7920312062756e646c6560981b60448201526064016109df565b6109248261242c565b610bef83838360405180602001604052806000815250611d72565b6000610924600083612222565b610fa161254d565b6012805462010000600160b01b031916336201000002179055610fc46001611a1c565b1561100a5760405162461bcd60e51b815260206004820152601660248201527562756e646c652068617320746f20626520656d70747960501b60448201526064016109df565b6001600b600082825461101d9190614ae9565b9091555061102d90506001612c28565b565b601254610100900460ff1680611048575060125460ff16155b6110ab5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109df565b601254610100900460ff161580156110cd576012805461ffff19166101011790555b6002600a54036110ef5760405162461bcd60e51b81526004016109df90614a27565b6002600a556110fd84612ccf565b61110682612d21565b61110f83610eb2565b506040516001600160a01b03841681527f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e69060200160405180910390a16001600a5580156109fc576012805461ff001916905550505050565b600061117360085490565b82106111d65760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016109df565b600882815481106111e9576111e9614afc565b90600052602060002001549050919050565b61120361254d565b6001600160a01b0383166000908152600e6020908152604080832085845290915290205483901561126b5760405162461bcd60e51b8152602060048201526012602482015271746f6b656e20697320696e2062756e646c6560701b60448201526064016109df565b6040516331a9108f60e11b81526004810184905230906001600160a01b03831690636352211e90602401602060405180830381865afa1580156112b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d69190614b12565b6001600160a01b03161461131c5760405162461bcd60e51b815260206004820152600d60248201526c1b999d081b9bdd081bdddb9959609a1b60448201526064016109df565b604051632142170760e11b81526001600160a01b038216906342842e0e9061134c90309086908890600401614a5e565b600060405180830381600087803b15801561136657600080fd5b505af115801561137a573d6000803e3d6000fd5b5050505050505050565b600f546001600160a01b031633146113ae5760405162461bcd60e51b81526004016109df90614b2f565b6113b781612d21565b50565b600f546001600160a01b031633146109325760405162461bcd60e51b81526004016109df90614b2f565b6010546001600160a01b0316331461143e5760405162461bcd60e51b815260206004820152601c60248201527f4f776e61626c653a206e6f74206f776e65722063616e6469646174650000000060448201526064016109df565b601080546001600160a01b0319169055565b6000818152600260205260408120546001600160a01b0316806109245760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016109df565b604051636651f11d60e01b81526001600160a01b0382811660048301526000917f000000000000000000000000000000000000000000000000000000000000000091839190831690636651f11d90602401602060405180830381865afa158015611535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115599190614a0e565b119392505050565b6011805461156e90614b64565b80601f016020809104026020016040519081016040528092919081815260200182805461159a90614b64565b80156115e75780601f106115bc576101008083540402835291602001916115e7565b820191906000526020600020905b8154815290600101906020018083116115ca57829003601f168201915b505050505081565b60006001600160a01b03821661165a5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016109df565b506001600160a01b031660009081526003602052604090205490565b6010546001600160a01b031633146116d05760405162461bcd60e51b815260206004820152601c60248201527f4f776e61626c653a206e6f74206f776e65722063616e6469646174650000000060448201526064016109df565b60105461143e906001600160a01b0316612ccf565b6001600160a01b038a166000908152600e602090815260408083208c84529091528120549061171382610f8c565b90506001600160a01b03811633146117795760405162461bcd60e51b815260206004820152602360248201527f70756c6c41697264726f70206d73672e73656e646572206e6f7420656c696769604482015262626c6560e81b60648201526084016109df565b8b6001600160a01b03166342842e0e307f00000000000000000000000000000000000000000000000000000000000000008e6040518463ffffffff1660e01b81526004016117c993929190614a5e565b600060405180830381600087803b1580156117e357600080fd5b505af11580156117f7573d6000803e3d6000fd5b5050604051633f77844b60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250637eef08969150611859908f908f908f908f908f908f908f908f908f908f90600401614b9e565b600060405180830381600087803b15801561187357600080fd5b505af1158015611887573d6000803e3d6000fd5b505050508b6001600160a01b03166342842e0e7f0000000000000000000000000000000000000000000000000000000000000000308e6040518463ffffffff1660e01b81526004016118db93929190614a5e565b600060405180830381600087803b1580156118f557600080fd5b505af1158015611909573d6000803e3d6000fd5b50505050505050505050505050505050565b6002600a540361193d5760405162461bcd60e51b81526004016109df90614a27565b6002600a5561194e858585856126a0565b306001600160a01b0385160361196f5761196a3384848461266e565b611a10565b604051635c46a7ef60e11b81526001600160a01b0384169063b88d4fde906119a1903090889087908790600401614c20565b600060405180830381600087803b1580156119bb57600080fd5b505af11580156119cf573d6000803e3d6000fd5b50505050826001600160a01b0316846001600160a01b031686600080516020614fb383398151915285604051611a0791815260200190565b60405180910390a45b50506001600a55505050565b6000818152600c6020526040812061092490612c1e565b60405162461bcd60e51b815260206004820152601860248201527f616c726561647920706572736f6e616c2062756e646c6572000000000000000060448201526064016109df565b600f546001600160a01b0316331461143e5760405162461bcd60e51b81526004016109df90614b2f565b600f546001600160a01b03163314611acf5760405162461bcd60e51b81526004016109df90614b2f565b6001600160a01b038116611b345760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109df565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b03831603611bae5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109df565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611c248282612939565b5050565b611c248282612d77565b611c3a61254d565b604051627eeac760e11b81523060048201526024810183905283906000906001600160a01b0383169062fdd58e90604401602060405180830381865afa158015611c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cac9190614a0e565b905060008111611cee5760405162461bcd60e51b815260206004820152600d60248201526c1b9bc81b999d1cc81bdddb9959609a1b60448201526064016109df565b604051637921219560e11b81523060048201526001600160a01b038481166024830152604482018690526064820183905260a06084830152600060a483015283169063f242432a9060c401600060405180830381600087803b158015611d5357600080fd5b505af1158015611d67573d6000803e3d6000fd5b505050505050505050565b611d7c33836126bf565b611d985760405162461bcd60e51b81526004016109df90614a82565b6109fc84848484612f8b565b6002600a5403611dc65760405162461bcd60e51b81526004016109df90614a27565b6002600a556001600160a01b0384163314611e235760405162461bcd60e51b815260206004820152601a60248201527f5f66726f6d2073686f756c64206265206d73672e73656e64657200000000000060448201526064016109df565b611e2f84848484612fbe565b6040516323b872dd60e01b81526001600160a01b038316906323b872dd90611e5f90879030908690600401614a5e565b600060405180830381600087803b158015611e7957600080fd5b505af1158015611e8d573d6000803e3d6000fd5b50506001600a55505050505050565b6002600a5403611ebe5760405162461bcd60e51b81526004016109df90614a27565b6002600a55611ecf848484846126a0565b611eda838383613016565b816001600160a01b0316836001600160a01b031685600080516020614fb383398151915284604051610d9591815260200190565b611f188383612939565b610bef8382612d77565b6000818152600260205260409020546060906001600160a01b0316611fa15760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016109df565b6000611fab6130d7565b90506000815111611fcb5760405180602001604052806000815250610c0c565b80611fd58461232c565b604051602001611fe6929190614c5d565b6040516020818303038152906040529392505050565b61200581613169565b61200e826131bf565b6000828152600c6020526040812061202590612c1e565b1115611c24576000828152600c602052604081206120439082612662565b90505b6000838152600d602090815260408083206001600160a01b0385168452909152812061207190612c1e565b111561215c576000838152600d602090815260408083206001600160a01b038516845290915281206120a39082612662565b90506120b084838361325d565b604051632142170760e11b81526001600160a01b038316906342842e0e906120e090309087908690600401614a5e565b600060405180830381600087803b1580156120fa57600080fd5b505af192505050801561210b575060015b61211a5761211a838383613016565b816001600160a01b0316836001600160a01b031685600080516020614fb38339815191528460405161214e91815260200190565b60405180910390a450612046565b5061200e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6001600160a01b0382166000908152600e602090815260408083208484529091528120548082036122035760405162461bcd60e51b815260206004820152601a60248201527f6368696c6420746f6b656e20646f6573206e6f7420657869737400000000000060448201526064016109df565b600061220e82611450565b63cd740db560e01b17959194509092505050565b6000806001600160a01b038416156122475761223e84846132e9565b93509050612253565b61225083611450565b90505b6001600160a01b0381163b156122f2576040516376c0e6ed60e11b8152306004820152602481018490526001600160a01b0382169063ed81cdda90604401602060405180830381865afa9250505080156122ca575060408051601f3d908101601f191682019092526122c791810190614a0e565b60015b156122f25763328bf24b60e01b6001600160e01b03198216016122f05791506109249050565b505b63cd740db560e01b179392505050565b600f546001600160a01b031633146112035760405162461bcd60e51b81526004016109df90614b2f565b6060816000036123535750506040805180820190915260018152600360fc1b602082015290565b8160005b811561237d578061236781614c8c565b91506123769050600a83614cbb565b9150612357565b6000816001600160401b038111156123975761239761400a565b6040519080825280601f01601f1916602001820160405280156123c1576020820181803683370190505b5090505b8415610cc4576123d6600183614ae9565b91506123e3600a86614ccf565b6123ee906030614ce3565b60f81b81838151811061240357612403614afc565b60200101906001600160f81b031916908160001a905350612425600a86614cbb565b94506123c5565b600080600b6000815461243e90614c8c565b91829055509050610924838261336f565b3b151590565b6001600160a01b0383166124b0576124ab81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6124d3565b816001600160a01b0316836001600160a01b0316146124d3576124d38382613389565b6001600160a01b0382166124ea57610bef81613426565b826001600160a01b0316826001600160a01b031614610bef57610bef82826134d5565b60006001600160e01b03198216630a85bd0160e11b148061253e57506001600160e01b03198216639fa4074560e01b145b80610924575061092482613519565b336125586001611450565b6001600160a01b03161461102d5760405162461bcd60e51b815260206004820152601160248201527027b7363c90313ab73236329037bbb732b960791b60448201526064016109df565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610bef908490613574565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061262982611450565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610c0c8383613646565b8051156109fc576000612682826020015190565b905060001981016126995761269985828686612fbe565b5050505050565b6126a983613169565b6126b4848383613670565b6109fc84838361325d565b6000818152600260205260408120546001600160a01b03166127385760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109df565b600061274383611450565b9050806001600160a01b0316846001600160a01b0316148061277e5750836001600160a01b031661277384610a02565b6001600160a01b0316145b80610cc45750610cc48185612162565b826001600160a01b03166127a182611450565b6001600160a01b0316146128095760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016109df565b6001600160a01b03821661286b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016109df565b612876838383613778565b6128816000826125f4565b6001600160a01b03831660009081526003602052604081208054600192906128aa908490614ae9565b90915550506001600160a01b03821660009081526003602052604081208054600192906128d8908490614ce3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600081511161297c5760405162461bcd60e51b815260206004820152600f60248201526e62756e646c6520697320656d70747960881b60448201526064016109df565b805160005b818114612be0576129ae83828151811061299d5761299d614afc565b6020026020010151600001516114c7565b6129f15760405162461bcd60e51b8152602060048201526014602482015273195c98cdcc8c481b9bdd081c195c9b5a5d1d195960621b60448201526064016109df565b828181518110612a0357612a03614afc565b60200260200101516040015115612b31576000838281518110612a2857612a28614afc565b60200260200101516020015151905060005b818114612b2a57848381518110612a5357612a53614afc565b6020026020010151600001516001600160a01b031663b88d4fde3330888781518110612a8157612a81614afc565b6020026020010151602001518581518110612a9e57612a9e614afc565b60200260200101518a604051602001612ab991815260200190565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401612ae79493929190614c20565b600060405180830381600087803b158015612b0157600080fd5b505af1158015612b15573d6000803e3d6000fd5b5050505080612b2390614c8c565b9050612a3a565b5050612bd0565b6000838281518110612b4557612b45614afc565b60200260200101516020015151905060005b818114612bcd57612bbd3387878681518110612b7557612b75614afc565b602002602001015160000151888781518110612b9357612b93614afc565b6020026020010151602001518581518110612bb057612bb0614afc565b6020026020010151611da4565b612bc681614c8c565b9050612b57565b50505b612bd981614c8c565b9050612981565b50827faeecfeb34aeb11fe7449e04fbc8fc80d3ddd8eeb67b35e6c1b8e1b7e3d8f025783604051612c119190614cf6565b60405180910390a2505050565b6000610924825490565b6000612c3382611450565b9050612c4181600084613778565b612c4c6000836125f4565b6001600160a01b0381166000908152600360205260408120805460019290612c75908490614ae9565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600f80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000815111612d3f5760405180602001604052806000815250612d6a565b80612d494661232c565b604051602001612d5a929190614dac565b6040516020818303038152906040525b601190611c249082614e35565b612d80826131bf565b6000815111612dc35760405162461bcd60e51b815260206004820152600f60248201526e62756e646c6520697320656d70747960881b60448201526064016109df565b805160005b818114612f5a576000838281518110612de357612de3614afc565b60200260200101516000015190506000848381518110612e0557612e05614afc565b60200260200101516020015151905060005b818114612f46576000868581518110612e3257612e32614afc565b6020026020010151602001518281518110612e4f57612e4f614afc565b60200260200101519050612e6488858361325d565b868581518110612e7657612e76614afc565b60200260200101516040015115612eee57604051632142170760e11b81526001600160a01b038516906342842e0e90612eb790309033908690600401614a5e565b600060405180830381600087803b158015612ed157600080fd5b505af1158015612ee5573d6000803e3d6000fd5b50505050612ef9565b612ef9338583613016565b836001600160a01b0316336001600160a01b031689600080516020614fb383398151915284604051612f2d91815260200190565b60405180910390a450612f3f81614c8c565b9050612e17565b50505080612f5390614c8c565b9050612dc8565b50827ff60c055f56c20fcc9ca127b02b3958fad33fb25c41c195093e037d94fcc2700883604051612c119190614cf6565b612f9684848461278e565b612fa2848484846137db565b6109fc5760405162461bcd60e51b81526004016109df90614ef4565b612fc7826114c7565b61300a5760405162461bcd60e51b8152602060048201526014602482015273195c98cdcc8c481b9bdd081c195c9b5a5d1d195960621b60448201526064016109df565b6109fc848484846138dc565b60405163095ea7b360e01b8152306004820152602481018290526001600160a01b0383169063095ea7b390604401600060405180830381600087803b15801561305e57600080fd5b505af192505050801561306f575060015b506040516323b872dd60e01b81526001600160a01b038316906323b872dd906130a090309087908690600401614a5e565b600060405180830381600087803b1580156130ba57600080fd5b505af11580156130ce573d6000803e3d6000fd5b50505050505050565b6060601180546130e690614b64565b80601f016020809104026020016040519081016040528092919081815260200182805461311290614b64565b801561315f5780601f106131345761010080835404028352916020019161315f565b820191906000526020600020905b81548152906001019060200180831161314257829003601f168201915b5050505050905090565b6001600160a01b0381166113b75760405162461bcd60e51b815260206004820152601e60248201527f6368696c64207472616e7366657220746f207a65726f2061646472657373000060448201526064016109df565b60006131ca82610f8c565b90506001600160a01b0381163314806131f35750336131e883610a02565b6001600160a01b0316145b8061320357506132038133612162565b611c245760405162461bcd60e51b815260206004820152602560248201527f7472616e736665724368696c64206d73672e73656e646572206e6f7420656c696044820152646769626c6560d81b60648201526084016109df565b6000838152600d602090815260408083206001600160a01b038616845290915290206132899082613a23565b506001600160a01b0382166000818152600e602090815260408083208584528252808320839055868352600d8252808320938352929052206132ca90612c1e565b600003610bef576000838152600c602052604090206109fc9083613a2f565b6001600160a01b0382166000908152600e6020908152604080832084845290915281205480820361335c5760405162461bcd60e51b815260206004820152601a60248201527f6368696c6420746f6b656e20646f6573206e6f7420657869737400000000000060448201526064016109df565b61336581611450565b91505b9250929050565b611c24828260405180602001604052806000815250613a44565b60006001613396846115ef565b6133a09190614ae9565b6000838152600760205260409020549091508082146133f3576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061343890600190614ae9565b6000838152600960205260408120546008805493945090928490811061346057613460614afc565b90600052602060002001549050806008838154811061348157613481614afc565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806134b9576134b9614f46565b6001900381819060005260206000200160009055905550505050565b60006134e0836115ef565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60006001600160e01b0319821663cde244d960e01b148061354a57506001600160e01b031982166328d12bf960e21b145b806135655750630f7ef9b560e11b6001600160e01b03198316145b80610924575061092482613a77565b60006135c9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613a9c9092919063ffffffff16565b805190915015610bef57808060200190518101906135e79190614f5c565b610bef5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016109df565b600082600001828154811061365d5761365d614afc565b9060005260206000200154905092915050565b6001600160a01b0382166000908152600e60209081526040808320848452909152812054908190036137025760405162461bcd60e51b815260206004820152603560248201527f5f7472616e736665724368696c64205f6368696c64436f6e7472616374205f636044820152741a1a5b19151bdad95b9259081b9bdd08199bdd5b99605a1b60648201526084016109df565b83811461376f5760405162461bcd60e51b815260206004820152603560248201527f436f6d706f7361626c65546f70446f776e3a205f7472616e736665724368696c60448201527419081ddc9bdb99c81d1bdad95b925908199bdd5b99605a1b60648201526084016109df565b6109fc816131bf565b306001600160a01b038316036137d05760405162461bcd60e51b815260206004820152601a60248201527f6e65737465642062756e646c6573206e6f7420616c6c6f77656400000000000060448201526064016109df565b610bef838383612455565b60006001600160a01b0384163b156138d157604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061381f903390899088908890600401614c20565b6020604051808303816000875af192505050801561385a575060408051601f3d908101601f1916820190925261385791810190614f79565b60015b6138b7573d808015613888576040519150601f19603f3d011682016040523d82523d6000602084013e61388d565b606091505b5080516000036138af5760405162461bcd60e51b81526004016109df90614ef4565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610cc4565b506001949350505050565b6000838152600260205260409020546001600160a01b03166139405760405162461bcd60e51b815260206004820152601d60248201527f62756e646c6520746f6b656e496420646f6573206e6f7420657869737400000060448201526064016109df565b6000838152600d602090815260408083206001600160a01b0386168452909152812061396b90612c1e565b90508060000361398f576000848152600c6020526040902061398d9084613aab565b505b6000848152600d602090815260408083206001600160a01b038716845290915290206139bb9083613ac0565b506001600160a01b038381166000818152600e60209081526040808320878452825291829020889055905185815291928792908916917f0371ddf2288ad1ba92626a7e31c86a9d006e592cfe57d7d946ef08b13457c08b910160405180910390a45050505050565b6000610c0c8383613acc565b6000610c0c836001600160a01b038416613acc565b613a4e8383613bbf565b613a5b60008484846137db565b610bef5760405162461bcd60e51b81526004016109df90614ef4565b60006001600160e01b0319821663780e9d6360e01b1480610924575061092482613d0d565b6060610cc48484600085613d5d565b6000610c0c836001600160a01b038416613e85565b6000610c0c8383613e85565b60008181526001830160205260408120548015613bb5576000613af0600183614ae9565b8554909150600090613b0490600190614ae9565b9050818114613b69576000866000018281548110613b2457613b24614afc565b9060005260206000200154905080876000018481548110613b4757613b47614afc565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613b7a57613b7a614f46565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610924565b6000915050610924565b6001600160a01b038216613c155760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109df565b6000818152600260205260409020546001600160a01b031615613c7a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109df565b613c8660008383613778565b6001600160a01b0382166000908152600360205260408120805460019290613caf908490614ce3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160e01b031982166380ac58cd60e01b1480613d3e57506001600160e01b03198216635b5e139f60e01b145b8061092457506301ffc9a760e01b6001600160e01b0319831614610924565b606082471015613dbe5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016109df565b843b613e0c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109df565b600080866001600160a01b03168587604051613e289190614f96565b60006040518083038185875af1925050503d8060008114613e65576040519150601f19603f3d011682016040523d82523d6000602084013e613e6a565b606091505b5091509150613e7a828286613ed4565b979650505050505050565b6000818152600183016020526040812054613ecc57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610924565b506000610924565b60608315613ee3575081610c0c565b825115613ef35782518084602001fd5b8160405162461bcd60e51b81526004016109df9190613fde565b6001600160e01b0319811681146113b757600080fd5b600060208284031215613f3557600080fd5b8135610c0c81613f0d565b6001600160a01b03811681146113b757600080fd5b60008060408385031215613f6857600080fd5b8235613f7381613f40565b91506020830135613f8381613f40565b809150509250929050565b60005b83811015613fa9578181015183820152602001613f91565b50506000910152565b60008151808452613fca816020860160208601613f8e565b601f01601f19169290920160200192915050565b602081526000610c0c6020830184613fb2565b60006020828403121561400357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156140425761404261400a565b60405290565b604051601f8201601f191681016001600160401b03811182821017156140705761407061400a565b604052919050565b600082601f83011261408957600080fd5b81356001600160401b038111156140a2576140a261400a565b6140b5601f8201601f1916602001614048565b8181528460208386010111156140ca57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561410057600080fd5b86359550602087013561411281613f40565b945060408701359350606087013561412981613f40565b92506080870135915060a08701356001600160401b0381111561414b57600080fd5b61415789828a01614078565b9150509295509295509295565b6000806040838503121561417757600080fd5b823561418281613f40565b946020939093013593505050565b600080604083850312156141a357600080fd5b50508035926020909101359150565b60008083601f8401126141c457600080fd5b5081356001600160401b038111156141db57600080fd5b60208301915083602082850101111561336857600080fd5b60008060008060006080868803121561420b57600080fd5b853561421681613f40565b9450602086013561422681613f40565b93506040860135925060608601356001600160401b0381111561424857600080fd5b614254888289016141b2565b969995985093965092949392505050565b60008060006060848603121561427a57600080fd5b83359250602084013561428c81613f40565b929592945050506040919091013590565b600080600080608085870312156142b357600080fd5b8435935060208501356142c581613f40565b925060408501356142d581613f40565b9396929550929360600135925050565b6000806000606084860312156142fa57600080fd5b833561430581613f40565b9250602084013561428c81613f40565b60006001600160401b0382111561432e5761432e61400a565b5060051b60200190565b80151581146113b757600080fd5b803561435181614338565b919050565b600082601f83011261436757600080fd5b8135602061437c61437783614315565b614048565b82815260059290921b8401810191818101908684111561439b57600080fd5b8286015b8481101561448c5780356001600160401b03808211156143bf5760008081fd5b908801906060828b03601f19018113156143d95760008081fd5b6143e1614020565b878401356143ee81613f40565b8152604084810135848111156144045760008081fd5b85019350603f84018d136144185760008081fd5b8884013561442861437782614315565b81815260059190911b85018201908a8101908f8311156144485760008081fd5b958301955b828710156144665786358252958b0195908b019061444d565b848c0152506144789050858401614346565b90820152865250505091830191830161439f565b509695505050505050565b6000602082840312156144a957600080fd5b81356001600160401b038111156144bf57600080fd5b610cc484828501614356565b600080604083850312156144de57600080fd5b823591506020830135613f8381613f40565b60006020828403121561450257600080fd5b8135610c0c81613f40565b60008060006060848603121561452257600080fd5b833561452d81613f40565b9250602084013561453d81613f40565b915060408401356001600160401b0381111561455857600080fd5b61456486828701614078565b9150509250925092565b60008060006060848603121561458357600080fd5b833561458e81613f40565b92506020840135915060408401356145a581613f40565b809150509250925092565b6000602082840312156145c257600080fd5b81356001600160401b038111156145d857600080fd5b610cc484828501614078565b6000806000806000806000806000806101208b8d03121561460457600080fd5b8a3561460f81613f40565b995060208b0135985060408b013561462681613f40565b975060608b01356001600160401b0381111561464157600080fd5b61464d8d828e016141b2565b90985096505060808b013561466181613f40565b945060a08b0135935060c08b013561467881614338565b925060e08b013591506101008b013561469081613f40565b809150509295989b9194979a5092959850565b600080600080600060a086880312156146bb57600080fd5b8535945060208601356146cd81613f40565b935060408601356146dd81613f40565b92506060860135915060808601356001600160401b038111156146ff57600080fd5b61470b88828901614078565b9150509295509295909350565b6000806040838503121561472b57600080fd5b823561473681613f40565b91506020830135613f8381614338565b6000806040838503121561475957600080fd5b8235915060208301356001600160401b0381111561477657600080fd5b61478285828601614356565b9150509250929050565b600080600080608085870312156147a257600080fd5b84356147ad81613f40565b935060208501356147bd81613f40565b92506040850135915060608501356001600160401b038111156147df57600080fd5b6147eb87828801614078565b91505092959194509250565b6000806000806080858703121561480d57600080fd5b843561481881613f40565b93506020850135925060408501356142d581613f40565b60008083601f84011261484157600080fd5b5081356001600160401b0381111561485857600080fd5b6020830191508360208260051b850101111561336857600080fd5b60008060008060008060008060a0898b03121561488f57600080fd5b883561489a81613f40565b975060208901356148aa81613f40565b965060408901356001600160401b03808211156148c657600080fd5b6148d28c838d0161482f565b909850965060608b01359150808211156148eb57600080fd5b6148f78c838d0161482f565b909650945060808b013591508082111561491057600080fd5b5061491d8b828c016141b2565b999c989b5096995094979396929594505050565b60008060006060848603121561494657600080fd5b8335925060208401356001600160401b038082111561496457600080fd5b61497087838801614356565b9350604086013591508082111561498657600080fd5b5061456486828701614356565b60008060008060008060a087890312156149ac57600080fd5b86356149b781613f40565b955060208701356149c781613f40565b9450604087013593506060870135925060808701356001600160401b038111156149f057600080fd5b6149fc89828a016141b2565b979a9699509497509295939492505050565b600060208284031215614a2057600080fd5b5051919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561092457610924614ad3565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614b2457600080fd5b8151610c0c81613f40565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c90821680614b7857607f821691505b602082108103614b9857634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b038b81168252602082018b9052898116604083015261012060608301819052820188905260009061014090898b838601376000848b0183015290971660808301525060a081019490945291151560c084015260e08301526001600160a01b0316610100820152601f909201601f191690910101949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614c5390830184613fb2565b9695505050505050565b60008351614c6f818460208801613f8e565b835190830190614c83818360208801613f8e565b01949350505050565b600060018201614c9e57614c9e614ad3565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082614cca57614cca614ca5565b500490565b600082614cde57614cde614ca5565b500690565b8082018082111561092457610924614ad3565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015614d9d57898403603f19018652825180516001600160a01b031685528881015160608a8701819052815190870181905260808701918b019085905b80821015614d7d5782518452928c0192918c019160019190910190614d5d565b505050908801511515948801949094529487019491870191600101614d1e565b50919998505050505050505050565b60008351614dbe818460208801613f8e565b835190830190614dd2818360208801613f8e565b602f60f81b9101908152600101949350505050565b601f821115610bef57600081815260208120601f850160051c81016020861015614e0e5750805b601f850160051c820191505b81811015614e2d57828155600101614e1a565b505050505050565b81516001600160401b03811115614e4e57614e4e61400a565b614e6281614e5c8454614b64565b84614de7565b602080601f831160018114614e975760008415614e7f5750858301515b600019600386901b1c1916600185901b178555614e2d565b600085815260208120601f198616915b82811015614ec657888601518255948401946001909101908401614ea7565b5085821015614ee45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215614f6e57600080fd5b8151610c0c81614338565b600060208284031215614f8b57600080fd5b8151610c0c81613f0d565b60008251614fa8818460208701613f8e565b919091019291505056fe0ef52e516fb5aec15a5d3587e5480481b702b26db93c8430eca78b61990fd3f6a164736f6c6343000811000a4552433732313a207472616e7366657220746f206e6f6e204552433732315265",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103af5760003560e01c8063676a196a116101f4578063a57a63b21161011a578063bff86757116100ad578063eadb80b81161007c578063eadb80b814610891578063ed81cdda146108b9578063f23a6e61146108cc578063fa3e4705146108ec57600080fd5b8063bff8675714610845578063c87b56dd14610858578063df7490861461086b578063e985e9c51461087e57600080fd5b8063b88d4fde116100e9578063b88d4fde146107ea578063ba6b5f96146107fd578063bc197c8114610810578063bef44f181461083257600080fd5b8063a57a63b214610797578063a7103afa146107aa578063aa8062ef146107bd578063ac4e35ea146107d757600080fd5b80638da5cb5b1161019257806395d89b411161016157806395d89b41146107475780639d6fa618146107685780639f181b5e1461077b578063a22cb4651461078457600080fd5b80638da5cb5b146107085780638da7d0b5146107195780638daf2d611461072c57806392fede001461073f57600080fd5b80637b371107116101ce5780637b371107146106b35780637eef0896146106bb578063804f3fb2146106ce5780638d81f51e146106f557600080fd5b8063676a196a146106855780636c0360eb1461069857806370a08231146106a057600080fd5b806334854fda116102d95780634f6ccce7116102775780635680a3ad116102465780635680a3ad1461061f5780635d799f87146106575780635f992fdd1461066a5780636352211e1461067257600080fd5b80634f6ccce7146105cd5780635163a1c3146105e0578063518ebfb9146105f357806355f804b31461060c57600080fd5b806342842e0e116102b357806342842e0e1461058c57806343a61a8e1461059f57806344df8e70146105b25780634571e3a6146105ba57600080fd5b806334854fda1461055357806335b21ceb1461056657806340d097c31461057957600080fd5b80630d5a621b116103515780631d98f3c5116103205780631d98f3c51461050c57806322ab2e6f1461051f57806323b872dd1461052d5780632f745c591461054057600080fd5b80630d5a621b146104a4578063150b7a02146104b7578063160b01a1146104e357806318160ddd1461050457600080fd5b806306fdde031161038d57806306fdde0314610430578063081812fc1461046b57806308937f621461047e578063095ea7b31461049157600080fd5b806301cf6902146103b457806301ffc9a7146103f857806305b406cf1461041b575b600080fd5b6103db7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61040b610406366004613f23565b6108ff565b60405190151581526020016103ef565b61042e610429366004613f55565b61092a565b005b60408051808201909152601681527527232a2334902832b939b7b730b610213ab7323632b960511b60208201525b6040516103ef9190613fde565b6103db610479366004613ff1565b610a02565b61042e61048c3660046140e7565b610a97565b61042e61049f366004614164565b610adf565b6103db6104b2366004614190565b610bf4565b6104ca6104c53660046141f3565b610c13565b6040516001600160e01b031990911681526020016103ef565b6104f66104f1366004614265565b610c98565b6040519081526020016103ef565b6008546104f6565b61042e61051a36600461429d565b610ccc565b6104f663cd740db560e01b81565b61042e61053b3660046142e5565b610da8565b6104f661054e366004614164565b610dd9565b6104f6610561366004614497565b610e6f565b6104f66105743660046144cb565b610e87565b6104f66105873660046144f0565b610eb2565b61042e61059a3660046142e5565b610f71565b6104f66105ad366004613ff1565b610f8c565b61042e610f99565b61042e6105c836600461450d565b61102f565b6104f66105db366004613ff1565b611168565b61042e6105ee36600461456e565b6111fb565b6012546103db906201000090046001600160a01b031681565b61042e61061a3660046145b0565b611384565b61040b61062d366004614164565b6001600160a01b03919091166000908152600e602090815260408083209383529290522054151590565b61042e610665366004613f55565b6113ba565b61042e6113e4565b6103db610680366004613ff1565b611450565b61040b6106933660046144f0565b6114c7565b61045e611561565b6104f66106ae3660046144f0565b6115ef565b61042e611676565b61042e6106c93660046145e4565b6116e5565b6103db7f000000000000000000000000000000000000000000000000000000000000000081565b61042e6107033660046146a3565b61191b565b600f546001600160a01b03166103db565b6104f6610727366004613ff1565b611a1c565b61042e61073a3660046144cb565b611a33565b61042e611a7b565b60408051808201909152600581526450424e464960d81b602082015261045e565b61042e6107763660046144f0565b611aa5565b6104f6600b5481565b61042e610792366004614718565b611b56565b61042e6107a5366004614746565b611c1a565b61042e6107b8366004614746565b611c28565b6107c5600181565b60405160ff90911681526020016103ef565b61042e6107e536600461456e565b611c32565b61042e6107f836600461478c565b611d72565b61042e61080b3660046147f7565b611da4565b6104ca61081e366004614873565b63bc197c8160e01b98975050505050505050565b61042e61084036600461429d565b611e9c565b61042e610853366004614931565b611f0e565b61045e610866366004613ff1565b611f22565b61042e6108793660046144cb565b611ffc565b61040b61088c366004613f55565b612162565b6108a461089f366004614164565b612190565b604080519283526020830191909152016103ef565b6104f66108c7366004614164565b612222565b6104ca6108da366004614993565b63f23a6e6160e01b9695505050505050565b61042e6108fa36600461456e565b612302565b60006001600160e01b03198216630271189760e51b148061092457506109248261250d565b92915050565b61093261254d565b6040516370a0823160e01b815230600482015282906000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561097b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099f9190614a0e565b9050600081116109e85760405162461bcd60e51b815260206004820152600f60248201526e1b9bc81d1bdad95b9cc81bdddb9959608a1b60448201526064015b60405180910390fd5b6109fc6001600160a01b03831684836125a2565b50505050565b6000818152600260205260408120546001600160a01b0316610a7b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109df565b506000908152600460205260409020546001600160a01b031690565b60405162461bcd60e51b815260206004820152601d60248201527f424f54544f4d5f55505f4348494c445f4e4f545f535550504f5254454400000060448201526064016109df565b6000610aea82611450565b9050806001600160a01b0316836001600160a01b031603610b575760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016109df565b336001600160a01b0382161480610b735750610b738133612162565b610be55760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016109df565b610bef83836125f4565b505050565b6000828152600c60205260408120610c0c9083612662565b9392505050565b60006002600a5403610c375760405162461bcd60e51b81526004016109df90614a27565b6002600a81905550610c8185338686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061266e92505050565b50630a85bd0160e11b6001600a5595945050505050565b6000838152600d602090815260408083206001600160a01b03861684529091528120610cc49083612662565b949350505050565b6002600a5403610cee5760405162461bcd60e51b81526004016109df90614a27565b6002600a55610cff848484846126a0565b604051632142170760e11b81526001600160a01b038316906342842e0e90610d2f90309087908690600401614a5e565b600060405180830381600087803b158015610d4957600080fd5b505af1158015610d5d573d6000803e3d6000fd5b50505050816001600160a01b0316836001600160a01b031685600080516020614fb383398151915284604051610d9591815260200190565b60405180910390a450506001600a555050565b610db233826126bf565b610dce5760405162461bcd60e51b81526004016109df90614a82565b610bef83838361278e565b6000610de4836115ef565b8210610e465760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016109df565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600080610e7b33610eb2565b90506109248184612939565b6000828152600d602090815260408083206001600160a01b03851684529091528120610c0c90612c1e565b6012546000906201000090046001600160a01b03161580610ee357506012546201000090046001600160a01b031633145b610f285760405162461bcd60e51b815260206004820152601660248201527537b7363c903630b9ba10313ab73236329037bbb732b960511b60448201526064016109df565b600b5415610f685760405162461bcd60e51b815260206004820152600d60248201526c6f6e6c7920312062756e646c6560981b60448201526064016109df565b6109248261242c565b610bef83838360405180602001604052806000815250611d72565b6000610924600083612222565b610fa161254d565b6012805462010000600160b01b031916336201000002179055610fc46001611a1c565b1561100a5760405162461bcd60e51b815260206004820152601660248201527562756e646c652068617320746f20626520656d70747960501b60448201526064016109df565b6001600b600082825461101d9190614ae9565b9091555061102d90506001612c28565b565b601254610100900460ff1680611048575060125460ff16155b6110ab5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109df565b601254610100900460ff161580156110cd576012805461ffff19166101011790555b6002600a54036110ef5760405162461bcd60e51b81526004016109df90614a27565b6002600a556110fd84612ccf565b61110682612d21565b61110f83610eb2565b506040516001600160a01b03841681527f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e69060200160405180910390a16001600a5580156109fc576012805461ff001916905550505050565b600061117360085490565b82106111d65760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016109df565b600882815481106111e9576111e9614afc565b90600052602060002001549050919050565b61120361254d565b6001600160a01b0383166000908152600e6020908152604080832085845290915290205483901561126b5760405162461bcd60e51b8152602060048201526012602482015271746f6b656e20697320696e2062756e646c6560701b60448201526064016109df565b6040516331a9108f60e11b81526004810184905230906001600160a01b03831690636352211e90602401602060405180830381865afa1580156112b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d69190614b12565b6001600160a01b03161461131c5760405162461bcd60e51b815260206004820152600d60248201526c1b999d081b9bdd081bdddb9959609a1b60448201526064016109df565b604051632142170760e11b81526001600160a01b038216906342842e0e9061134c90309086908890600401614a5e565b600060405180830381600087803b15801561136657600080fd5b505af115801561137a573d6000803e3d6000fd5b5050505050505050565b600f546001600160a01b031633146113ae5760405162461bcd60e51b81526004016109df90614b2f565b6113b781612d21565b50565b600f546001600160a01b031633146109325760405162461bcd60e51b81526004016109df90614b2f565b6010546001600160a01b0316331461143e5760405162461bcd60e51b815260206004820152601c60248201527f4f776e61626c653a206e6f74206f776e65722063616e6469646174650000000060448201526064016109df565b601080546001600160a01b0319169055565b6000818152600260205260408120546001600160a01b0316806109245760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016109df565b604051636651f11d60e01b81526001600160a01b0382811660048301526000917f000000000000000000000000000000000000000000000000000000000000000091839190831690636651f11d90602401602060405180830381865afa158015611535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115599190614a0e565b119392505050565b6011805461156e90614b64565b80601f016020809104026020016040519081016040528092919081815260200182805461159a90614b64565b80156115e75780601f106115bc576101008083540402835291602001916115e7565b820191906000526020600020905b8154815290600101906020018083116115ca57829003601f168201915b505050505081565b60006001600160a01b03821661165a5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016109df565b506001600160a01b031660009081526003602052604090205490565b6010546001600160a01b031633146116d05760405162461bcd60e51b815260206004820152601c60248201527f4f776e61626c653a206e6f74206f776e65722063616e6469646174650000000060448201526064016109df565b60105461143e906001600160a01b0316612ccf565b6001600160a01b038a166000908152600e602090815260408083208c84529091528120549061171382610f8c565b90506001600160a01b03811633146117795760405162461bcd60e51b815260206004820152602360248201527f70756c6c41697264726f70206d73672e73656e646572206e6f7420656c696769604482015262626c6560e81b60648201526084016109df565b8b6001600160a01b03166342842e0e307f00000000000000000000000000000000000000000000000000000000000000008e6040518463ffffffff1660e01b81526004016117c993929190614a5e565b600060405180830381600087803b1580156117e357600080fd5b505af11580156117f7573d6000803e3d6000fd5b5050604051633f77844b60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250637eef08969150611859908f908f908f908f908f908f908f908f908f908f90600401614b9e565b600060405180830381600087803b15801561187357600080fd5b505af1158015611887573d6000803e3d6000fd5b505050508b6001600160a01b03166342842e0e7f0000000000000000000000000000000000000000000000000000000000000000308e6040518463ffffffff1660e01b81526004016118db93929190614a5e565b600060405180830381600087803b1580156118f557600080fd5b505af1158015611909573d6000803e3d6000fd5b50505050505050505050505050505050565b6002600a540361193d5760405162461bcd60e51b81526004016109df90614a27565b6002600a5561194e858585856126a0565b306001600160a01b0385160361196f5761196a3384848461266e565b611a10565b604051635c46a7ef60e11b81526001600160a01b0384169063b88d4fde906119a1903090889087908790600401614c20565b600060405180830381600087803b1580156119bb57600080fd5b505af11580156119cf573d6000803e3d6000fd5b50505050826001600160a01b0316846001600160a01b031686600080516020614fb383398151915285604051611a0791815260200190565b60405180910390a45b50506001600a55505050565b6000818152600c6020526040812061092490612c1e565b60405162461bcd60e51b815260206004820152601860248201527f616c726561647920706572736f6e616c2062756e646c6572000000000000000060448201526064016109df565b600f546001600160a01b0316331461143e5760405162461bcd60e51b81526004016109df90614b2f565b600f546001600160a01b03163314611acf5760405162461bcd60e51b81526004016109df90614b2f565b6001600160a01b038116611b345760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109df565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b03831603611bae5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109df565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611c248282612939565b5050565b611c248282612d77565b611c3a61254d565b604051627eeac760e11b81523060048201526024810183905283906000906001600160a01b0383169062fdd58e90604401602060405180830381865afa158015611c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cac9190614a0e565b905060008111611cee5760405162461bcd60e51b815260206004820152600d60248201526c1b9bc81b999d1cc81bdddb9959609a1b60448201526064016109df565b604051637921219560e11b81523060048201526001600160a01b038481166024830152604482018690526064820183905260a06084830152600060a483015283169063f242432a9060c401600060405180830381600087803b158015611d5357600080fd5b505af1158015611d67573d6000803e3d6000fd5b505050505050505050565b611d7c33836126bf565b611d985760405162461bcd60e51b81526004016109df90614a82565b6109fc84848484612f8b565b6002600a5403611dc65760405162461bcd60e51b81526004016109df90614a27565b6002600a556001600160a01b0384163314611e235760405162461bcd60e51b815260206004820152601a60248201527f5f66726f6d2073686f756c64206265206d73672e73656e64657200000000000060448201526064016109df565b611e2f84848484612fbe565b6040516323b872dd60e01b81526001600160a01b038316906323b872dd90611e5f90879030908690600401614a5e565b600060405180830381600087803b158015611e7957600080fd5b505af1158015611e8d573d6000803e3d6000fd5b50506001600a55505050505050565b6002600a5403611ebe5760405162461bcd60e51b81526004016109df90614a27565b6002600a55611ecf848484846126a0565b611eda838383613016565b816001600160a01b0316836001600160a01b031685600080516020614fb383398151915284604051610d9591815260200190565b611f188383612939565b610bef8382612d77565b6000818152600260205260409020546060906001600160a01b0316611fa15760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016109df565b6000611fab6130d7565b90506000815111611fcb5760405180602001604052806000815250610c0c565b80611fd58461232c565b604051602001611fe6929190614c5d565b6040516020818303038152906040529392505050565b61200581613169565b61200e826131bf565b6000828152600c6020526040812061202590612c1e565b1115611c24576000828152600c602052604081206120439082612662565b90505b6000838152600d602090815260408083206001600160a01b0385168452909152812061207190612c1e565b111561215c576000838152600d602090815260408083206001600160a01b038516845290915281206120a39082612662565b90506120b084838361325d565b604051632142170760e11b81526001600160a01b038316906342842e0e906120e090309087908690600401614a5e565b600060405180830381600087803b1580156120fa57600080fd5b505af192505050801561210b575060015b61211a5761211a838383613016565b816001600160a01b0316836001600160a01b031685600080516020614fb38339815191528460405161214e91815260200190565b60405180910390a450612046565b5061200e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6001600160a01b0382166000908152600e602090815260408083208484529091528120548082036122035760405162461bcd60e51b815260206004820152601a60248201527f6368696c6420746f6b656e20646f6573206e6f7420657869737400000000000060448201526064016109df565b600061220e82611450565b63cd740db560e01b17959194509092505050565b6000806001600160a01b038416156122475761223e84846132e9565b93509050612253565b61225083611450565b90505b6001600160a01b0381163b156122f2576040516376c0e6ed60e11b8152306004820152602481018490526001600160a01b0382169063ed81cdda90604401602060405180830381865afa9250505080156122ca575060408051601f3d908101601f191682019092526122c791810190614a0e565b60015b156122f25763328bf24b60e01b6001600160e01b03198216016122f05791506109249050565b505b63cd740db560e01b179392505050565b600f546001600160a01b031633146112035760405162461bcd60e51b81526004016109df90614b2f565b6060816000036123535750506040805180820190915260018152600360fc1b602082015290565b8160005b811561237d578061236781614c8c565b91506123769050600a83614cbb565b9150612357565b6000816001600160401b038111156123975761239761400a565b6040519080825280601f01601f1916602001820160405280156123c1576020820181803683370190505b5090505b8415610cc4576123d6600183614ae9565b91506123e3600a86614ccf565b6123ee906030614ce3565b60f81b81838151811061240357612403614afc565b60200101906001600160f81b031916908160001a905350612425600a86614cbb565b94506123c5565b600080600b6000815461243e90614c8c565b91829055509050610924838261336f565b3b151590565b6001600160a01b0383166124b0576124ab81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6124d3565b816001600160a01b0316836001600160a01b0316146124d3576124d38382613389565b6001600160a01b0382166124ea57610bef81613426565b826001600160a01b0316826001600160a01b031614610bef57610bef82826134d5565b60006001600160e01b03198216630a85bd0160e11b148061253e57506001600160e01b03198216639fa4074560e01b145b80610924575061092482613519565b336125586001611450565b6001600160a01b03161461102d5760405162461bcd60e51b815260206004820152601160248201527027b7363c90313ab73236329037bbb732b960791b60448201526064016109df565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610bef908490613574565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061262982611450565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610c0c8383613646565b8051156109fc576000612682826020015190565b905060001981016126995761269985828686612fbe565b5050505050565b6126a983613169565b6126b4848383613670565b6109fc84838361325d565b6000818152600260205260408120546001600160a01b03166127385760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109df565b600061274383611450565b9050806001600160a01b0316846001600160a01b0316148061277e5750836001600160a01b031661277384610a02565b6001600160a01b0316145b80610cc45750610cc48185612162565b826001600160a01b03166127a182611450565b6001600160a01b0316146128095760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016109df565b6001600160a01b03821661286b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016109df565b612876838383613778565b6128816000826125f4565b6001600160a01b03831660009081526003602052604081208054600192906128aa908490614ae9565b90915550506001600160a01b03821660009081526003602052604081208054600192906128d8908490614ce3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600081511161297c5760405162461bcd60e51b815260206004820152600f60248201526e62756e646c6520697320656d70747960881b60448201526064016109df565b805160005b818114612be0576129ae83828151811061299d5761299d614afc565b6020026020010151600001516114c7565b6129f15760405162461bcd60e51b8152602060048201526014602482015273195c98cdcc8c481b9bdd081c195c9b5a5d1d195960621b60448201526064016109df565b828181518110612a0357612a03614afc565b60200260200101516040015115612b31576000838281518110612a2857612a28614afc565b60200260200101516020015151905060005b818114612b2a57848381518110612a5357612a53614afc565b6020026020010151600001516001600160a01b031663b88d4fde3330888781518110612a8157612a81614afc565b6020026020010151602001518581518110612a9e57612a9e614afc565b60200260200101518a604051602001612ab991815260200190565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401612ae79493929190614c20565b600060405180830381600087803b158015612b0157600080fd5b505af1158015612b15573d6000803e3d6000fd5b5050505080612b2390614c8c565b9050612a3a565b5050612bd0565b6000838281518110612b4557612b45614afc565b60200260200101516020015151905060005b818114612bcd57612bbd3387878681518110612b7557612b75614afc565b602002602001015160000151888781518110612b9357612b93614afc565b6020026020010151602001518581518110612bb057612bb0614afc565b6020026020010151611da4565b612bc681614c8c565b9050612b57565b50505b612bd981614c8c565b9050612981565b50827faeecfeb34aeb11fe7449e04fbc8fc80d3ddd8eeb67b35e6c1b8e1b7e3d8f025783604051612c119190614cf6565b60405180910390a2505050565b6000610924825490565b6000612c3382611450565b9050612c4181600084613778565b612c4c6000836125f4565b6001600160a01b0381166000908152600360205260408120805460019290612c75908490614ae9565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600f80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000815111612d3f5760405180602001604052806000815250612d6a565b80612d494661232c565b604051602001612d5a929190614dac565b6040516020818303038152906040525b601190611c249082614e35565b612d80826131bf565b6000815111612dc35760405162461bcd60e51b815260206004820152600f60248201526e62756e646c6520697320656d70747960881b60448201526064016109df565b805160005b818114612f5a576000838281518110612de357612de3614afc565b60200260200101516000015190506000848381518110612e0557612e05614afc565b60200260200101516020015151905060005b818114612f46576000868581518110612e3257612e32614afc565b6020026020010151602001518281518110612e4f57612e4f614afc565b60200260200101519050612e6488858361325d565b868581518110612e7657612e76614afc565b60200260200101516040015115612eee57604051632142170760e11b81526001600160a01b038516906342842e0e90612eb790309033908690600401614a5e565b600060405180830381600087803b158015612ed157600080fd5b505af1158015612ee5573d6000803e3d6000fd5b50505050612ef9565b612ef9338583613016565b836001600160a01b0316336001600160a01b031689600080516020614fb383398151915284604051612f2d91815260200190565b60405180910390a450612f3f81614c8c565b9050612e17565b50505080612f5390614c8c565b9050612dc8565b50827ff60c055f56c20fcc9ca127b02b3958fad33fb25c41c195093e037d94fcc2700883604051612c119190614cf6565b612f9684848461278e565b612fa2848484846137db565b6109fc5760405162461bcd60e51b81526004016109df90614ef4565b612fc7826114c7565b61300a5760405162461bcd60e51b8152602060048201526014602482015273195c98cdcc8c481b9bdd081c195c9b5a5d1d195960621b60448201526064016109df565b6109fc848484846138dc565b60405163095ea7b360e01b8152306004820152602481018290526001600160a01b0383169063095ea7b390604401600060405180830381600087803b15801561305e57600080fd5b505af192505050801561306f575060015b506040516323b872dd60e01b81526001600160a01b038316906323b872dd906130a090309087908690600401614a5e565b600060405180830381600087803b1580156130ba57600080fd5b505af11580156130ce573d6000803e3d6000fd5b50505050505050565b6060601180546130e690614b64565b80601f016020809104026020016040519081016040528092919081815260200182805461311290614b64565b801561315f5780601f106131345761010080835404028352916020019161315f565b820191906000526020600020905b81548152906001019060200180831161314257829003601f168201915b5050505050905090565b6001600160a01b0381166113b75760405162461bcd60e51b815260206004820152601e60248201527f6368696c64207472616e7366657220746f207a65726f2061646472657373000060448201526064016109df565b60006131ca82610f8c565b90506001600160a01b0381163314806131f35750336131e883610a02565b6001600160a01b0316145b8061320357506132038133612162565b611c245760405162461bcd60e51b815260206004820152602560248201527f7472616e736665724368696c64206d73672e73656e646572206e6f7420656c696044820152646769626c6560d81b60648201526084016109df565b6000838152600d602090815260408083206001600160a01b038616845290915290206132899082613a23565b506001600160a01b0382166000818152600e602090815260408083208584528252808320839055868352600d8252808320938352929052206132ca90612c1e565b600003610bef576000838152600c602052604090206109fc9083613a2f565b6001600160a01b0382166000908152600e6020908152604080832084845290915281205480820361335c5760405162461bcd60e51b815260206004820152601a60248201527f6368696c6420746f6b656e20646f6573206e6f7420657869737400000000000060448201526064016109df565b61336581611450565b91505b9250929050565b611c24828260405180602001604052806000815250613a44565b60006001613396846115ef565b6133a09190614ae9565b6000838152600760205260409020549091508082146133f3576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061343890600190614ae9565b6000838152600960205260408120546008805493945090928490811061346057613460614afc565b90600052602060002001549050806008838154811061348157613481614afc565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806134b9576134b9614f46565b6001900381819060005260206000200160009055905550505050565b60006134e0836115ef565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60006001600160e01b0319821663cde244d960e01b148061354a57506001600160e01b031982166328d12bf960e21b145b806135655750630f7ef9b560e11b6001600160e01b03198316145b80610924575061092482613a77565b60006135c9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613a9c9092919063ffffffff16565b805190915015610bef57808060200190518101906135e79190614f5c565b610bef5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016109df565b600082600001828154811061365d5761365d614afc565b9060005260206000200154905092915050565b6001600160a01b0382166000908152600e60209081526040808320848452909152812054908190036137025760405162461bcd60e51b815260206004820152603560248201527f5f7472616e736665724368696c64205f6368696c64436f6e7472616374205f636044820152741a1a5b19151bdad95b9259081b9bdd08199bdd5b99605a1b60648201526084016109df565b83811461376f5760405162461bcd60e51b815260206004820152603560248201527f436f6d706f7361626c65546f70446f776e3a205f7472616e736665724368696c60448201527419081ddc9bdb99c81d1bdad95b925908199bdd5b99605a1b60648201526084016109df565b6109fc816131bf565b306001600160a01b038316036137d05760405162461bcd60e51b815260206004820152601a60248201527f6e65737465642062756e646c6573206e6f7420616c6c6f77656400000000000060448201526064016109df565b610bef838383612455565b60006001600160a01b0384163b156138d157604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061381f903390899088908890600401614c20565b6020604051808303816000875af192505050801561385a575060408051601f3d908101601f1916820190925261385791810190614f79565b60015b6138b7573d808015613888576040519150601f19603f3d011682016040523d82523d6000602084013e61388d565b606091505b5080516000036138af5760405162461bcd60e51b81526004016109df90614ef4565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610cc4565b506001949350505050565b6000838152600260205260409020546001600160a01b03166139405760405162461bcd60e51b815260206004820152601d60248201527f62756e646c6520746f6b656e496420646f6573206e6f7420657869737400000060448201526064016109df565b6000838152600d602090815260408083206001600160a01b0386168452909152812061396b90612c1e565b90508060000361398f576000848152600c6020526040902061398d9084613aab565b505b6000848152600d602090815260408083206001600160a01b038716845290915290206139bb9083613ac0565b506001600160a01b038381166000818152600e60209081526040808320878452825291829020889055905185815291928792908916917f0371ddf2288ad1ba92626a7e31c86a9d006e592cfe57d7d946ef08b13457c08b910160405180910390a45050505050565b6000610c0c8383613acc565b6000610c0c836001600160a01b038416613acc565b613a4e8383613bbf565b613a5b60008484846137db565b610bef5760405162461bcd60e51b81526004016109df90614ef4565b60006001600160e01b0319821663780e9d6360e01b1480610924575061092482613d0d565b6060610cc48484600085613d5d565b6000610c0c836001600160a01b038416613e85565b6000610c0c8383613e85565b60008181526001830160205260408120548015613bb5576000613af0600183614ae9565b8554909150600090613b0490600190614ae9565b9050818114613b69576000866000018281548110613b2457613b24614afc565b9060005260206000200154905080876000018481548110613b4757613b47614afc565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613b7a57613b7a614f46565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610924565b6000915050610924565b6001600160a01b038216613c155760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109df565b6000818152600260205260409020546001600160a01b031615613c7a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109df565b613c8660008383613778565b6001600160a01b0382166000908152600360205260408120805460019290613caf908490614ce3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160e01b031982166380ac58cd60e01b1480613d3e57506001600160e01b03198216635b5e139f60e01b145b8061092457506301ffc9a760e01b6001600160e01b0319831614610924565b606082471015613dbe5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016109df565b843b613e0c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109df565b600080866001600160a01b03168587604051613e289190614f96565b60006040518083038185875af1925050503d8060008114613e65576040519150601f19603f3d011682016040523d82523d6000602084013e613e6a565b606091505b5091509150613e7a828286613ed4565b979650505050505050565b6000818152600183016020526040812054613ecc57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610924565b506000610924565b60608315613ee3575081610c0c565b825115613ef35782518084602001fd5b8160405162461bcd60e51b81526004016109df9190613fde565b6001600160e01b0319811681146113b757600080fd5b600060208284031215613f3557600080fd5b8135610c0c81613f0d565b6001600160a01b03811681146113b757600080fd5b60008060408385031215613f6857600080fd5b8235613f7381613f40565b91506020830135613f8381613f40565b809150509250929050565b60005b83811015613fa9578181015183820152602001613f91565b50506000910152565b60008151808452613fca816020860160208601613f8e565b601f01601f19169290920160200192915050565b602081526000610c0c6020830184613fb2565b60006020828403121561400357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156140425761404261400a565b60405290565b604051601f8201601f191681016001600160401b03811182821017156140705761407061400a565b604052919050565b600082601f83011261408957600080fd5b81356001600160401b038111156140a2576140a261400a565b6140b5601f8201601f1916602001614048565b8181528460208386010111156140ca57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561410057600080fd5b86359550602087013561411281613f40565b945060408701359350606087013561412981613f40565b92506080870135915060a08701356001600160401b0381111561414b57600080fd5b61415789828a01614078565b9150509295509295509295565b6000806040838503121561417757600080fd5b823561418281613f40565b946020939093013593505050565b600080604083850312156141a357600080fd5b50508035926020909101359150565b60008083601f8401126141c457600080fd5b5081356001600160401b038111156141db57600080fd5b60208301915083602082850101111561336857600080fd5b60008060008060006080868803121561420b57600080fd5b853561421681613f40565b9450602086013561422681613f40565b93506040860135925060608601356001600160401b0381111561424857600080fd5b614254888289016141b2565b969995985093965092949392505050565b60008060006060848603121561427a57600080fd5b83359250602084013561428c81613f40565b929592945050506040919091013590565b600080600080608085870312156142b357600080fd5b8435935060208501356142c581613f40565b925060408501356142d581613f40565b9396929550929360600135925050565b6000806000606084860312156142fa57600080fd5b833561430581613f40565b9250602084013561428c81613f40565b60006001600160401b0382111561432e5761432e61400a565b5060051b60200190565b80151581146113b757600080fd5b803561435181614338565b919050565b600082601f83011261436757600080fd5b8135602061437c61437783614315565b614048565b82815260059290921b8401810191818101908684111561439b57600080fd5b8286015b8481101561448c5780356001600160401b03808211156143bf5760008081fd5b908801906060828b03601f19018113156143d95760008081fd5b6143e1614020565b878401356143ee81613f40565b8152604084810135848111156144045760008081fd5b85019350603f84018d136144185760008081fd5b8884013561442861437782614315565b81815260059190911b85018201908a8101908f8311156144485760008081fd5b958301955b828710156144665786358252958b0195908b019061444d565b848c0152506144789050858401614346565b90820152865250505091830191830161439f565b509695505050505050565b6000602082840312156144a957600080fd5b81356001600160401b038111156144bf57600080fd5b610cc484828501614356565b600080604083850312156144de57600080fd5b823591506020830135613f8381613f40565b60006020828403121561450257600080fd5b8135610c0c81613f40565b60008060006060848603121561452257600080fd5b833561452d81613f40565b9250602084013561453d81613f40565b915060408401356001600160401b0381111561455857600080fd5b61456486828701614078565b9150509250925092565b60008060006060848603121561458357600080fd5b833561458e81613f40565b92506020840135915060408401356145a581613f40565b809150509250925092565b6000602082840312156145c257600080fd5b81356001600160401b038111156145d857600080fd5b610cc484828501614078565b6000806000806000806000806000806101208b8d03121561460457600080fd5b8a3561460f81613f40565b995060208b0135985060408b013561462681613f40565b975060608b01356001600160401b0381111561464157600080fd5b61464d8d828e016141b2565b90985096505060808b013561466181613f40565b945060a08b0135935060c08b013561467881614338565b925060e08b013591506101008b013561469081613f40565b809150509295989b9194979a5092959850565b600080600080600060a086880312156146bb57600080fd5b8535945060208601356146cd81613f40565b935060408601356146dd81613f40565b92506060860135915060808601356001600160401b038111156146ff57600080fd5b61470b88828901614078565b9150509295509295909350565b6000806040838503121561472b57600080fd5b823561473681613f40565b91506020830135613f8381614338565b6000806040838503121561475957600080fd5b8235915060208301356001600160401b0381111561477657600080fd5b61478285828601614356565b9150509250929050565b600080600080608085870312156147a257600080fd5b84356147ad81613f40565b935060208501356147bd81613f40565b92506040850135915060608501356001600160401b038111156147df57600080fd5b6147eb87828801614078565b91505092959194509250565b6000806000806080858703121561480d57600080fd5b843561481881613f40565b93506020850135925060408501356142d581613f40565b60008083601f84011261484157600080fd5b5081356001600160401b0381111561485857600080fd5b6020830191508360208260051b850101111561336857600080fd5b60008060008060008060008060a0898b03121561488f57600080fd5b883561489a81613f40565b975060208901356148aa81613f40565b965060408901356001600160401b03808211156148c657600080fd5b6148d28c838d0161482f565b909850965060608b01359150808211156148eb57600080fd5b6148f78c838d0161482f565b909650945060808b013591508082111561491057600080fd5b5061491d8b828c016141b2565b999c989b5096995094979396929594505050565b60008060006060848603121561494657600080fd5b8335925060208401356001600160401b038082111561496457600080fd5b61497087838801614356565b9350604086013591508082111561498657600080fd5b5061456486828701614356565b60008060008060008060a087890312156149ac57600080fd5b86356149b781613f40565b955060208701356149c781613f40565b9450604087013593506060870135925060808701356001600160401b038111156149f057600080fd5b6149fc89828a016141b2565b979a9699509497509295939492505050565b600060208284031215614a2057600080fd5b5051919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561092457610924614ad3565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614b2457600080fd5b8151610c0c81613f40565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c90821680614b7857607f821691505b602082108103614b9857634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b038b81168252602082018b9052898116604083015261012060608301819052820188905260009061014090898b838601376000848b0183015290971660808301525060a081019490945291151560c084015260e08301526001600160a01b0316610100820152601f909201601f191690910101949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614c5390830184613fb2565b9695505050505050565b60008351614c6f818460208801613f8e565b835190830190614c83818360208801613f8e565b01949350505050565b600060018201614c9e57614c9e614ad3565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082614cca57614cca614ca5565b500490565b600082614cde57614cde614ca5565b500690565b8082018082111561092457610924614ad3565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015614d9d57898403603f19018652825180516001600160a01b031685528881015160608a8701819052815190870181905260808701918b019085905b80821015614d7d5782518452928c0192918c019160019190910190614d5d565b505050908801511515948801949094529487019491870191600101614d1e565b50919998505050505050505050565b60008351614dbe818460208801613f8e565b835190830190614dd2818360208801613f8e565b602f60f81b9101908152600101949350505050565b601f821115610bef57600081815260208120601f850160051c81016020861015614e0e5750805b601f850160051c820191505b81811015614e2d57828155600101614e1a565b505050505050565b81516001600160401b03811115614e4e57614e4e61400a565b614e6281614e5c8454614b64565b84614de7565b602080601f831160018114614e975760008415614e7f5750858301515b600019600386901b1c1916600185901b178555614e2d565b600085815260208120601f198616915b82811015614ec657888601518255948401946001909101908401614ea7565b5085821015614ee45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215614f6e57600080fd5b8151610c0c81614338565b600060208284031215614f8b57600080fd5b8151610c0c81613f0d565b60008251614fa8818460208701613f8e565b919091019291505056fe0ef52e516fb5aec15a5d3587e5480481b702b26db93c8430eca78b61990fd3f6a164736f6c6343000811000a",
  "devdoc": {
    "author": "NFTfi",
    "details": "ERC998 Top-Down Composable Non-Fungible Token that supports ERC721 children.",
    "kind": "dev",
    "methods": {
      "addAndRemoveBundleElements(uint256,(address,uint256[],bool)[],(address,uint256[],bool)[])": {
        "details": "Adds and removes a set of BundleElementERC721 objects from the specified token ID.",
        "params": {
          "_toAdd": "The array of BundleElementERC721 objects to add.",
          "_toRemove": "The array of BundleElementERC721 objects to remove.",
          "_tokenId": "The ID of the token to add and remove the bundle elements from."
        }
      },
      "addBundleElements(uint256,(address,uint256[],bool)[])": {
        "details": "Adds a set of BundleElementERC721 objects to the specified token ID.",
        "params": {
          "_bundleElements": "The array of BundleElementERC721 objects to add.",
          "_tokenId": "The ID of the token to add the bundle elements to."
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "buildBundle((address,uint256[],bool)[])": {
        "details": "used to build a bundle from the BundleElements struct, returns the id of the created bundle",
        "params": {
          "_bundleElements": "- the lists of erc721 tokens that are to be bundled"
        }
      },
      "childContractByIndex(uint256,uint256)": {
        "params": {
          "_index": "The index position of the child contract",
          "_tokenId": "The parent token of child tokens in child contract"
        },
        "returns": {
          "childContract": "The contract found at the _tokenId and index"
        }
      },
      "childExists(address,uint256)": {
        "params": {
          "_childContract": "The contract address of the child token",
          "_childTokenId": "The tokenId of the child"
        },
        "returns": {
          "_0": "True if the child exists, false otherwise"
        }
      },
      "childTokenByIndex(uint256,address,uint256)": {
        "params": {
          "_childContract": "The child contract of the child token",
          "_index": "The index position of the child token",
          "_tokenId": "The parent token of the child token"
        },
        "returns": {
          "childTokenId": "The child tokenId for the parent token, child token and index"
        }
      },
      "constructor": {
        "details": "only runs when the master copy is deplyoed, when cloned then initializer is ran",
        "params": {
          "_admin": "admin address capable of setting URI-s and pausing",
          "_airdropFlashLoan": "airdrop flashloan contract deplyoed alongside",
          "_permittedNfts": "permitted nft-s contract of the loan system"
        }
      },
      "decomposeBundle(uint256,address)": {
        "details": "This method may run out of gas if the list of children is too big. In that case, children can be removed      individually.",
        "params": {
          "_receiver": "address of the receiver of the children",
          "_tokenId": "the id of the bundle"
        }
      },
      "drainERC1155Airdrop(address,uint256,address)": {
        "params": {
          "_receiver": "- receiver of the token",
          "_tokenAddress": "- address of the token contract for the token to be sent out",
          "_tokenId": "- id token to be sent out"
        }
      },
      "drainERC20Airdrop(address,address)": {
        "params": {
          "_receiver": "- receiver of the token",
          "_tokenAddress": "- address of the token contract for the token to be sent out"
        }
      },
      "drainERC721Airdrop(address,uint256,address)": {
        "params": {
          "_receiver": "- receiver of the token",
          "_tokenAddress": "- address of the token contract for the token to be sent out",
          "_tokenId": "- id token to be sent out"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getChild(address,uint256,address,uint256)": {
        "details": "This contract has to be approved first in _childContract",
        "params": {
          "_childContract": "The ERC721 contract of the child token",
          "_childTokenId": "The tokenId of the child token",
          "_from": "The address that owns the child token.",
          "_tokenId": "The token that becomes the parent owner"
        }
      },
      "initialize(address,address,string)": {
        "details": "sets up initial parameters after cloning",
        "params": {
          "_admin": "admin address capable of setting URI-s and pausing",
          "_customBaseURI": "- Base URI",
          "_owner": "of the personal bundler"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}. have to override, because cloning doesn't work for it"
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated.",
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if allowed"
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated.",
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if allowed"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "params": {
          "_childTokenId": "The token that is being transferred to the parent",
          "_data": "Up to the first 32 bytes contains an integer which is the receiving parent tokenId",
          "_from": "The owner of the child token"
        },
        "returns": {
          "_0": "the selector of this method"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "ownerOfChild(address,uint256)": {
        "params": {
          "_childContract": "The contract address of the child token",
          "_childTokenId": "The tokenId of the child"
        },
        "returns": {
          "parentTokenId": "The parent tokenId of _childTokenId",
          "parentTokenOwner": "The parent address of the parent token and ERC998 magic value"
        }
      },
      "permittedAsset(address)": {
        "params": {
          "_asset": "address of the asset"
        },
        "returns": {
          "_0": "true if permitted, false otherwise"
        }
      },
      "pullAirdrop(address,uint256,address,bytes,address,uint256,bool,uint256,address)": {
        "params": {
          "_data": "- function selector to be called on the airdropping contract",
          "_is1155": "-",
          "_nftAirdrop": "- address of the used claiming nft in the drop",
          "_nftAirdropAmount": "- amount in case of 1155",
          "_nftAirdropId": "- id of the used claiming nft in the drop",
          "_nftContract": "- contract address of the target nft of the drop",
          "_nftId": "- id of the target nft of the drop",
          "_target": "- address of the airdropping contract"
        }
      },
      "removeBundleElements(uint256,(address,uint256[],bool)[])": {
        "details": "Removes a set of BundleElementERC721 objects to the specified token ID.",
        "params": {
          "_bundleElements": "The array of BundleElementERC721 objects to remove.",
          "_tokenId": "The ID of the token to remove the bundle elements from."
        }
      },
      "requestTransferOwnership(address)": {
        "details": "Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`). Can only be called by the current owner."
      },
      "rescueERC20(address,address)": {
        "params": {
          "_receiver": "- receiver of the token",
          "_tokenAddress": "- address of the token contract for the token to be sent out"
        }
      },
      "rescueERC721(address,uint256,address)": {
        "params": {
          "_receiver": "- receiver of the token",
          "_tokenAddress": "- address of the token contract for the token to be sent out",
          "_tokenId": "- id token to be sent out"
        }
      },
      "rootOwnerOf(uint256)": {
        "params": {
          "_tokenId": "The token to query for a root owner address"
        },
        "returns": {
          "rootOwner": "The root owner at the top of tree of tokens and ERC998 magic value."
        }
      },
      "rootOwnerOfChild(address,uint256)": {
        "details": "Returns the owner at the top of the tree of composables Use Cases handled: - Case 1: Token owner is this contract and token. - Case 2: Token owner is other external top-down composable - Case 3: Token owner is other contract - Case 4: Token owner is user",
        "params": {
          "_childContract": "The contract address of the child token",
          "_childTokenId": "The tokenId of the child"
        },
        "returns": {
          "rootOwner": "The root owner at the top of tree of tokens and ERC998 magic value"
        }
      },
      "safeMint(address)": {
        "params": {
          "_to": "The address that owns the new bundle"
        },
        "returns": {
          "_0": "The id of the new bundle"
        }
      },
      "safeTransferChild(uint256,address,address,uint256)": {
        "params": {
          "_childContract": "The ERC721 contract of the child token",
          "_childTokenId": "The tokenId of the token that is being transferred",
          "_fromTokenId": "The owning token to transfer from",
          "_to": "The address that receives the child token"
        }
      },
      "safeTransferChild(uint256,address,address,uint256,bytes)": {
        "params": {
          "_childContract": "The ERC721 contract of the child token",
          "_childTokenId": "The tokenId of the token that is being transferred",
          "_data": "Additional data with no specified format",
          "_fromTokenId": "The owning token to transfer from",
          "_to": "The address that receives the child token"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "Sets baseURI.",
        "params": {
          "_customBaseURI": "- Base URI"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}. have to override, because cloning doesn't work for it"
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalChildContracts(uint256)": {
        "params": {
          "_tokenId": "The parent token of child tokens in child contracts"
        },
        "returns": {
          "_0": "uint256 The total number of child contracts with tokens owned by _tokenId"
        }
      },
      "totalChildTokens(uint256,address)": {
        "params": {
          "_childContract": "The child contract containing the child tokens",
          "_tokenId": "The parent token of child tokens"
        },
        "returns": {
          "_0": "uint256 The total number of child tokens found in child contract that are owned by _tokenId"
        }
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferChild(uint256,address,address,uint256)": {
        "details": "Transfer child token from top-down composable to address",
        "params": {
          "_childContract": "The ERC721 contract of the child token",
          "_childTokenId": "The tokenId of the token that is being transferred",
          "_fromTokenId": "The owning token to transfer from",
          "_to": "The address that receives the child token"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "title": "PersonalBundler",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "childContractByIndex(uint256,uint256)": {
        "notice": "Get child contract by tokenId and index"
      },
      "childExists(address,uint256)": {
        "notice": "Tells whether the ERC721 type child exists or not"
      },
      "childTokenByIndex(uint256,address,uint256)": {
        "notice": "Get child token owned by _tokenId, in child contract, at index position"
      },
      "decomposeBundle(uint256,address)": {
        "notice": "Remove all the children from the bundle"
      },
      "drainERC1155Airdrop(address,uint256,address)": {
        "notice": "used by the owner account to be able to drain ERC1155 tokens received as airdrops for the locked  collateral NFT-s"
      },
      "drainERC20Airdrop(address,address)": {
        "notice": "used by the owner account to be able to drain ERC20 tokens received as airdrops for the locked  collateral NFT-s"
      },
      "drainERC721Airdrop(address,uint256,address)": {
        "notice": "used by the owner account to be able to drain ERC721 tokens received as airdrops for the locked  collateral NFT-s"
      },
      "getChild(address,uint256,address,uint256)": {
        "notice": "Transfer a child token from an ERC721 contract to a composable. Used for old tokens that does not have a safeTransferFrom method like cryptokitties"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "A token receives a child token param The address that caused the transfer"
      },
      "ownerOfChild(address,uint256)": {
        "notice": "Get the parent tokenId and its owner of a ERC721 child token"
      },
      "permittedAsset(address)": {
        "notice": "Tells if an asset is permitted or not"
      },
      "pullAirdrop(address,uint256,address,bytes,address,uint256,bool,uint256,address)": {
        "notice": "this function initiates a flashloan to pull an airdrop from a tartget contract"
      },
      "rescueERC20(address,address)": {
        "notice": "used by the owner account to be able to drain ERC20 tokens received as airdrops for the locked  collateral NFT-s"
      },
      "rescueERC721(address,uint256,address)": {
        "notice": "used by the owner account to be able to drain ERC721 tokens received as airdrops for the locked  collateral NFT-s"
      },
      "rootOwnerOf(uint256)": {
        "notice": "Get the root owner of tokenId"
      },
      "rootOwnerOfChild(address,uint256)": {
        "notice": "Get the root owner of a child token"
      },
      "safeMint(address)": {
        "notice": "Mints a new bundle"
      },
      "safeTransferChild(uint256,address,address,uint256)": {
        "notice": "Transfer child token from top-down composable to address"
      },
      "safeTransferChild(uint256,address,address,uint256,bytes)": {
        "notice": "Transfer child token from top-down composable to address or other top-down composable"
      },
      "sendElementsToPersonalBundler(uint256,address)": {
        "notice": "disabled here"
      },
      "totalChildContracts(uint256)": {
        "notice": "Get the total number of child contracts with tokens that are owned by _tokenId"
      },
      "totalChildTokens(uint256,address)": {
        "notice": "Get the total number of child tokens owned by tokenId that exist in a child contract"
      },
      "transferChildToParent(uint256,address,uint256,address,uint256,bytes)": {
        "notice": "NOT SUPPORTED Intended to transfer bottom-up composable child token from top-down composable to other ERC721 token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3606,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3608,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3612,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3616,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3620,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3626,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4577,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4581,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4584,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4588,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 890,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "_status",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 6708,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "tokenCount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 6713,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "childContracts",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)6443_storage)"
      },
      {
        "astId": 6720,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "childTokens",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UintSet)6570_storage))"
      },
      {
        "astId": 6726,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "childTokenOwner",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 12135,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "_owner",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 12137,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "_ownerCandidate",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 8884,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "baseURI",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      },
      {
        "astId": 747,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "_initialized",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 750,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "_initializing",
        "offset": 1,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 9877,
        "contract": "contracts/PersonalBundler.sol:PersonalBundler",
        "label": "lastBundleOwner",
        "offset": 2,
        "slot": "18",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UintSet)6570_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)6570_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UintSet)6570_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct EnumerableSet.UintSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UintSet)6570_storage)"
      },
      "t_mapping(t_uint256,t_struct(AddressSet)6443_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)6443_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)6443_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6442,
            "contract": "contracts/PersonalBundler.sol:PersonalBundler",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6172_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)6172_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6167,
            "contract": "contracts/PersonalBundler.sol:PersonalBundler",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6171,
            "contract": "contracts/PersonalBundler.sol:PersonalBundler",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)6570_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 6569,
            "contract": "contracts/PersonalBundler.sol:PersonalBundler",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6172_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}