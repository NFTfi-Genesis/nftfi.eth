{
  "address": "0xCb0b3684D579Bb6192504bD730969659D6ee2CbE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_erc20s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_marketIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFlashloan.AccountInfo[]",
          "name": "accountInfo",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum IFlashloan.ActionType",
              "name": "actionType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "accountId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "sign",
                  "type": "bool"
                },
                {
                  "internalType": "enum IFlashloan.AssetDenomination",
                  "name": "denomination",
                  "type": "uint8"
                },
                {
                  "internalType": "enum IFlashloan.AssetReference",
                  "name": "ref",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFlashloan.AssetAmount",
              "name": "amount",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "primaryMarketId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "secondaryMarketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "otherAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "otherAccountId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IFlashloan.ActionArgs[]",
          "name": "actions",
          "type": "tuple[]"
        }
      ],
      "name": "operate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rejectTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwnerCandidate",
          "type": "address"
        }
      ],
      "name": "requestTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "setMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_erc20s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_marketIds",
          "type": "uint256[]"
        }
      ],
      "name": "setMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1fc885f3293ca2f3a7762fd38820b65dd431daf1273f1998350ae76d50f41dfa",
  "receipt": {
    "to": null,
    "from": "0x02e037F56728E947e92Af2c05baF7FeF387Ddd06",
    "contractAddress": "0xCb0b3684D579Bb6192504bD730969659D6ee2CbE",
    "transactionIndex": 24,
    "gasUsed": "929627",
    "logsBloom": "0x
    "blockHash": "0x0877642508ecbffb80769fcfbd1173810743850697f7e1a4f159aa740fa0e8fa",
    "transactionHash": "0x1fc885f3293ca2f3a7762fd38820b65dd431daf1273f1998350ae76d50f41dfa",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 5021027,
        "transactionHash": "0x1fc885f3293ca2f3a7762fd38820b65dd431daf1273f1998350ae76d50f41dfa",
        "address": "0xCb0b3684D579Bb6192504bD730969659D6ee2CbE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000beebcd47b8315b9ffc949318269a329aeb7d97b4"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x0877642508ecbffb80769fcfbd1173810743850697f7e1a4f159aa740fa0e8fa"
      }
    ],
    "blockNumber": 5021027,
    "cumulativeGasUsed": "2026692",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x7b79995e5f793a07bc00c21412e50ecae098e7f9",
      "0x8267cf9254734c6eb452a7bb9aaf97b392258b21",
      "0x3e622317f8C93f7328350cF0B56d9eD4C620C5d6"
    ],
    [
      0,
      1,
      2
    ],
    "0xbeEBCD47B8315B9fFC949318269A329AEb7D97b4"
  ],
  "numDeployments": 1,
  "solcInputHash": "e379d3408e104b7f9d4d9031aa784a0a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_erc20s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_marketIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct IFlashloan.AccountInfo[]\",\"name\":\"accountInfo\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum IFlashloan.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"accountId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"enum IFlashloan.AssetDenomination\",\"name\":\"denomination\",\"type\":\"uint8\"},{\"internalType\":\"enum IFlashloan.AssetReference\",\"name\":\"ref\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IFlashloan.AssetAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"primaryMarketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryMarketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"otherAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"otherAccountId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFlashloan.ActionArgs[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"name\":\"operate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rejectTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"requestTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"setMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_erc20s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_marketIds\",\"type\":\"uint256[]\"}],\"name\":\"setMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"NFTfi\",\"details\":\"This contract is a mock of the dYdX flash loan system for testing purposes. It implements the ISoloMargin interface to mimic the behavior of dYdX flash loans on a local network.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Contract constructor that sets the ERC20 markets.\",\"params\":{\"_erc20s\":\"The address of the ERC20 tokens\",\"_marketIds\":\"The id of the markets\"}},\"getMarketTokenAddress(uint256)\":{\"details\":\"Returns the address of the ERC20 token. This mocks the function in the real dYdX contract which returns the address of the token for a given market id.\",\"params\":{\"\":\"*_marketId The id of the market (not used in this mock contract).\"},\"returns\":{\"_0\":\"The address of the ERC20 token.\"}},\"operate((address,uint256)[],(uint8,uint256,(bool,uint8,uint8,uint256),uint256,uint256,address,uint256,bytes)[])\":{\"details\":\"Mocks a flash loan operation. It transfers the loan amount to the borrower, calls the function on the borrower's contract, and then transfers the repayment from the borrower.\",\"params\":{\"accountInfo\":\"Information about the account.\",\"actions\":\"Actions to be performed during the flash loan operation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"requestTransferOwnership(address)\":{\"details\":\"Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`). Can only be called by the current owner.\"},\"setMarket(address,uint256)\":{\"details\":\"Updates the ERC20 token address.\",\"params\":{\"_erc20\":\"The new address of the ERC20 token.\"}}},\"title\":\"MockDyDxFlashloan\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockDyDxFlashloan.sol\":\"MockDyDxFlashloan\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/refinancing/flashloan/IFlashloan.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IFlashloan\\n * @author NFTfi\\n * @dev This is an interface for the Flashloan contract.\\n * It includes the definitions for data types and function used in the flashloan operations.\\n */\\ninterface IFlashloan {\\n    /**\\n     * @dev Enum representing the denomination of an asset.\\n     * Assets can be denominated in Wei or Par.\\n     */\\n    enum AssetDenomination {\\n        Wei,\\n        Par\\n    }\\n\\n    /**\\n     * @dev Enum representing the reference of an asset amount.\\n     * Assets can be referenced by a delta (change in value) or target (final value).\\n     */\\n    enum AssetReference {\\n        Delta,\\n        Target\\n    }\\n\\n    /**\\n     * @dev Enum representing the type of action to be performed.\\n     * This can be any one among several options including Deposit, Withdraw, Transfer, etc.\\n     */\\n    enum ActionType {\\n        Deposit,\\n        Withdraw,\\n        Transfer,\\n        Buy,\\n        Sell,\\n        Trade,\\n        Liquidate,\\n        Vaporize,\\n        Call\\n    }\\n\\n    /**\\n     * @dev Struct representing an asset amount for an action.\\n     * It includes information about the sign (positive/negative),\\n     * denomination (Wei/Par), reference (Delta/Target), and the value.\\n     */\\n    struct AssetAmount {\\n        bool sign;\\n        AssetDenomination denomination;\\n        AssetReference ref;\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Struct representing an action.\\n     * It includes information about the type of action, the accountId,\\n     * the amount of the asset, market ids, address of the other party,\\n     * the other account's id, and any additional data.\\n     */\\n    struct ActionArgs {\\n        ActionType actionType;\\n        uint256 accountId;\\n        AssetAmount amount;\\n        uint256 primaryMarketId;\\n        uint256 secondaryMarketId;\\n        address otherAddress;\\n        uint256 otherAccountId;\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the account information.\\n     * It includes the owner's address and the account number.\\n     */\\n    struct AccountInfo {\\n        address owner;\\n        uint256 number;\\n    }\\n\\n    /**\\n     * @dev Function that is called after a flash loan operation.\\n     * @param sender The address initiating the call.\\n     * @param accountInfo Account related information.\\n     * @param data The data passed in the call.\\n     */\\n    function callFunction(address sender, AccountInfo memory accountInfo, bytes memory data) external;\\n}\\n\",\"keccak256\":\"0xc831dbc53083b2ff0421e43a5014a9e38ae9e7cbed303af56a9d017732934d79\",\"license\":\"BUSL-1.1\"},\"contracts/refinancing/flashloan/ISoloMargin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport {IFlashloan} from \\\"./IFlashloan.sol\\\";\\n\\n/**\\n * @title ISoloMargin\\n * @author NFTfi\\n * @dev Interface for dYdX's SoloMargin contract.\\n * It includes essential methods needed to interact with the SoloMargin contract.\\n * These methods are used for initiating flash loans and getting token address of the market.\\n */\\ninterface ISoloMargin {\\n    /**\\n     * @dev Function to bundle multiple operations in a single transaction.\\n     * The operations are executed atomically and the state is maintained to ensure protocol's solvency.\\n     * @param accounts An array of AccountInfo objects, which contains the address and number of each account involved.\\n     * @param actions An array of ActionArgs objects, representing the actions to be executed.\\n     */\\n    function operate(IFlashloan.AccountInfo[] memory accounts, IFlashloan.ActionArgs[] memory actions) external;\\n\\n    /**\\n     * @dev Function to get the token address of the market based on the given marketId.\\n     * @param marketId The ID of the market to get the token address for.\\n     * @return Address of the token for the specified market.\\n     */\\n    function getMarketTokenAddress(uint256 marketId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x0506fe45e28d161f1849c3fb836161373d812c97d5d2a6f3ddf477db9d096b5d\",\"license\":\"BUSL-1.1\"},\"contracts/test/MockDyDxFlashloan.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport {ISoloMargin, IFlashloan} from \\\"../refinancing/flashloan/ISoloMargin.sol\\\";\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title MockDyDxFlashloan\\n * @author NFTfi\\n * @dev This contract is a mock of the dYdX flash loan system for testing purposes.\\n * It implements the ISoloMargin interface to mimic the behavior of dYdX flash loans on a local network.\\n */\\ncontract MockDyDxFlashloan is ISoloMargin, Ownable {\\n    mapping(uint256 => address) public markets;\\n\\n    /**\\n     * @dev Contract constructor that sets the ERC20 markets.\\n     * @param _erc20s The address of the ERC20 tokens\\n     * @param _marketIds The id of the markets\\n     */\\n    constructor(address[] memory _erc20s, uint256[] memory _marketIds, address _admin) Ownable(_admin) {\\n        _setMarkets(_erc20s, _marketIds);\\n    }\\n\\n    /**\\n     * @dev Updates the ERC20 token address.\\n     * @param _erc20 The new address of the ERC20 token.\\n     */\\n    function setMarket(address _erc20, uint256 _marketId) public onlyOwner {\\n        _setMarket(_erc20, _marketId);\\n    }\\n\\n    function setMarkets(address[] memory _erc20s, uint256[] memory _marketIds) public onlyOwner {\\n        _setMarkets(_erc20s, _marketIds);\\n    }\\n\\n    /**\\n     * @dev Updates the ERC20 token address.\\n     * @param _erc20 The new address of the ERC20 token.\\n     */\\n    function _setMarket(address _erc20, uint256 _marketId) internal {\\n        markets[_marketId] = _erc20;\\n    }\\n\\n    function _setMarkets(address[] memory _erc20s, uint256[] memory _marketIds) internal {\\n        // solhint-disable-next-line custom-errors\\n        require(_erc20s.length == _marketIds.length, \\\"setMarkets function information arity mismatch\\\");\\n        for (uint256 i; i < _erc20s.length; ++i) {\\n            _setMarket(_erc20s[i], _marketIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mocks a flash loan operation. It transfers the loan amount to the borrower,\\n     * calls the function on the borrower's contract, and then transfers the repayment from the borrower.\\n     * @param accountInfo Information about the account.\\n     * @param actions Actions to be performed during the flash loan operation.\\n     */\\n    function operate(\\n        IFlashloan.AccountInfo[] memory accountInfo,\\n        IFlashloan.ActionArgs[] memory actions\\n    ) external override {\\n        IERC20(markets[actions[0].primaryMarketId]).transfer(msg.sender, actions[0].amount.value);\\n        IFlashloan(msg.sender).callFunction(msg.sender, accountInfo[0], actions[1].data);\\n        IERC20(markets[actions[2].primaryMarketId]).transferFrom(msg.sender, address(this), actions[2].amount.value);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the ERC20 token. This mocks the function in the real dYdX contract which\\n     * returns the address of the token for a given market id.\\n     * @param *_marketId The id of the market (not used in this mock contract).\\n     * @return The address of the ERC20 token.\\n     */\\n    function getMarketTokenAddress(uint256 _marketId) external view override returns (address) {\\n        return markets[_marketId];\\n    }\\n}\\n\",\"keccak256\":\"0x860fa84a99915e537930029949894cdc941a97037e629a5a668bd0dc9070b608\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * Modified version from openzeppelin/contracts/access/Ownable.sol that allows to\\n * initialize the owner using a parameter in the constructor\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    address private _ownerCandidate;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        // solhint-disable-next-line custom-errors\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /**\\n     * @dev Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`).\\n     * Can only be called by the current owner.\\n     */\\n    function requestTransferOwnership(address _newOwnerCandidate) public virtual onlyOwner {\\n        // solhint-disable-next-line custom-errors\\n        require(_newOwnerCandidate != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _ownerCandidate = _newOwnerCandidate;\\n    }\\n\\n    function acceptTransferOwnership() public virtual {\\n        // solhint-disable-next-line custom-errors\\n        require(_ownerCandidate == _msgSender(), \\\"Ownable: not owner candidate\\\");\\n        _setOwner(_ownerCandidate);\\n        delete _ownerCandidate;\\n    }\\n\\n    function cancelTransferOwnership() public virtual onlyOwner {\\n        delete _ownerCandidate;\\n    }\\n\\n    function rejectTransferOwnership() public virtual {\\n        // solhint-disable-next-line custom-errors\\n        require(_ownerCandidate == _msgSender(), \\\"Ownable: not owner candidate\\\");\\n        delete _ownerCandidate;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Sets the owner.\\n     */\\n    function _setOwner(address _newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(oldOwner, _newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x4f1dc29ae64fcd354c09865ae56d8a3612541ebfc9db9b87b7af6f18ca36cf65\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620011bc380380620011bc8339810160408190526200003491620002af565b80620000408162000056565b506200004d8383620000a6565b505050620003cf565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051825114620001135760405162461bcd60e51b815260206004820152602e60248201527f7365744d61726b6574732066756e6374696f6e20696e666f726d6174696f6e2060448201526d0c2e4d2e8f240dad2e6dac2e8c6d60931b606482015260840160405180910390fd5b60005b82518110156200017d576200016a83828151811062000139576200013962000391565b602002602001015183838151811062000156576200015662000391565b60200260200101516200018260201b60201c565b6200017581620003a7565b905062000116565b505050565b600090815260026020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620001f157620001f1620001b0565b604052919050565b60006001600160401b03821115620002155762000215620001b0565b5060051b60200190565b80516001600160a01b03811681146200023757600080fd5b919050565b600082601f8301126200024e57600080fd5b81516020620002676200026183620001f9565b620001c6565b82815260059290921b840181019181810190868411156200028757600080fd5b8286015b84811015620002a457805183529183019183016200028b565b509695505050505050565b600080600060608486031215620002c557600080fd5b83516001600160401b0380821115620002dd57600080fd5b818601915086601f830112620002f257600080fd5b81516020620003056200026183620001f9565b82815260059290921b8401810191818101908a8411156200032557600080fd5b948201945b838610156200034e576200033e866200021f565b825294820194908201906200032a565b918901519197509093505050808211156200036857600080fd5b5062000377868287016200023c565b92505062000388604085016200021f565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b600060018201620003c857634e487b7160e01b600052601160045260246000fd5b5060010190565b610ddd80620003df6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639d6fa618116100665780639d6fa6181461010a578063a39473231461011d578063a67a6a4514610130578063b1283e7714610143578063c39df9d31461016c57600080fd5b8063062bd3e9146100a35780635f992fdd146100e85780637b371107146100f25780638da5cb5b146100fa57806392fede0014610102575b600080fd5b6100cc6100b136600461072a565b6000908152600260205260409020546001600160a01b031690565b6040516001600160a01b03909116815260200160405180910390f35b6100f061017f565b005b6100f06101c4565b6100cc610203565b6100f0610212565b6100f061011836600461075f565b610241565b6100f061012b366004610781565b6102f7565b6100f061013e366004610aa3565b610334565b6100cc61015136600461072a565b6002602052600090815260409020546001600160a01b031681565b6100f061017a366004610be1565b6105b3565b6001546001600160a01b031633146101b25760405162461bcd60e51b81526004016101a990610c96565b60405180910390fd5b600180546001600160a01b0319169055565b6001546001600160a01b031633146101ee5760405162461bcd60e51b81526004016101a990610c96565b6001546101b2906001600160a01b03166105ec565b6000546001600160a01b031690565b3361021b610203565b6001600160a01b0316146101b25760405162461bcd60e51b81526004016101a990610ccd565b3361024a610203565b6001600160a01b0316146102705760405162461bcd60e51b81526004016101a990610ccd565b6001600160a01b0381166102d55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101a9565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b33610300610203565b6001600160a01b0316146103265760405162461bcd60e51b81526004016101a990610ccd565b610330828261063c565b5050565b600260008260008151811061034b5761034b610d02565b602002602001015160600151815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b031663a9059cbb338360008151811061039b5761039b610d02565b602002602001015160400151606001516040518363ffffffff1660e01b81526004016103dc9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156103fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041f9190610d18565b50336001600160a01b0316638b418713338460008151811061044357610443610d02565b60200260200101518460018151811061045e5761045e610d02565b602002602001015160e001516040518463ffffffff1660e01b815260040161048893929190610d35565b600060405180830381600087803b1580156104a257600080fd5b505af11580156104b6573d6000803e3d6000fd5b5050505060026000826002815181106104d1576104d1610d02565b602002602001015160600151815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b03166323b872dd33308460028151811061052257610522610d02565b60209081029190910101516040908101516060015190516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae9190610d18565b505050565b336105bc610203565b6001600160a01b0316146105e25760405162461bcd60e51b81526004016101a990610ccd565b610330828261066a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600090815260026020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b80518251146106d25760405162461bcd60e51b815260206004820152602e60248201527f7365744d61726b6574732066756e6374696f6e20696e666f726d6174696f6e2060448201526d0c2e4d2e8f240dad2e6dac2e8c6d60931b60648201526084016101a9565b60005b82518110156105ae5761071a8382815181106106f3576106f3610d02565b602002602001015183838151811061070d5761070d610d02565b602002602001015161063c565b61072381610da9565b90506106d5565b60006020828403121561073c57600080fd5b5035919050565b80356001600160a01b038116811461075a57600080fd5b919050565b60006020828403121561077157600080fd5b61077a82610743565b9392505050565b6000806040838503121561079457600080fd5b61079d83610743565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b03811182821017156107e4576107e46107ab565b60405290565b604080519081016001600160401b03811182821017156107e4576107e46107ab565b604051601f8201601f191681016001600160401b0381118282101715610834576108346107ab565b604052919050565b60006001600160401b03821115610855576108556107ab565b5060051b60200190565b80356009811061075a57600080fd5b801515811461087c57600080fd5b50565b6002811061087c57600080fd5b60006080828403121561089e57600080fd5b604051608081018181106001600160401b03821117156108c0576108c06107ab565b60405290508082356108d18161086e565b815260208301356108e18161087f565b602082015260408301356108f48161087f565b6040820152606092830135920191909152919050565b600082601f83011261091b57600080fd5b81356001600160401b03811115610934576109346107ab565b610947601f8201601f191660200161080c565b81815284602083860101111561095c57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261098a57600080fd5b8135602061099f61099a8361083c565b61080c565b82815260059290921b840181019181810190868411156109be57600080fd5b8286015b84811015610a985780356001600160401b03808211156109e25760008081fd5b90880190610160828b03601f19018113156109fd5760008081fd5b610a056107c1565b610a1088850161085f565b8152604080850135898301526060610a2a8e82880161088c565b8284015260e091508186013581840152506101008501356080830152610a536101208601610743565b60a083015261014085013560c0830152918401359183831115610a765760008081fd5b610a848d8a8588010161090a565b9082015286525050509183019183016109c2565b509695505050505050565b6000806040808486031215610ab757600080fd5b83356001600160401b0380821115610ace57600080fd5b818601915086601f830112610ae257600080fd5b81356020610af261099a8361083c565b82815260069290921b8401810191818101908a841115610b1157600080fd5b948201945b83861015610b585786868c031215610b2e5760008081fd5b610b366107ea565b610b3f87610743565b8152868401358482015282529486019490820190610b16565b97505087013593505080831115610b6e57600080fd5b5050610b7c85828601610979565b9150509250929050565b600082601f830112610b9757600080fd5b81356020610ba761099a8361083c565b82815260059290921b84018101918181019086841115610bc657600080fd5b8286015b84811015610a985780358352918301918301610bca565b60008060408385031215610bf457600080fd5b82356001600160401b0380821115610c0b57600080fd5b818501915085601f830112610c1f57600080fd5b81356020610c2f61099a8361083c565b82815260059290921b84018101918181019089841115610c4e57600080fd5b948201945b83861015610c7357610c6486610743565b82529482019490820190610c53565b96505086013592505080821115610c8957600080fd5b50610b7c85828601610b86565b6020808252601c908201527f4f776e61626c653a206e6f74206f776e65722063616e64696461746500000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610d2a57600080fd5b815161077a8161086e565b600060018060a01b03808616835260208186511681850152808601516040850152608060608501528451915081608085015260005b82811015610d865785810182015185820160a001528101610d6a565b5050600060a0828501015260a0601f19601f830116840101915050949350505050565b600060018201610dc957634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80639d6fa618116100665780639d6fa6181461010a578063a39473231461011d578063a67a6a4514610130578063b1283e7714610143578063c39df9d31461016c57600080fd5b8063062bd3e9146100a35780635f992fdd146100e85780637b371107146100f25780638da5cb5b146100fa57806392fede0014610102575b600080fd5b6100cc6100b136600461072a565b6000908152600260205260409020546001600160a01b031690565b6040516001600160a01b03909116815260200160405180910390f35b6100f061017f565b005b6100f06101c4565b6100cc610203565b6100f0610212565b6100f061011836600461075f565b610241565b6100f061012b366004610781565b6102f7565b6100f061013e366004610aa3565b610334565b6100cc61015136600461072a565b6002602052600090815260409020546001600160a01b031681565b6100f061017a366004610be1565b6105b3565b6001546001600160a01b031633146101b25760405162461bcd60e51b81526004016101a990610c96565b60405180910390fd5b600180546001600160a01b0319169055565b6001546001600160a01b031633146101ee5760405162461bcd60e51b81526004016101a990610c96565b6001546101b2906001600160a01b03166105ec565b6000546001600160a01b031690565b3361021b610203565b6001600160a01b0316146101b25760405162461bcd60e51b81526004016101a990610ccd565b3361024a610203565b6001600160a01b0316146102705760405162461bcd60e51b81526004016101a990610ccd565b6001600160a01b0381166102d55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101a9565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b33610300610203565b6001600160a01b0316146103265760405162461bcd60e51b81526004016101a990610ccd565b610330828261063c565b5050565b600260008260008151811061034b5761034b610d02565b602002602001015160600151815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b031663a9059cbb338360008151811061039b5761039b610d02565b602002602001015160400151606001516040518363ffffffff1660e01b81526004016103dc9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156103fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041f9190610d18565b50336001600160a01b0316638b418713338460008151811061044357610443610d02565b60200260200101518460018151811061045e5761045e610d02565b602002602001015160e001516040518463ffffffff1660e01b815260040161048893929190610d35565b600060405180830381600087803b1580156104a257600080fd5b505af11580156104b6573d6000803e3d6000fd5b5050505060026000826002815181106104d1576104d1610d02565b602002602001015160600151815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b03166323b872dd33308460028151811061052257610522610d02565b60209081029190910101516040908101516060015190516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae9190610d18565b505050565b336105bc610203565b6001600160a01b0316146105e25760405162461bcd60e51b81526004016101a990610ccd565b610330828261066a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600090815260026020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b80518251146106d25760405162461bcd60e51b815260206004820152602e60248201527f7365744d61726b6574732066756e6374696f6e20696e666f726d6174696f6e2060448201526d0c2e4d2e8f240dad2e6dac2e8c6d60931b60648201526084016101a9565b60005b82518110156105ae5761071a8382815181106106f3576106f3610d02565b602002602001015183838151811061070d5761070d610d02565b602002602001015161063c565b61072381610da9565b90506106d5565b60006020828403121561073c57600080fd5b5035919050565b80356001600160a01b038116811461075a57600080fd5b919050565b60006020828403121561077157600080fd5b61077a82610743565b9392505050565b6000806040838503121561079457600080fd5b61079d83610743565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b03811182821017156107e4576107e46107ab565b60405290565b604080519081016001600160401b03811182821017156107e4576107e46107ab565b604051601f8201601f191681016001600160401b0381118282101715610834576108346107ab565b604052919050565b60006001600160401b03821115610855576108556107ab565b5060051b60200190565b80356009811061075a57600080fd5b801515811461087c57600080fd5b50565b6002811061087c57600080fd5b60006080828403121561089e57600080fd5b604051608081018181106001600160401b03821117156108c0576108c06107ab565b60405290508082356108d18161086e565b815260208301356108e18161087f565b602082015260408301356108f48161087f565b6040820152606092830135920191909152919050565b600082601f83011261091b57600080fd5b81356001600160401b03811115610934576109346107ab565b610947601f8201601f191660200161080c565b81815284602083860101111561095c57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261098a57600080fd5b8135602061099f61099a8361083c565b61080c565b82815260059290921b840181019181810190868411156109be57600080fd5b8286015b84811015610a985780356001600160401b03808211156109e25760008081fd5b90880190610160828b03601f19018113156109fd5760008081fd5b610a056107c1565b610a1088850161085f565b8152604080850135898301526060610a2a8e82880161088c565b8284015260e091508186013581840152506101008501356080830152610a536101208601610743565b60a083015261014085013560c0830152918401359183831115610a765760008081fd5b610a848d8a8588010161090a565b9082015286525050509183019183016109c2565b509695505050505050565b6000806040808486031215610ab757600080fd5b83356001600160401b0380821115610ace57600080fd5b818601915086601f830112610ae257600080fd5b81356020610af261099a8361083c565b82815260069290921b8401810191818101908a841115610b1157600080fd5b948201945b83861015610b585786868c031215610b2e5760008081fd5b610b366107ea565b610b3f87610743565b8152868401358482015282529486019490820190610b16565b97505087013593505080831115610b6e57600080fd5b5050610b7c85828601610979565b9150509250929050565b600082601f830112610b9757600080fd5b81356020610ba761099a8361083c565b82815260059290921b84018101918181019086841115610bc657600080fd5b8286015b84811015610a985780358352918301918301610bca565b60008060408385031215610bf457600080fd5b82356001600160401b0380821115610c0b57600080fd5b818501915085601f830112610c1f57600080fd5b81356020610c2f61099a8361083c565b82815260059290921b84018101918181019089841115610c4e57600080fd5b948201945b83861015610c7357610c6486610743565b82529482019490820190610c53565b96505086013592505080821115610c8957600080fd5b50610b7c85828601610b86565b6020808252601c908201527f4f776e61626c653a206e6f74206f776e65722063616e64696461746500000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610d2a57600080fd5b815161077a8161086e565b600060018060a01b03808616835260208186511681850152808601516040850152608060608501528451915081608085015260005b82811015610d865785810182015185820160a001528101610d6a565b5050600060a0828501015260a0601f19601f830116840101915050949350505050565b600060018201610dc957634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000813000a",
  "devdoc": {
    "author": "NFTfi",
    "details": "This contract is a mock of the dYdX flash loan system for testing purposes. It implements the ISoloMargin interface to mimic the behavior of dYdX flash loans on a local network.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Contract constructor that sets the ERC20 markets.",
        "params": {
          "_erc20s": "The address of the ERC20 tokens",
          "_marketIds": "The id of the markets"
        }
      },
      "getMarketTokenAddress(uint256)": {
        "details": "Returns the address of the ERC20 token. This mocks the function in the real dYdX contract which returns the address of the token for a given market id.",
        "params": {
          "": "*_marketId The id of the market (not used in this mock contract)."
        },
        "returns": {
          "_0": "The address of the ERC20 token."
        }
      },
      "operate((address,uint256)[],(uint8,uint256,(bool,uint8,uint8,uint256),uint256,uint256,address,uint256,bytes)[])": {
        "details": "Mocks a flash loan operation. It transfers the loan amount to the borrower, calls the function on the borrower's contract, and then transfers the repayment from the borrower.",
        "params": {
          "accountInfo": "Information about the account.",
          "actions": "Actions to be performed during the flash loan operation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "requestTransferOwnership(address)": {
        "details": "Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`). Can only be called by the current owner."
      },
      "setMarket(address,uint256)": {
        "details": "Updates the ERC20 token address.",
        "params": {
          "_erc20": "The new address of the ERC20 token."
        }
      }
    },
    "title": "MockDyDxFlashloan",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 412,
        "contract": "contracts/test/MockDyDxFlashloan.sol:MockDyDxFlashloan",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 414,
        "contract": "contracts/test/MockDyDxFlashloan.sol:MockDyDxFlashloan",
        "label": "_ownerCandidate",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 209,
        "contract": "contracts/test/MockDyDxFlashloan.sol:MockDyDxFlashloan",
        "label": "markets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}