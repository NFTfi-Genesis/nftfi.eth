{
  "address": "0xEFde1F2070CC1FfA305Af57a7D53bb384e8cBD82",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "partner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "revenueShareInBasisPoints",
          "type": "uint16"
        }
      ],
      "name": "PartnerRevenueShare",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_partner",
          "type": "address"
        }
      ],
      "name": "getPartnerPermit",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rejectTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwnerCandidate",
          "type": "address"
        }
      ],
      "name": "requestTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_partner",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_revenueShareInBasisPoints",
          "type": "uint16"
        }
      ],
      "name": "setPartnerRevenueShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xca7ed23b7205ddd9a44bbf93ce9c5ec04194ac4b519b86d6f5467f80d53cbcfb",
  "receipt": {
    "to": null,
    "from": "0x02e037F56728E947e92Af2c05baF7FeF387Ddd06",
    "contractAddress": "0xEFde1F2070CC1FfA305Af57a7D53bb384e8cBD82",
    "transactionIndex": 1,
    "gasUsed": "357221",
    "logsBloom": "0x
    "blockHash": "0x988874b248d11fdd7ded95f00df0a53c834ebed086f30ef39e653695f302ee9e",
    "transactionHash": "0xca7ed23b7205ddd9a44bbf93ce9c5ec04194ac4b519b86d6f5467f80d53cbcfb",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 4871452,
        "transactionHash": "0xca7ed23b7205ddd9a44bbf93ce9c5ec04194ac4b519b86d6f5467f80d53cbcfb",
        "address": "0xEFde1F2070CC1FfA305Af57a7D53bb384e8cBD82",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000beebcd47b8315b9ffc949318269a329aeb7d97b4"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x988874b248d11fdd7ded95f00df0a53c834ebed086f30ef39e653695f302ee9e"
      }
    ],
    "blockNumber": 4871452,
    "cumulativeGasUsed": "440497",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xbeEBCD47B8315B9fFC949318269A329AEb7D97b4"],
  "numDeployments": 1,
  "solcInputHash": "1a8fa01f7869bdb20e0c3fb0bc984936",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"revenueShareInBasisPoints\",\"type\":\"uint16\"}],\"name\":\"PartnerRevenueShare\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"getPartnerPermit\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rejectTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"requestTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_revenueShareInBasisPoints\",\"type\":\"uint16\"}],\"name\":\"setPartnerRevenueShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"NFTfi\",\"details\":\"Registry for partners permitted for reciving a revenue share. Each partner's address is associated with the percent of the admin fee shared.\",\"events\":{\"PartnerRevenueShare(address,uint16)\":{\"params\":{\"partner\":\"- The address of the partner.\",\"revenueShareInBasisPoints\":\"- The percent (measured in basis points) of the admin fee amount that will be taken as a revenue share for a the partner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_admin\":\"- Initial admin of this contract.\"}},\"getPartnerPermit(address)\":{\"params\":{\"_partner\":\"- The address of the partner.\"},\"returns\":{\"_0\":\"Returns the partner's revenue share\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"requestTransferOwnership(address)\":{\"details\":\"Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`). Can only be called by the current owner.\"},\"setPartnerRevenueShare(address,uint16)\":{\"params\":{\"_partner\":\"- The address of the partner.\",\"_revenueShareInBasisPoints\":\"- The percent (measured in basis points) of the admin fee amount that will be taken as a revenue share for a the partner.\"}}},\"title\":\"PermittedPartners\",\"version\":1},\"userdoc\":{\"events\":{\"PartnerRevenueShare(address,uint16)\":{\"notice\":\"This event is fired whenever the admin sets a partner's revenue share.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Sets the admin of the contract.\"},\"getPartnerPermit(address)\":{\"notice\":\"This function can be called by anyone to get the revenue share parcent associated with the partner.\"},\"setPartnerRevenueShare(address,uint16)\":{\"notice\":\"This function can be called by admins to change the revenue share status of a partner. This includes adding an partner to the revenue share list, removing it and updating the revenue share percent.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/permittedLists/PermittedPartners.sol\":\"PermittedPartners\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IPermittedPartners.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\ninterface IPermittedPartners {\\n    function getPartnerPermit(address _partner) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xbab9ab60580bc51fc177824a6a791c64b41d1f65d4cf44ea258d45d4f51aeb01\",\"license\":\"BUSL-1.1\"},\"contracts/permittedLists/PermittedPartners.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport {IPermittedPartners} from \\\"../interfaces/IPermittedPartners.sol\\\";\\n\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\n\\n/**\\n * @title  PermittedPartners\\n * @author NFTfi\\n * @dev Registry for partners permitted for reciving a revenue share.\\n * Each partner's address is associated with the percent of the admin fee shared.\\n */\\ncontract PermittedPartners is Ownable, IPermittedPartners {\\n    /* ******* */\\n    /* STORAGE */\\n    /* ******* */\\n\\n    uint256 public constant HUNDRED_PERCENT = 10000;\\n\\n    /**\\n     * @notice A mapping from a partner's address to the percent of the admin fee shared with them. A zero indicates\\n     * non-permitted.\\n     */\\n    mapping(address => uint16) private partnerRevenueShare;\\n\\n    /* ****** */\\n    /* EVENTS */\\n    /* ****** */\\n\\n    /**\\n     * @notice This event is fired whenever the admin sets a partner's revenue share.\\n     *\\n     * @param partner - The address of the partner.\\n     * @param revenueShareInBasisPoints - The percent (measured in basis points) of the admin fee amount that will be\\n     * taken as a revenue share for a the partner.\\n     */\\n    event PartnerRevenueShare(address indexed partner, uint16 revenueShareInBasisPoints);\\n\\n    /* *********** */\\n    /* CONSTRUCTOR */\\n    /* *********** */\\n\\n    /**\\n     * @notice Sets the admin of the contract.\\n     *\\n     * @param _admin - Initial admin of this contract.\\n     */\\n    constructor(address _admin) Ownable(_admin) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /* ********* */\\n    /* FUNCTIONS */\\n    /* ********* */\\n\\n    /**\\n     * @notice This function can be called by admins to change the revenue share status of a partner. This includes\\n     * adding an partner to the revenue share list, removing it and updating the revenue share percent.\\n     *\\n     * @param _partner - The address of the partner.\\n     * @param _revenueShareInBasisPoints - The percent (measured in basis points) of the admin fee amount that will be\\n     * taken as a revenue share for a the partner.\\n     */\\n    function setPartnerRevenueShare(address _partner, uint16 _revenueShareInBasisPoints) external onlyOwner {\\n        // solhint-disable-next-line custom-errors\\n        require(_partner != address(0), \\\"Partner is address zero\\\");\\n        // solhint-disable-next-line custom-errors\\n        require(_revenueShareInBasisPoints <= HUNDRED_PERCENT, \\\"Revenue share too big\\\");\\n        partnerRevenueShare[_partner] = _revenueShareInBasisPoints;\\n        emit PartnerRevenueShare(_partner, _revenueShareInBasisPoints);\\n    }\\n\\n    /**\\n     * @notice This function can be called by anyone to get the revenue share parcent associated with the partner.\\n     *\\n     * @param _partner - The address of the partner.\\n     *\\n     * @return Returns the partner's revenue share\\n     */\\n    function getPartnerPermit(address _partner) external view override returns (uint16) {\\n        return partnerRevenueShare[_partner];\\n    }\\n}\\n\",\"keccak256\":\"0x11285f775e8eb385d0da16bad2ac14d07e81e43f79232e30ec8aaa265cfae3b8\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * Modified version from openzeppelin/contracts/access/Ownable.sol that allows to\\n * initialize the owner using a parameter in the constructor\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    address private _ownerCandidate;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        // solhint-disable-next-line custom-errors\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /**\\n     * @dev Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`).\\n     * Can only be called by the current owner.\\n     */\\n    function requestTransferOwnership(address _newOwnerCandidate) public virtual onlyOwner {\\n        // solhint-disable-next-line custom-errors\\n        require(_newOwnerCandidate != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _ownerCandidate = _newOwnerCandidate;\\n    }\\n\\n    function acceptTransferOwnership() public virtual {\\n        // solhint-disable-next-line custom-errors\\n        require(_ownerCandidate == _msgSender(), \\\"Ownable: not owner candidate\\\");\\n        _setOwner(_ownerCandidate);\\n        delete _ownerCandidate;\\n    }\\n\\n    function cancelTransferOwnership() public virtual onlyOwner {\\n        delete _ownerCandidate;\\n    }\\n\\n    function rejectTransferOwnership() public virtual {\\n        // solhint-disable-next-line custom-errors\\n        require(_ownerCandidate == _msgSender(), \\\"Ownable: not owner candidate\\\");\\n        delete _ownerCandidate;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Sets the owner.\\n     */\\n    function _setOwner(address _newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(oldOwner, _newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x4f1dc29ae64fcd354c09865ae56d8a3612541ebfc9db9b87b7af6f18ca36cf65\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516105d13803806105d183398101604081905261002f91610090565b8061003981610040565b50506100c0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100a257600080fd5b81516001600160a01b03811681146100b957600080fd5b9392505050565b610502806100cf6000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c8063410ed2e51461007d5780635f992fdd146100c25780636ed93dd0146100cc5780637b371107146100e35780638da5cb5b146100eb57806392df8fe11461010657806392fede00146101195780639d6fa61814610121575b600080fd5b6100aa61008b366004610429565b6001600160a01b031660009081526002602052604090205461ffff1690565b60405161ffff90911681526020015b60405180910390f35b6100ca610134565b005b6100d561271081565b6040519081526020016100b9565b6100ca610179565b6000546040516001600160a01b0390911681526020016100b9565b6100ca61011436600461044b565b6101b8565b6100ca6102e2565b6100ca61012f366004610429565b61030c565b6001546001600160a01b031633146101675760405162461bcd60e51b815260040161015e90610489565b60405180910390fd5b600180546001600160a01b0319169055565b6001546001600160a01b031633146101a35760405162461bcd60e51b815260040161015e90610489565b600154610167906001600160a01b03166103bd565b6000546001600160a01b031633146101e25760405162461bcd60e51b815260040161015e906104c0565b6001600160a01b0382166102325760405162461bcd60e51b8152602060048201526017602482015276506172746e65722069732061646472657373207a65726f60481b604482015260640161015e565b6127108161ffff1611156102805760405162461bcd60e51b8152602060048201526015602482015274526576656e756520736861726520746f6f2062696760581b604482015260640161015e565b6001600160a01b038216600081815260026020908152604091829020805461ffff191661ffff861690811790915591519182527fd783e82274aa6b01921b08d2e05a8261d1c1fda099b201e77805f6e1f75279ab910160405180910390a25050565b6000546001600160a01b031633146101675760405162461bcd60e51b815260040161015e906104c0565b6000546001600160a01b031633146103365760405162461bcd60e51b815260040161015e906104c0565b6001600160a01b03811661039b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161015e565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461042457600080fd5b919050565b60006020828403121561043b57600080fd5b6104448261040d565b9392505050565b6000806040838503121561045e57600080fd5b6104678361040d565b9150602083013561ffff8116811461047e57600080fd5b809150509250929050565b6020808252601c908201527f4f776e61626c653a206e6f74206f776e65722063616e64696461746500000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100785760003560e01c8063410ed2e51461007d5780635f992fdd146100c25780636ed93dd0146100cc5780637b371107146100e35780638da5cb5b146100eb57806392df8fe11461010657806392fede00146101195780639d6fa61814610121575b600080fd5b6100aa61008b366004610429565b6001600160a01b031660009081526002602052604090205461ffff1690565b60405161ffff90911681526020015b60405180910390f35b6100ca610134565b005b6100d561271081565b6040519081526020016100b9565b6100ca610179565b6000546040516001600160a01b0390911681526020016100b9565b6100ca61011436600461044b565b6101b8565b6100ca6102e2565b6100ca61012f366004610429565b61030c565b6001546001600160a01b031633146101675760405162461bcd60e51b815260040161015e90610489565b60405180910390fd5b600180546001600160a01b0319169055565b6001546001600160a01b031633146101a35760405162461bcd60e51b815260040161015e90610489565b600154610167906001600160a01b03166103bd565b6000546001600160a01b031633146101e25760405162461bcd60e51b815260040161015e906104c0565b6001600160a01b0382166102325760405162461bcd60e51b8152602060048201526017602482015276506172746e65722069732061646472657373207a65726f60481b604482015260640161015e565b6127108161ffff1611156102805760405162461bcd60e51b8152602060048201526015602482015274526576656e756520736861726520746f6f2062696760581b604482015260640161015e565b6001600160a01b038216600081815260026020908152604091829020805461ffff191661ffff861690811790915591519182527fd783e82274aa6b01921b08d2e05a8261d1c1fda099b201e77805f6e1f75279ab910160405180910390a25050565b6000546001600160a01b031633146101675760405162461bcd60e51b815260040161015e906104c0565b6000546001600160a01b031633146103365760405162461bcd60e51b815260040161015e906104c0565b6001600160a01b03811661039b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161015e565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461042457600080fd5b919050565b60006020828403121561043b57600080fd5b6104448261040d565b9392505050565b6000806040838503121561045e57600080fd5b6104678361040d565b9150602083013561ffff8116811461047e57600080fd5b809150509250929050565b6020808252601c908201527f4f776e61626c653a206e6f74206f776e65722063616e64696461746500000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea164736f6c6343000813000a",
  "devdoc": {
    "author": "NFTfi",
    "details": "Registry for partners permitted for reciving a revenue share. Each partner's address is associated with the percent of the admin fee shared.",
    "events": {
      "PartnerRevenueShare(address,uint16)": {
        "params": {
          "partner": "- The address of the partner.",
          "revenueShareInBasisPoints": "- The percent (measured in basis points) of the admin fee amount that will be taken as a revenue share for a the partner."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_admin": "- Initial admin of this contract."
        }
      },
      "getPartnerPermit(address)": {
        "params": {
          "_partner": "- The address of the partner."
        },
        "returns": {
          "_0": "Returns the partner's revenue share"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "requestTransferOwnership(address)": {
        "details": "Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`). Can only be called by the current owner."
      },
      "setPartnerRevenueShare(address,uint16)": {
        "params": {
          "_partner": "- The address of the partner.",
          "_revenueShareInBasisPoints": "- The percent (measured in basis points) of the admin fee amount that will be taken as a revenue share for a the partner."
        }
      }
    },
    "title": "PermittedPartners",
    "version": 1
  },
  "userdoc": {
    "events": {
      "PartnerRevenueShare(address,uint16)": {
        "notice": "This event is fired whenever the admin sets a partner's revenue share."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Sets the admin of the contract."
      },
      "getPartnerPermit(address)": {
        "notice": "This function can be called by anyone to get the revenue share parcent associated with the partner."
      },
      "setPartnerRevenueShare(address,uint16)": {
        "notice": "This function can be called by admins to change the revenue share status of a partner. This includes adding an partner to the revenue share list, removing it and updating the revenue share percent."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23178,
        "contract": "contracts/permittedLists/PermittedPartners.sol:PermittedPartners",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23180,
        "contract": "contracts/permittedLists/PermittedPartners.sol:PermittedPartners",
        "label": "_ownerCandidate",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15008,
        "contract": "contracts/permittedLists/PermittedPartners.sol:PermittedPartners",
        "label": "partnerRevenueShare",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint16)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}
