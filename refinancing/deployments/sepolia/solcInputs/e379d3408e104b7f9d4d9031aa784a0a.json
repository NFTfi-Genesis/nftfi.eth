{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/refinancing/flashloan/IFlashloan.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.19;\n\n/**\n * @title IFlashloan\n * @author NFTfi\n * @dev This is an interface for the Flashloan contract.\n * It includes the definitions for data types and function used in the flashloan operations.\n */\ninterface IFlashloan {\n    /**\n     * @dev Enum representing the denomination of an asset.\n     * Assets can be denominated in Wei or Par.\n     */\n    enum AssetDenomination {\n        Wei,\n        Par\n    }\n\n    /**\n     * @dev Enum representing the reference of an asset amount.\n     * Assets can be referenced by a delta (change in value) or target (final value).\n     */\n    enum AssetReference {\n        Delta,\n        Target\n    }\n\n    /**\n     * @dev Enum representing the type of action to be performed.\n     * This can be any one among several options including Deposit, Withdraw, Transfer, etc.\n     */\n    enum ActionType {\n        Deposit,\n        Withdraw,\n        Transfer,\n        Buy,\n        Sell,\n        Trade,\n        Liquidate,\n        Vaporize,\n        Call\n    }\n\n    /**\n     * @dev Struct representing an asset amount for an action.\n     * It includes information about the sign (positive/negative),\n     * denomination (Wei/Par), reference (Delta/Target), and the value.\n     */\n    struct AssetAmount {\n        bool sign;\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n\n    /**\n     * @dev Struct representing an action.\n     * It includes information about the type of action, the accountId,\n     * the amount of the asset, market ids, address of the other party,\n     * the other account's id, and any additional data.\n     */\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountId;\n        AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountId;\n        bytes data;\n    }\n\n    /**\n     * @dev Struct representing the account information.\n     * It includes the owner's address and the account number.\n     */\n    struct AccountInfo {\n        address owner;\n        uint256 number;\n    }\n\n    /**\n     * @dev Function that is called after a flash loan operation.\n     * @param sender The address initiating the call.\n     * @param accountInfo Account related information.\n     * @param data The data passed in the call.\n     */\n    function callFunction(address sender, AccountInfo memory accountInfo, bytes memory data) external;\n}\n"
    },
    "contracts/refinancing/flashloan/ISoloMargin.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.19;\n\nimport {IFlashloan} from \"./IFlashloan.sol\";\n\n/**\n * @title ISoloMargin\n * @author NFTfi\n * @dev Interface for dYdX's SoloMargin contract.\n * It includes essential methods needed to interact with the SoloMargin contract.\n * These methods are used for initiating flash loans and getting token address of the market.\n */\ninterface ISoloMargin {\n    /**\n     * @dev Function to bundle multiple operations in a single transaction.\n     * The operations are executed atomically and the state is maintained to ensure protocol's solvency.\n     * @param accounts An array of AccountInfo objects, which contains the address and number of each account involved.\n     * @param actions An array of ActionArgs objects, representing the actions to be executed.\n     */\n    function operate(IFlashloan.AccountInfo[] memory accounts, IFlashloan.ActionArgs[] memory actions) external;\n\n    /**\n     * @dev Function to get the token address of the market based on the given marketId.\n     * @param marketId The ID of the market to get the token address for.\n     * @return Address of the token for the specified market.\n     */\n    function getMarketTokenAddress(uint256 marketId) external view returns (address);\n}\n"
    },
    "contracts/test/MockDyDxFlashloan.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.19;\n\nimport {ISoloMargin, IFlashloan} from \"../refinancing/flashloan/ISoloMargin.sol\";\nimport {Ownable} from \"../utils/Ownable.sol\";\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title MockDyDxFlashloan\n * @author NFTfi\n * @dev This contract is a mock of the dYdX flash loan system for testing purposes.\n * It implements the ISoloMargin interface to mimic the behavior of dYdX flash loans on a local network.\n */\ncontract MockDyDxFlashloan is ISoloMargin, Ownable {\n    mapping(uint256 => address) public markets;\n\n    /**\n     * @dev Contract constructor that sets the ERC20 markets.\n     * @param _erc20s The address of the ERC20 tokens\n     * @param _marketIds The id of the markets\n     */\n    constructor(address[] memory _erc20s, uint256[] memory _marketIds, address _admin) Ownable(_admin) {\n        _setMarkets(_erc20s, _marketIds);\n    }\n\n    /**\n     * @dev Updates the ERC20 token address.\n     * @param _erc20 The new address of the ERC20 token.\n     */\n    function setMarket(address _erc20, uint256 _marketId) public onlyOwner {\n        _setMarket(_erc20, _marketId);\n    }\n\n    function setMarkets(address[] memory _erc20s, uint256[] memory _marketIds) public onlyOwner {\n        _setMarkets(_erc20s, _marketIds);\n    }\n\n    /**\n     * @dev Updates the ERC20 token address.\n     * @param _erc20 The new address of the ERC20 token.\n     */\n    function _setMarket(address _erc20, uint256 _marketId) internal {\n        markets[_marketId] = _erc20;\n    }\n\n    function _setMarkets(address[] memory _erc20s, uint256[] memory _marketIds) internal {\n        // solhint-disable-next-line custom-errors\n        require(_erc20s.length == _marketIds.length, \"setMarkets function information arity mismatch\");\n        for (uint256 i; i < _erc20s.length; ++i) {\n            _setMarket(_erc20s[i], _marketIds[i]);\n        }\n    }\n\n    /**\n     * @dev Mocks a flash loan operation. It transfers the loan amount to the borrower,\n     * calls the function on the borrower's contract, and then transfers the repayment from the borrower.\n     * @param accountInfo Information about the account.\n     * @param actions Actions to be performed during the flash loan operation.\n     */\n    function operate(\n        IFlashloan.AccountInfo[] memory accountInfo,\n        IFlashloan.ActionArgs[] memory actions\n    ) external override {\n        IERC20(markets[actions[0].primaryMarketId]).transfer(msg.sender, actions[0].amount.value);\n        IFlashloan(msg.sender).callFunction(msg.sender, accountInfo[0], actions[1].data);\n        IERC20(markets[actions[2].primaryMarketId]).transferFrom(msg.sender, address(this), actions[2].amount.value);\n    }\n\n    /**\n     * @dev Returns the address of the ERC20 token. This mocks the function in the real dYdX contract which\n     * returns the address of the token for a given market id.\n     * @param *_marketId The id of the market (not used in this mock contract).\n     * @return The address of the ERC20 token.\n     */\n    function getMarketTokenAddress(uint256 _marketId) external view override returns (address) {\n        return markets[_marketId];\n    }\n}\n"
    },
    "contracts/utils/Ownable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.19;\n\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * Modified version from openzeppelin/contracts/access/Ownable.sol that allows to\n * initialize the owner using a parameter in the constructor\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    address private _ownerCandidate;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        // solhint-disable-next-line custom-errors\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor(address _initialOwner) {\n        _setOwner(_initialOwner);\n    }\n\n    /**\n     * @dev Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`).\n     * Can only be called by the current owner.\n     */\n    function requestTransferOwnership(address _newOwnerCandidate) public virtual onlyOwner {\n        // solhint-disable-next-line custom-errors\n        require(_newOwnerCandidate != address(0), \"Ownable: new owner is the zero address\");\n        _ownerCandidate = _newOwnerCandidate;\n    }\n\n    function acceptTransferOwnership() public virtual {\n        // solhint-disable-next-line custom-errors\n        require(_ownerCandidate == _msgSender(), \"Ownable: not owner candidate\");\n        _setOwner(_ownerCandidate);\n        delete _ownerCandidate;\n    }\n\n    function cancelTransferOwnership() public virtual onlyOwner {\n        delete _ownerCandidate;\n    }\n\n    function rejectTransferOwnership() public virtual {\n        // solhint-disable-next-line custom-errors\n        require(_ownerCandidate == _msgSender(), \"Ownable: not owner candidate\");\n        delete _ownerCandidate;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Sets the owner.\n     */\n    function _setOwner(address _newOwner) internal {\n        address oldOwner = _owner;\n        _owner = _newOwner;\n        emit OwnershipTransferred(oldOwner, _newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}