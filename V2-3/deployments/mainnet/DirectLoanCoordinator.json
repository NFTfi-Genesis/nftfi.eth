{
  "address": "0x329E090aCE410aC8D86f1f0c2a13486884E7072a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftfiHub",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_loanTypes",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_loanContracts",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loanType",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "loanContract",
          "type": "address"
        }
      ],
      "name": "TypeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "loanId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "smartNftId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "loanContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IDirectLoanCoordinator.StatusType",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "UpdateStatus",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_loanType",
          "type": "bytes32"
        }
      ],
      "name": "getContractFromType",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        }
      ],
      "name": "getLoanData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "loanContract",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "smartNftId",
              "type": "uint64"
            },
            {
              "internalType": "enum IDirectLoanCoordinator.StatusType",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct IDirectLoanCoordinator.Loan",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "name": "getTypeFromContract",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "contract INftfiHub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_promissoryNoteToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_obligationReceiptToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "name": "isValidLoanId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "validity",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "mintObligationReceipt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "obligationReceiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "promissoryNoteToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_loanType",
          "type": "bytes32"
        }
      ],
      "name": "registerLoan",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_loanType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "name": "registerLoanType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_loanTypes",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_loanContracts",
          "type": "address[]"
        }
      ],
      "name": "registerLoanTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rejectTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwnerCandidate",
          "type": "address"
        }
      ],
      "name": "requestTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        }
      ],
      "name": "resetSmartNfts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "_repaid",
          "type": "bool"
        }
      ],
      "name": "resolveLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smartNftIdCounter",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNumLoans",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc3f2ec1431d3be19d8de7fc7379929edca99c2d7ee01695411141197c1749c5c",
  "receipt": {
    "to": null,
    "from": "0x169ee6762811ab9BC59A609331bc721d9f0CD56c",
    "contractAddress": "0x329E090aCE410aC8D86f1f0c2a13486884E7072a",
    "transactionIndex": 122,
    "gasUsed": "1799922",
    "logsBloom": "0x
    "blockHash": "0xbe3dc4309e0630aea365d4b8ceff8afd8571f31cd79ff674ee3d0f5c0d7c4fb8",
    "transactionHash": "0xc3f2ec1431d3be19d8de7fc7379929edca99c2d7ee01695411141197c1749c5c",
    "logs": [
      {
        "transactionIndex": 122,
        "blockNumber": 18220514,
        "transactionHash": "0xc3f2ec1431d3be19d8de7fc7379929edca99c2d7ee01695411141197c1749c5c",
        "address": "0x329E090aCE410aC8D86f1f0c2a13486884E7072a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000169ee6762811ab9bc59a609331bc721d9f0cd56c"
        ],
        "data": "0x",
        "logIndex": 268,
        "blockHash": "0xbe3dc4309e0630aea365d4b8ceff8afd8571f31cd79ff674ee3d0f5c0d7c4fb8"
      },
      {
        "transactionIndex": 122,
        "blockNumber": 18220514,
        "transactionHash": "0xc3f2ec1431d3be19d8de7fc7379929edca99c2d7ee01695411141197c1749c5c",
        "address": "0x329E090aCE410aC8D86f1f0c2a13486884E7072a",
        "topics": [
          "0x22be69269c1f7d73e73dcb25b710dd88c7aa1cf374c16d945def98df2107c2f8",
          "0x4449524543545f4c4f414e5f46495845445f4f46464552000000000000000000",
          "0x000000000000000000000000d0a40eb7fd94ee97102ba8e9342243a2b2e22207"
        ],
        "data": "0x",
        "logIndex": 269,
        "blockHash": "0xbe3dc4309e0630aea365d4b8ceff8afd8571f31cd79ff674ee3d0f5c0d7c4fb8"
      },
      {
        "transactionIndex": 122,
        "blockNumber": 18220514,
        "transactionHash": "0xc3f2ec1431d3be19d8de7fc7379929edca99c2d7ee01695411141197c1749c5c",
        "address": "0x329E090aCE410aC8D86f1f0c2a13486884E7072a",
        "topics": [
          "0x22be69269c1f7d73e73dcb25b710dd88c7aa1cf374c16d945def98df2107c2f8",
          "0x4449524543545f4c4f414e5f46495845445f434f4c4c454354494f4e00000000",
          "0x000000000000000000000000d0c6e59b50c32530c627107f50acc71958c4341f"
        ],
        "data": "0x",
        "logIndex": 270,
        "blockHash": "0xbe3dc4309e0630aea365d4b8ceff8afd8571f31cd79ff674ee3d0f5c0d7c4fb8"
      }
    ],
    "blockNumber": 18220514,
    "cumulativeGasUsed": "10636628",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4deAcdDEF0E6ada9a35e360126181C75fA7F8EdA",
    "0x169ee6762811ab9BC59A609331bc721d9f0CD56c",
    [
      "DIRECT_LOAN_FIXED_OFFER",
      "DIRECT_LOAN_FIXED_COLLECTION"
    ],
    [
      "0xd0a40eB7FD94eE97102BA8e9342243A2b2E22207",
      "0xD0C6e59B50C32530C627107F50Acc71958C4341F"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "103c7252f85cc80233118bf16e4e3c05",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftfiHub\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_loanTypes\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_loanContracts\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loanContract\",\"type\":\"address\"}],\"name\":\"TypeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"loanId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"smartNftId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loanContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IDirectLoanCoordinator.StatusType\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"UpdateStatus\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_loanType\",\"type\":\"bytes32\"}],\"name\":\"getContractFromType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"}],\"name\":\"getLoanData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanContract\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"smartNftId\",\"type\":\"uint64\"},{\"internalType\":\"enum IDirectLoanCoordinator.StatusType\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IDirectLoanCoordinator.Loan\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"getTypeFromContract\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract INftfiHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_promissoryNoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_obligationReceiptToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"isValidLoanId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"validity\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"mintObligationReceipt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"obligationReceiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promissoryNoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_loanType\",\"type\":\"bytes32\"}],\"name\":\"registerLoan\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_loanType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"registerLoanType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_loanTypes\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_loanContracts\",\"type\":\"address[]\"}],\"name\":\"registerLoanTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rejectTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"requestTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"resetSmartNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_repaid\",\"type\":\"bool\"}],\"name\":\"resolveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartNftIdCounter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumLoans\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"NFTfi\",\"events\":{\"TypeUpdated(bytes32,address)\":{\"params\":{\"loanContract\":\"- Address of the loan type contract.\",\"loanType\":\"- Loan type represented by keccak256('loan type').\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_admin\":\"- Initial admin of this contract.\",\"_loanContracts\":\"- The addresses of each wrapper contract that implements the loan type's behaviour.\",\"_loanTypes\":\"- Loan types represented by keccak256('loan type').\",\"_nftfiHub\":\"- Address of the NftfiHub contract\"}},\"getContractFromType(bytes32)\":{\"params\":{\"_loanType\":\"- The loan type, e.g. bytes32(\\\"DIRECT_LOAN_FIXED\\\"), or bytes32(\\\"DIRECT_LOAN_PRO_RATED\\\").\"}},\"getLoanData(uint32)\":{\"details\":\"Returns loan's data for a given id.\",\"params\":{\"_loanId\":\"- Id of the loan\"}},\"getTypeFromContract(address)\":{\"params\":{\"_loanContract\":\"- The loan contract\"}},\"initialize(address,address)\":{\"details\":\"Sets `promissoryNoteToken` and `obligationReceiptToken`. It can be executed once by the deployer.\",\"params\":{\"_obligationReceiptToken\":\"- Obligaiton Recipt Token address\",\"_promissoryNoteToken\":\"- Promissory Note Token address\"}},\"isValidLoanId(uint32,address)\":{\"details\":\"checks if the given id is valid for the given loan contract address\",\"params\":{\"_loanContract\":\"- address og the loan contract\",\"_loanId\":\"- Id of the loan\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerLoan(address,bytes32)\":{\"details\":\"This is called by the LoanType beginning the new loan. It initialize the new loan data, mints both PromissoryNote and ObligationReceipt SmartNft's and returns the new loan id.\",\"params\":{\"_lender\":\"- Address of the lender\",\"_loanType\":\"- The type of the loan\"}},\"registerLoanType(string,address)\":{\"params\":{\"_loanContract\":\"- The address of the wrapper contract that implements the loan type's behaviour.\",\"_loanType\":\"- Loan type represented by 'loan type'.\"}},\"registerLoanTypes(string[],address[])\":{\"params\":{\"_loanContracts\":\"- The addresses of each wrapper contract that implements the loan type's behaviour.\",\"_loanTypes\":\"- Loan types represented by 'loan type'.\"}},\"requestTransferOwnership(address)\":{\"details\":\"Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`). Can only be called by the current owner.\"},\"resolveLoan(uint32,bool)\":{\"details\":\"This is called by the LoanType who created the loan, when a loan is resolved whether by paying back or liquidating the loan. It sets the loan as `RESOLVED` and burns both PromossoryNote and ObligationReceipt SmartNft's.\",\"params\":{\"_loanId\":\"- Id of the loan\"}}},\"stateVariables\":{\"contractTypes\":{\"details\":\"reverse mapping of loanTypes - for each contract address, records the associated loan type\"},\"typeContracts\":{\"details\":\"For each loan type, records the address of the contract that implements the type\"}},\"title\":\"DirectLoanCoordinator\",\"version\":1},\"userdoc\":{\"events\":{\"TypeUpdated(bytes32,address)\":{\"notice\":\"This event is fired whenever the admins register a loan type.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Sets the admin of the contract. Initializes `contractTypes` with a batch of loan types. Sets `NftfiHub`.\"},\"getContractFromType(bytes32)\":{\"notice\":\"This function can be called by anyone to get the contract address that implements the given loan type.\"},\"getTypeFromContract(address)\":{\"notice\":\"This function can be called by anyone to get the loan type of the given contract address.\"},\"registerLoanType(string,address)\":{\"notice\":\"Set or update the contract address that implements the given Loan Type. Set address(0) for a loan type for un-register such type.\"},\"registerLoanTypes(string[],address[])\":{\"notice\":\"Batch set or update the contract addresses that implement the given batch Loan Type. Set address(0) for a loan type for un-register such type.\"},\"totalNumLoans()\":{\"notice\":\"A continuously increasing counter that simultaneously allows every loan to have a unique ID and provides a running count of how many loans have been started by this contract.\"}},\"notice\":\"This contract is in charge of coordinating the creation, disctubution and desctruction of the SmartNfts related to a loan, the Promossory Note and Obligaiton Receipt.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/loans/direct/DirectLoanCoordinator.sol\":\"DirectLoanCoordinator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectLoanCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IDirectLoanCoordinator\\n * @author NFTfi\\n * @dev DirectLoanCoordinator interface.\\n */\\ninterface IDirectLoanCoordinator {\\n    enum StatusType {\\n        NOT_EXISTS,\\n        NEW,\\n        REPAID,\\n        LIQUIDATED\\n    }\\n\\n    /**\\n     * @notice This struct contains data related to a loan\\n     *\\n     * @param smartNftId - The id of both the promissory note and obligation receipt.\\n     * @param status - The status in which the loan currently is.\\n     * @param loanContract - Address of the LoanType contract that created the loan.\\n     */\\n    struct Loan {\\n        address loanContract;\\n        uint64 smartNftId;\\n        StatusType status;\\n    }\\n\\n    function registerLoan(address _lender, bytes32 _loanType) external returns (uint32);\\n\\n    function resetSmartNfts(uint32 _loanId, address _borrower) external;\\n\\n    function mintObligationReceipt(uint32 _loanId, address _borrower) external;\\n\\n    function resolveLoan(uint32 _loanId, bool liquidated) external;\\n\\n    function promissoryNoteToken() external view returns (address);\\n\\n    function obligationReceiptToken() external view returns (address);\\n\\n    function getLoanData(uint32 _loanId) external view returns (Loan memory);\\n\\n    function isValidLoanId(uint32 _loanId, address _loanContract) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9c5d608658aa466d6c6e33ddb3b197df12610e4c4b5bfd5b5d477fb5bff9018a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INftfiHub.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title INftfiHub\\n * @author NFTfi\\n * @dev NftfiHub interface\\n */\\ninterface INftfiHub {\\n    function setContract(string calldata _contractKey, address _contractAddress) external;\\n\\n    function getContract(bytes32 _contractKey) external view returns (address);\\n}\\n\",\"keccak256\":\"0x65320571d7049eefd4bfd6dcff48b752a4a01c56a23ae7acf0f3b7183b9b08db\",\"license\":\"BUSL-1.1\"},\"contracts/loans/direct/DirectLoanCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../smartNft/SmartNft.sol\\\";\\nimport \\\"../../interfaces/IDirectLoanCoordinator.sol\\\";\\nimport \\\"../../interfaces/INftfiHub.sol\\\";\\nimport \\\"../../utils/Ownable.sol\\\";\\nimport \\\"../../utils/ContractKeys.sol\\\";\\n\\n/**\\n * @title  DirectLoanCoordinator\\n * @author NFTfi\\n * @notice This contract is in charge of coordinating the creation, disctubution and desctruction of the SmartNfts\\n * related to a loan, the Promossory Note and Obligaiton Receipt.\\n */\\ncontract DirectLoanCoordinator is IDirectLoanCoordinator, Ownable {\\n    /* ******* */\\n    /* STORAGE */\\n    /* ******* */\\n\\n    INftfiHub public immutable hub;\\n\\n    /**\\n     * @dev For each loan type, records the address of the contract that implements the type\\n     */\\n    mapping(bytes32 => address) private typeContracts;\\n    /**\\n     * @dev reverse mapping of loanTypes - for each contract address, records the associated loan type\\n     */\\n    mapping(address => bytes32) private contractTypes;\\n\\n    /**\\n     * @notice A continuously increasing counter that simultaneously allows every loan to have a unique ID and provides\\n     * a running count of how many loans have been started by this contract.\\n     */\\n    uint32 public totalNumLoans = 0;\\n\\n    uint32 public smartNftIdCounter = 0;\\n\\n    // The address that deployed this contract\\n    address private immutable _deployer;\\n    bool private _initialized = false;\\n\\n    mapping(uint32 => Loan) private loans;\\n\\n    address public override promissoryNoteToken;\\n    address public override obligationReceiptToken;\\n\\n    /* ****** */\\n    /* EVENTS */\\n    /* ****** */\\n\\n    event UpdateStatus(\\n        uint32 indexed loanId,\\n        uint64 indexed smartNftId,\\n        address indexed loanContract,\\n        StatusType newStatus\\n    );\\n\\n    /**\\n     * @notice This event is fired whenever the admins register a loan type.\\n     *\\n     * @param loanType - Loan type represented by keccak256('loan type').\\n     * @param loanContract - Address of the loan type contract.\\n     */\\n    event TypeUpdated(bytes32 indexed loanType, address indexed loanContract);\\n\\n    /**\\n     * @dev Function using this modifier can only be executed after this contract is initialized\\n     *\\n     */\\n    modifier onlyInitialized() {\\n        require(_initialized, \\\"not initialized\\\");\\n\\n        _;\\n    }\\n\\n    /* *********** */\\n    /* CONSTRUCTOR */\\n    /* *********** */\\n\\n    /**\\n     * @notice Sets the admin of the contract.\\n     * Initializes `contractTypes` with a batch of loan types. Sets `NftfiHub`.\\n     *\\n     * @param  _nftfiHub - Address of the NftfiHub contract\\n     * @param _admin - Initial admin of this contract.\\n     * @param _loanTypes - Loan types represented by keccak256('loan type').\\n     * @param _loanContracts - The addresses of each wrapper contract that implements the loan type's behaviour.\\n     */\\n    constructor(\\n        address _nftfiHub,\\n        address _admin,\\n        string[] memory _loanTypes,\\n        address[] memory _loanContracts\\n    ) Ownable(_admin) {\\n        hub = INftfiHub(_nftfiHub);\\n        _deployer = msg.sender;\\n        _registerLoanTypes(_loanTypes, _loanContracts);\\n    }\\n\\n    /**\\n     * @dev Sets `promissoryNoteToken` and `obligationReceiptToken`.\\n     * It can be executed once by the deployer.\\n     *\\n     * @param  _promissoryNoteToken - Promissory Note Token address\\n     * @param  _obligationReceiptToken - Obligaiton Recipt Token address\\n     */\\n    function initialize(address _promissoryNoteToken, address _obligationReceiptToken) external {\\n        require(msg.sender == _deployer, \\\"only deployer\\\");\\n        require(!_initialized, \\\"already initialized\\\");\\n        require(_promissoryNoteToken != address(0), \\\"promissoryNoteToken is zero\\\");\\n        require(_obligationReceiptToken != address(0), \\\"obligationReceiptToken is zero\\\");\\n\\n        _initialized = true;\\n        promissoryNoteToken = _promissoryNoteToken;\\n        obligationReceiptToken = _obligationReceiptToken;\\n    }\\n\\n    /**\\n     * @dev This is called by the LoanType beginning the new loan.\\n     * It initialize the new loan data, mints both PromissoryNote and ObligationReceipt SmartNft's and returns the\\n     * new loan id.\\n     *\\n     * @param _lender - Address of the lender\\n     * @param _loanType - The type of the loan\\n     */\\n    function registerLoan(address _lender, bytes32 _loanType) external override onlyInitialized returns (uint32) {\\n        address loanContract = msg.sender;\\n\\n        require(getContractFromType(_loanType) == loanContract, \\\"Caller must be registered for loan type\\\");\\n\\n        // (loanIds start at 1)\\n        totalNumLoans += 1;\\n        smartNftIdCounter += 1;\\n\\n        uint64 smartNftId = uint64(uint256(keccak256(abi.encodePacked(address(this), smartNftIdCounter))));\\n\\n        Loan memory newLoan = Loan({status: StatusType.NEW, loanContract: loanContract, smartNftId: smartNftId});\\n\\n        // Issue an ERC721 promissory note to the lender that gives them the\\n        // right to either the principal-plus-interest or the collateral.\\n        SmartNft(promissoryNoteToken).mint(_lender, smartNftId, abi.encode(totalNumLoans));\\n\\n        loans[totalNumLoans] = newLoan;\\n\\n        emit UpdateStatus(totalNumLoans, smartNftId, loanContract, StatusType.NEW);\\n\\n        return totalNumLoans;\\n    }\\n\\n    function mintObligationReceipt(uint32 _loanId, address _borrower) external override onlyInitialized {\\n        address loanContract = msg.sender;\\n\\n        require(getTypeFromContract(loanContract) != bytes32(0), \\\"Caller must a be registered loan type\\\");\\n\\n        uint64 smartNftId = loans[_loanId].smartNftId;\\n        require(smartNftId != 0, \\\"loan doesn't exist\\\");\\n        require(SmartNft(promissoryNoteToken).exists(smartNftId), \\\"Promissory note should exist\\\");\\n        require(!SmartNft(obligationReceiptToken).exists(smartNftId), \\\"Obligation r shouldn't exist\\\");\\n\\n        // Issue an ERC721 obligation receipt to the borrower that gives them the\\n        // right to pay back the loan and get the collateral back.\\n        SmartNft(obligationReceiptToken).mint(_borrower, smartNftId, abi.encode(_loanId));\\n    }\\n\\n    function resetSmartNfts(uint32 _loanId, address _lender) external override onlyInitialized {\\n        address loanContract = msg.sender;\\n        require(getTypeFromContract(loanContract) != bytes32(0), \\\"Caller must a be registered loan type\\\");\\n\\n        uint64 oldSmartNftId = loans[_loanId].smartNftId;\\n        require(oldSmartNftId != 0, \\\"loan doesn't exist\\\");\\n        require(SmartNft(promissoryNoteToken).exists(oldSmartNftId), \\\"Promissory note should exist\\\");\\n\\n        SmartNft(promissoryNoteToken).burn(oldSmartNftId);\\n\\n        // (loanIds start at 1)\\n        smartNftIdCounter += 1;\\n        uint64 newSmartNftId = uint64(uint256(keccak256(abi.encodePacked(address(this), smartNftIdCounter))));\\n        SmartNft(promissoryNoteToken).mint(_lender, newSmartNftId, abi.encode(_loanId));\\n        loans[_loanId].smartNftId = newSmartNftId;\\n\\n        if (SmartNft(obligationReceiptToken).exists(oldSmartNftId)) {\\n            SmartNft(obligationReceiptToken).burn(oldSmartNftId);\\n        }\\n    }\\n\\n    /**\\n     * @dev This is called by the LoanType who created the loan, when a loan is resolved whether by paying back or\\n     * liquidating the loan.\\n     * It sets the loan as `RESOLVED` and burns both PromossoryNote and ObligationReceipt SmartNft's.\\n     *\\n     * @param _loanId - Id of the loan\\n     */\\n    function resolveLoan(uint32 _loanId, bool _repaid) external override onlyInitialized {\\n        Loan storage loan = loans[_loanId];\\n        require(loan.status == StatusType.NEW, \\\"Loan status must be New\\\");\\n        require(loan.loanContract == msg.sender, \\\"Not the same Contract that registered Loan\\\");\\n\\n        if (_repaid) {\\n            loan.status = StatusType.REPAID;\\n        } else {\\n            loan.status = StatusType.LIQUIDATED;\\n        }\\n\\n        SmartNft(promissoryNoteToken).burn(loan.smartNftId);\\n        if (SmartNft(obligationReceiptToken).exists(loan.smartNftId)) {\\n            SmartNft(obligationReceiptToken).burn(loan.smartNftId);\\n        }\\n\\n        emit UpdateStatus(_loanId, loan.smartNftId, msg.sender, loan.status);\\n    }\\n\\n    /**\\n     * @dev Returns loan's data for a given id.\\n     *\\n     * @param _loanId - Id of the loan\\n     */\\n    function getLoanData(uint32 _loanId) external view override returns (Loan memory) {\\n        return loans[_loanId];\\n    }\\n\\n    /**\\n     * @dev checks if the given id is valid for the given loan contract address\\n     * @param _loanId - Id of the loan\\n     * @param _loanContract - address og the loan contract\\n     */\\n    function isValidLoanId(uint32 _loanId, address _loanContract) external view override returns (bool validity) {\\n        validity = loans[_loanId].loanContract == _loanContract;\\n    }\\n\\n    /**\\n     * @notice  Set or update the contract address that implements the given Loan Type.\\n     * Set address(0) for a loan type for un-register such type.\\n     *\\n     * @param _loanType - Loan type represented by 'loan type'.\\n     * @param _loanContract - The address of the wrapper contract that implements the loan type's behaviour.\\n     */\\n    function registerLoanType(string memory _loanType, address _loanContract) external onlyOwner {\\n        _registerLoanType(_loanType, _loanContract);\\n    }\\n\\n    /**\\n     * @notice  Batch set or update the contract addresses that implement the given batch Loan Type.\\n     * Set address(0) for a loan type for un-register such type.\\n     *\\n     * @param _loanTypes - Loan types represented by 'loan type'.\\n     * @param _loanContracts - The addresses of each wrapper contract that implements the loan type's behaviour.\\n     */\\n    function registerLoanTypes(string[] memory _loanTypes, address[] memory _loanContracts) external onlyOwner {\\n        _registerLoanTypes(_loanTypes, _loanContracts);\\n    }\\n\\n    /**\\n     * @notice This function can be called by anyone to get the contract address that implements the given loan type.\\n     *\\n     * @param  _loanType - The loan type, e.g. bytes32(\\\"DIRECT_LOAN_FIXED\\\"), or bytes32(\\\"DIRECT_LOAN_PRO_RATED\\\").\\n     */\\n    function getContractFromType(bytes32 _loanType) public view returns (address) {\\n        return typeContracts[_loanType];\\n    }\\n\\n    /**\\n     * @notice This function can be called by anyone to get the loan type of the given contract address.\\n     *\\n     * @param  _loanContract - The loan contract\\n     */\\n    function getTypeFromContract(address _loanContract) public view returns (bytes32) {\\n        return contractTypes[_loanContract];\\n    }\\n\\n    /**\\n     * @notice  Set or update the contract address that implements the given Loan Type.\\n     * Set address(0) for a loan type for un-register such type.\\n     *\\n     * @param _loanType - Loan type represented by 'loan type').\\n     * @param _loanContract - The address of the wrapper contract that implements the loan type's behaviour.\\n     */\\n    function _registerLoanType(string memory _loanType, address _loanContract) internal {\\n        require(bytes(_loanType).length != 0, \\\"loanType is empty\\\");\\n        bytes32 loanTypeKey = ContractKeys.getIdFromStringKey(_loanType);\\n\\n        typeContracts[loanTypeKey] = _loanContract;\\n        contractTypes[_loanContract] = loanTypeKey;\\n\\n        emit TypeUpdated(loanTypeKey, _loanContract);\\n    }\\n\\n    /**\\n     * @notice  Batch set or update the contract addresses that implement the given batch Loan Type.\\n     * Set address(0) for a loan type for un-register such type.\\n     *\\n     * @param _loanTypes - Loan types represented by keccak256('loan type').\\n     * @param _loanContracts - The addresses of each wrapper contract that implements the loan type's behaviour.\\n     */\\n    function _registerLoanTypes(string[] memory _loanTypes, address[] memory _loanContracts) internal {\\n        require(_loanTypes.length == _loanContracts.length, \\\"function information arity mismatch\\\");\\n\\n        for (uint256 i; i < _loanTypes.length; ++i) {\\n            _registerLoanType(_loanTypes[i], _loanContracts[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ee863880e77f973ceea2b0f3dfa0e7ce51a1ea228af6245b2c2459282c75e29\",\"license\":\"BUSL-1.1\"},\"contracts/smartNft/SmartNft.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../utils/ContractKeys.sol\\\";\\nimport \\\"../interfaces/INftfiHub.sol\\\";\\n\\n/**\\n * @title SmartNft\\n * @author NFTfi\\n * @dev An ERC721 token which represents a very basic implementation of the NFTfi V2 SmartNFT.\\n */\\ncontract SmartNft is ERC721, AccessControl {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    /**\\n     * @dev This struct contains data needed to find the loan linked to a SmartNft.\\n     */\\n    struct Loan {\\n        address loanCoordinator;\\n        uint256 loanId;\\n    }\\n\\n    /* ******* */\\n    /* STORAGE */\\n    /* ******* */\\n\\n    bytes32 public constant LOAN_COORDINATOR_ROLE = keccak256(\\\"LOAN_COORDINATOR_ROLE\\\");\\n    bytes32 public constant BASE_URI_ROLE = keccak256(\\\"BASE_URI_ROLE\\\");\\n\\n    INftfiHub public immutable hub;\\n\\n    // smartNftId => Loan\\n    mapping(uint256 => Loan) public loans;\\n\\n    string public baseURI;\\n\\n    /**\\n     * @dev Grants the contract the default admin role to `_admin`.\\n     * Grants LOAN_COORDINATOR_ROLE to `_loanCoordinator`.\\n     *\\n     * @param _admin - Account to set as the admin of roles\\n     * @param _nftfiHub - Address of the NftfiHub contract\\n     * @param _loanCoordinator - Initial loan coordinator\\n     * @param _name - Name for the SmarNFT\\n     * @param _symbol - Symbol for the SmarNFT\\n     * @param _customBaseURI - Base URI for the SmarNFT\\n     */\\n    constructor(\\n        address _admin,\\n        address _nftfiHub,\\n        address _loanCoordinator,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _customBaseURI\\n    ) ERC721(_name, _symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _setupRole(BASE_URI_ROLE, _admin);\\n        _setupRole(LOAN_COORDINATOR_ROLE, _loanCoordinator);\\n        _setBaseURI(_customBaseURI);\\n        hub = INftfiHub(_nftfiHub);\\n    }\\n\\n    /**\\n     * @dev Grants LOAN_COORDINATOR_ROLE to `_account`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function setLoanCoordinator(address _account) external {\\n        grantRole(LOAN_COORDINATOR_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev Mints a new token with `_tokenId` and assigne to `_to`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have `LOAN_COORDINATOR_ROLE` role.\\n     *\\n     * @param _to The address reciving the SmartNft\\n     * @param _tokenId The id of the new SmartNft\\n     * @param _data Up to the first 32 bytes contains an integer which represents the loanId linked to the SmartNft\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external onlyRole(LOAN_COORDINATOR_ROLE) {\\n        require(_data.length > 0, \\\"data must contain loanId\\\");\\n        uint256 loanId = abi.decode(_data, (uint256));\\n        loans[_tokenId] = Loan({loanCoordinator: msg.sender, loanId: loanId});\\n        _safeMint(_to, _tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Burns `_tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have `LOAN_COORDINATOR_ROLE` role.\\n     */\\n    function burn(uint256 _tokenId) external onlyRole(LOAN_COORDINATOR_ROLE) {\\n        _burn(_tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets baseURI.\\n     * @param _customBaseURI - Base URI for the SmarNFT\\n     */\\n    function setBaseURI(string memory _customBaseURI) external onlyRole(BASE_URI_ROLE) {\\n        _setBaseURI(_customBaseURI);\\n    }\\n\\n    function exists(uint256 _tokenId) external view returns (bool) {\\n        return _exists(_tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC721, AccessControl) returns (bool) {\\n        return super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @dev Sets baseURI.\\n     */\\n    function _setBaseURI(string memory _customBaseURI) internal virtual {\\n        baseURI = bytes(_customBaseURI).length > 0\\n            ? string(abi.encodePacked(_customBaseURI, _getChainID().toString(), \\\"/\\\"))\\n            : \\\"\\\";\\n    }\\n\\n    /** @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`.\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @dev This function gets the current chain ID.\\n     */\\n    function _getChainID() internal view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\\n\",\"keccak256\":\"0xab481d8d36946ffb02296d908a80ed85f48558222046bbf114bd22e3272f51ba\",\"license\":\"BUSL-1.1\"},\"contracts/utils/ContractKeys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title ContractKeys\\n * @author NFTfi\\n * @dev Common library for contract keys\\n */\\nlibrary ContractKeys {\\n    bytes32 public constant PERMITTED_ERC20S = bytes32(\\\"PERMITTED_ERC20S\\\");\\n    bytes32 public constant PERMITTED_NFTS = bytes32(\\\"PERMITTED_NFTS\\\");\\n    bytes32 public constant PERMITTED_PARTNERS = bytes32(\\\"PERMITTED_PARTNERS\\\");\\n    bytes32 public constant NFT_TYPE_REGISTRY = bytes32(\\\"NFT_TYPE_REGISTRY\\\");\\n    bytes32 public constant LOAN_REGISTRY = bytes32(\\\"LOAN_REGISTRY\\\");\\n    bytes32 public constant PERMITTED_SNFT_RECEIVER = bytes32(\\\"PERMITTED_SNFT_RECEIVER\\\");\\n\\n    /**\\n     * @notice Returns the bytes32 representation of a string\\n     * @param _key the string key\\n     * @return id bytes32 representation\\n     */\\n    function getIdFromStringKey(string memory _key) external pure returns (bytes32 id) {\\n        require(bytes(_key).length <= 32, \\\"invalid key\\\");\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := mload(add(_key, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa015e2d06916420f9d878a030fa693557bdf2944626f2d4b0e96e129ad2227f0\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * Modified version from openzeppelin/contracts/access/Ownable.sol that allows to\\n * initialize the owner using a parameter in the constructor\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    address private _ownerCandidate;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /**\\n     * @dev Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`).\\n     * Can only be called by the current owner.\\n     */\\n    function requestTransferOwnership(address _newOwnerCandidate) public virtual onlyOwner {\\n        require(_newOwnerCandidate != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _ownerCandidate = _newOwnerCandidate;\\n    }\\n\\n    function acceptTransferOwnership() public virtual {\\n        require(_ownerCandidate == _msgSender(), \\\"Ownable: not owner candidate\\\");\\n        _setOwner(_ownerCandidate);\\n        delete _ownerCandidate;\\n    }\\n\\n    function cancelTransferOwnership() public virtual onlyOwner {\\n        delete _ownerCandidate;\\n    }\\n\\n    function rejectTransferOwnership() public virtual {\\n        require(_ownerCandidate == _msgSender(), \\\"Ownable: not owner candidate\\\");\\n        delete _ownerCandidate;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Sets the owner.\\n     */\\n    function _setOwner(address _newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(oldOwner, _newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x49779c1a0636477c162d193e201860fec0ef1f103c7d76b3afb88a81a8e555bc\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c0604052600480546001600160481b03191690553480156200002157600080fd5b50604051620022e5380380620022e58339810160408190526200004491620003f9565b82620000508162000078565b506001600160a01b0384166080523360a0526200006e8282620000c8565b50505050620005e9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80518251146200012b5760405162461bcd60e51b815260206004820152602360248201527f66756e6374696f6e20696e666f726d6174696f6e206172697479206d69736d616044820152620e8c6d60eb1b60648201526084015b60405180910390fd5b60005b82518110156200019557620001828382815181106200015157620001516200055c565b60200260200101518383815181106200016e576200016e6200055c565b60200260200101516200019a60201b60201c565b6200018d8162000572565b90506200012e565b505050565b8151600003620001e15760405162461bcd60e51b81526020600482015260116024820152706c6f616e5479706520697320656d70747960781b604482015260640162000122565b60405163f99a8ffb60e01b815260009073733aC632056AA272130Af63809fF3301C80bD1e79063f99a8ffb906200021d9086906004016200059a565b602060405180830381865af41580156200023b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002619190620005cf565b600081815260026020908152604080832080546001600160a01b0319166001600160a01b0388169081179091558084526003909252808320849055519293509183917f22be69269c1f7d73e73dcb25b710dd88c7aa1cf374c16d945def98df2107c2f891a3505050565b80516001600160a01b0381168114620002e357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620003295762000329620002e8565b604052919050565b60006001600160401b038211156200034d576200034d620002e8565b5060051b60200190565b60005b83811015620003745781810151838201526020016200035a565b50506000910152565b600082601f8301126200038f57600080fd5b81516020620003a8620003a28362000331565b620002fe565b82815260059290921b84018101918181019086841115620003c857600080fd5b8286015b84811015620003ee57620003e081620002cb565b8352918301918301620003cc565b509695505050505050565b600080600080608085870312156200041057600080fd5b6200041b85620002cb565b935060206200042c818701620002cb565b60408701519094506001600160401b03808211156200044a57600080fd5b818801915088601f8301126200045f57600080fd5b815162000470620003a28262000331565b81815260059190911b8301840190848101908b8311156200049057600080fd5b8585015b838110156200052557805185811115620004ae5760008081fd5b8601603f81018e13620004c15760008081fd5b8781015186811115620004d857620004d8620002e8565b620004ec601f8201601f19168a01620002fe565b8181528f6040838501011115620005035760008081fd5b62000515828b83016040860162000357565b8552505091860191860162000494565b5060608b015190975094505050808311156200054057600080fd5b505062000550878288016200037d565b91505092959194509250565b634e487b7160e01b600052603260045260246000fd5b6000600182016200059357634e487b7160e01b600052601160045260246000fd5b5060010190565b6020815260008251806020840152620005bb81604085016020870162000357565b601f01601f19169190910160400192915050565b600060208284031215620005e257600080fd5b5051919050565b60805160a051611cd66200060f60003960006109d1015260006101c20152611cd66000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80635f992fdd116100b857806392fede001161007c57806392fede00146102d95780639d6fa618146102e1578063a4d0845d146102f4578063d1f7659514610307578063d5d4d1821461031a578063e6c5a5411461032d57600080fd5b80635f992fdd1461028d5780637b371107146102955780638208e76c1461029d57806386d93f66146102b05780638da5cb5b146102d157600080fd5b8063485cc955116100ff578063485cc955146101e45780634fbe68a0146101f757806352a067e51461020a5780635509a9e9146102505780635794fefc1461027d57600080fd5b8063072db1471461013c57806308abefa9146101515780631b982cf11461019757806326041874146101aa578063365a86fc146101bd575b600080fd5b61014f61014a366004611634565b61034d565b005b61017a61015f366004611667565b6000908152600260205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b61014f6101a5366004611634565b61070f565b61014f6101b83660046117ca565b610989565b61017a7f000000000000000000000000000000000000000000000000000000000000000081565b61014f6101f236600461189d565b6109c6565b60065461017a906001600160a01b031681565b610240610218366004611634565b63ffffffff9091166000908152600560205260409020546001600160a01b0390811691161490565b604051901515815260200161018e565b60045461026890640100000000900463ffffffff1681565b60405163ffffffff909116815260200161018e565b6004546102689063ffffffff1681565b61014f610b6b565b61014f610ba7565b60075461017a906001600160a01b031681565b6102c36102be3660046118b9565b610be6565b60405190815260200161018e565b61017a610c01565b61014f610c10565b61014f6102ef3660046118b9565b610c3f565b61014f6103023660046118ec565b610cf5565b610268610315366004611923565b610ff8565b61014f61032836600461194d565b6112f4565b61034061033b366004611991565b61132d565b60405161018e91906119e4565b600454600160401b900460ff1661037f5760405162461bcd60e51b815260040161037690611a22565b60405180910390fd5b33600061038b82610be6565b036103a85760405162461bcd60e51b815260040161037690611a4b565b63ffffffff8316600090815260056020526040812054600160a01b90046001600160401b0316908190036103ee5760405162461bcd60e51b815260040161037690611a90565b600654604051634f558e7960e01b81526001600160401b03831660048201526001600160a01b0390911690634f558e7990602401602060405180830381865afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104639190611abc565b61047f5760405162461bcd60e51b815260040161037690611ad9565b600654604051630852cd8d60e31b81526001600160401b03831660048201526001600160a01b03909116906342966c6890602401600060405180830381600087803b1580156104cd57600080fd5b505af11580156104e1573d6000803e3d6000fd5b5050505060016004808282829054906101000a900463ffffffff166105069190611b26565b92506101000a81548163ffffffff021916908363ffffffff16021790555060003060048054906101000a900463ffffffff16604051602001610549929190611b43565b60408051601f19818403018152828252805160209182012060065463ffffffff8a168386015283518086039093018352848401938490526394d008ef60e01b90935293506001600160a01b03909116916394d008ef916105af9188918691604401611bb8565b600060405180830381600087803b1580156105c957600080fd5b505af11580156105dd573d6000803e3d6000fd5b50505063ffffffff86166000908152600560205260409081902080546001600160401b038516600160a01b0267ffffffffffffffff60a01b199091161790556007549051634f558e7960e01b81526001600160a01b039091169150634f558e799061065b9085906004016001600160401b0391909116815260200190565b602060405180830381865afa158015610678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069c9190611abc565b1561070857600754604051630852cd8d60e31b81526001600160401b03841660048201526001600160a01b03909116906342966c6890602401600060405180830381600087803b1580156106ef57600080fd5b505af1158015610703573d6000803e3d6000fd5b505050505b5050505050565b600454600160401b900460ff166107385760405162461bcd60e51b815260040161037690611a22565b33600061074482610be6565b036107615760405162461bcd60e51b815260040161037690611a4b565b63ffffffff8316600090815260056020526040812054600160a01b90046001600160401b0316908190036107a75760405162461bcd60e51b815260040161037690611a90565b600654604051634f558e7960e01b81526001600160401b03831660048201526001600160a01b0390911690634f558e7990602401602060405180830381865afa1580156107f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081c9190611abc565b6108385760405162461bcd60e51b815260040161037690611ad9565b600754604051634f558e7960e01b81526001600160401b03831660048201526001600160a01b0390911690634f558e7990602401602060405180830381865afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190611abc565b156108fa5760405162461bcd60e51b815260206004820152601c60248201527f4f626c69676174696f6e20722073686f756c646e2774206578697374000000006044820152606401610376565b6007546040805163ffffffff871660208201526001600160a01b03909216916394d008ef9186918591016040516020818303038152906040526040518463ffffffff1660e01b815260040161095193929190611bb8565b600060405180830381600087803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b5050505050505050565b33610992610c01565b6001600160a01b0316146109b85760405162461bcd60e51b815260040161037690611bf4565b6109c282826113d0565b5050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a2e5760405162461bcd60e51b815260206004820152600d60248201526c37b7363c903232b83637bcb2b960991b6044820152606401610376565b600454600160401b900460ff1615610a7e5760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610376565b6001600160a01b038216610ad45760405162461bcd60e51b815260206004820152601b60248201527f70726f6d6973736f72794e6f7465546f6b656e206973207a65726f00000000006044820152606401610376565b6001600160a01b038116610b2a5760405162461bcd60e51b815260206004820152601e60248201527f6f626c69676174696f6e52656365697074546f6b656e206973207a65726f00006044820152606401610376565b6004805460ff60401b1916600160401b179055600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b6001546001600160a01b03163314610b955760405162461bcd60e51b815260040161037690611c29565b600180546001600160a01b0319169055565b6001546001600160a01b03163314610bd15760405162461bcd60e51b815260040161037690611c29565b600154610b95906001600160a01b031661148a565b6001600160a01b031660009081526003602052604090205490565b6000546001600160a01b031690565b33610c19610c01565b6001600160a01b031614610b955760405162461bcd60e51b815260040161037690611bf4565b33610c48610c01565b6001600160a01b031614610c6e5760405162461bcd60e51b815260040161037690611bf4565b6001600160a01b038116610cd35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610376565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600454600160401b900460ff16610d1e5760405162461bcd60e51b815260040161037690611a22565b63ffffffff8216600090815260056020526040902060018154600160e01b900460ff166003811115610d5257610d526119ac565b14610d995760405162461bcd60e51b81526020600482015260176024820152764c6f616e20737461747573206d757374206265204e657760481b6044820152606401610376565b80546001600160a01b03163314610e055760405162461bcd60e51b815260206004820152602a60248201527f4e6f74207468652073616d6520436f6e747261637420746861742072656769736044820152693a32b932b2102637b0b760b11b6064820152608401610376565b8115610e2157805460ff60e01b1916600160e11b178155610e33565b805460ff60e01b1916600360e01b1781555b6006548154604051630852cd8d60e31b8152600160a01b9091046001600160401b031660048201526001600160a01b03909116906342966c6890602401600060405180830381600087803b158015610e8a57600080fd5b505af1158015610e9e573d6000803e3d6000fd5b50506007548354604051634f558e7960e01b8152600160a01b9091046001600160401b031660048201526001600160a01b039091169250634f558e799150602401602060405180830381865afa158015610efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f209190611abc565b15610f95576007548154604051630852cd8d60e31b8152600160a01b9091046001600160401b031660048201526001600160a01b03909116906342966c6890602401600060405180830381600087803b158015610f7c57600080fd5b505af1158015610f90573d6000803e3d6000fd5b505050505b80546040513391600160a01b81046001600160401b03169163ffffffff8716917fed71188e6e889129ea3e58f204838c0d459c617582cbbc6759017f50820edb5c91610feb91600160e01b900460ff1690611c60565b60405180910390a4505050565b600454600090600160401b900460ff166110245760405162461bcd60e51b815260040161037690611a22565b3380611045846000908152600260205260409020546001600160a01b031690565b6001600160a01b0316146110ab5760405162461bcd60e51b815260206004820152602760248201527f43616c6c6572206d757374206265207265676973746572656420666f72206c6f604482015266616e207479706560c81b6064820152608401610376565b60048054600191906000906110c790849063ffffffff16611b26565b92506101000a81548163ffffffff021916908363ffffffff16021790555060016004808282829054906101000a900463ffffffff166111069190611b26565b92506101000a81548163ffffffff021916908363ffffffff16021790555060003060048054906101000a900463ffffffff16604051602001611149929190611b43565b60408051601f1981840301815282825280516020918201206060840183526001600160a01b0386811685526001600160401b03821683860152600185850152600654600454855163ffffffff9091168186015285518082039095018552808601958690526394d008ef60e01b90955291955016916394d008ef916111d3918a918791604401611bb8565b600060405180830381600087803b1580156111ed57600080fd5b505af1158015611201573d6000803e3d6000fd5b505060045463ffffffff1660009081526005602090815260409182902085518154928701516001600160401b0316600160a01b026001600160e01b03199093166001600160a01b0390911617919091178082559185015185945090925090829060ff60e01b1916600160e01b83600381111561127f5761127f6119ac565b0217905550506004546040516001600160a01b03861692506001600160401b0385169163ffffffff16907fed71188e6e889129ea3e58f204838c0d459c617582cbbc6759017f50820edb5c906112d790600190611c60565b60405180910390a4505060045463ffffffff169150505b92915050565b336112fd610c01565b6001600160a01b0316146113235760405162461bcd60e51b815260040161037690611bf4565b6109c282826114da565b61134e60408051606081018252600080825260208201819052909182015290565b63ffffffff8216600090815260056020908152604091829020825160608101845281546001600160a01b0381168252600160a01b81046001600160401b03169382019390935292909190830190600160e01b900460ff1660038111156113b6576113b66119ac565b60038111156113c7576113c76119ac565b90525092915050565b805182511461142d5760405162461bcd60e51b815260206004820152602360248201527f66756e6374696f6e20696e666f726d6174696f6e206172697479206d69736d616044820152620e8c6d60eb1b6064820152608401610376565b60005b82518110156114855761147583828151811061144e5761144e611c6e565b602002602001015183838151811061146857611468611c6e565b60200260200101516114da565b61147e81611c84565b9050611430565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b815160000361151f5760405162461bcd60e51b81526020600482015260116024820152706c6f616e5479706520697320656d70747960781b6044820152606401610376565b60405163f99a8ffb60e01b815260009073733aC632056AA272130Af63809fF3301C80bD1e79063f99a8ffb90611559908690600401611c9d565b602060405180830381865af4158015611576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159a9190611cb0565b600081815260026020908152604080832080546001600160a01b0319166001600160a01b0388169081179091558084526003909252808320849055519293509183917f22be69269c1f7d73e73dcb25b710dd88c7aa1cf374c16d945def98df2107c2f891a3505050565b803563ffffffff8116811461161857600080fd5b919050565b80356001600160a01b038116811461161857600080fd5b6000806040838503121561164757600080fd5b61165083611604565b915061165e6020840161161d565b90509250929050565b60006020828403121561167957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156116be576116be611680565b604052919050565b60006001600160401b038211156116df576116df611680565b5060051b60200190565b600082601f8301126116fa57600080fd5b81356001600160401b0381111561171357611713611680565b611726601f8201601f1916602001611696565b81815284602083860101111561173b57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261176957600080fd5b8135602061177e611779836116c6565b611696565b82815260059290921b8401810191818101908684111561179d57600080fd5b8286015b848110156117bf576117b28161161d565b83529183019183016117a1565b509695505050505050565b600080604083850312156117dd57600080fd5b82356001600160401b03808211156117f457600080fd5b818501915085601f83011261180857600080fd5b81356020611818611779836116c6565b82815260059290921b8401810191818101908984111561183757600080fd5b8286015b8481101561186f578035868111156118535760008081fd5b6118618c86838b01016116e9565b84525091830191830161183b565b509650508601359250508082111561188657600080fd5b5061189385828601611758565b9150509250929050565b600080604083850312156118b057600080fd5b6116508361161d565b6000602082840312156118cb57600080fd5b6118d48261161d565b9392505050565b80151581146118e957600080fd5b50565b600080604083850312156118ff57600080fd5b61190883611604565b91506020830135611918816118db565b809150509250929050565b6000806040838503121561193657600080fd5b61193f8361161d565b946020939093013593505050565b6000806040838503121561196057600080fd5b82356001600160401b0381111561197657600080fd5b611982858286016116e9565b92505061165e6020840161161d565b6000602082840312156119a357600080fd5b6118d482611604565b634e487b7160e01b600052602160045260246000fd5b600481106119e057634e487b7160e01b600052602160045260246000fd5b9052565b81516001600160a01b031681526020808301516001600160401b0316908201526040808301516060830191611a1b908401826119c2565b5092915050565b6020808252600f908201526e1b9bdd081a5b9a5d1a585b1a5e9959608a1b604082015260600190565b60208082526025908201527f43616c6c6572206d75737420612062652072656769737465726564206c6f616e604082015264207479706560d81b606082015260800190565b6020808252601290820152711b1bd85b88191bd95cdb89dd08195e1a5cdd60721b604082015260600190565b600060208284031215611ace57600080fd5b81516118d4816118db565b6020808252601c908201527f50726f6d6973736f7279206e6f74652073686f756c6420657869737400000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b63ffffffff818116838216019080821115611a1b57611a1b611b10565b60609290921b6bffffffffffffffffffffffff1916825260e01b6001600160e01b031916601482015260180190565b6000815180845260005b81811015611b9857602081850181015186830182015201611b7c565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03841681526001600160401b0383166020820152606060408201819052600090611beb90830184611b72565b95945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f4f776e61626c653a206e6f74206f776e65722063616e64696461746500000000604082015260600190565b602081016112ee82846119c2565b634e487b7160e01b600052603260045260246000fd5b600060018201611c9657611c96611b10565b5060010190565b6020815260006118d46020830184611b72565b600060208284031215611cc257600080fd5b505191905056fea164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80635f992fdd116100b857806392fede001161007c57806392fede00146102d95780639d6fa618146102e1578063a4d0845d146102f4578063d1f7659514610307578063d5d4d1821461031a578063e6c5a5411461032d57600080fd5b80635f992fdd1461028d5780637b371107146102955780638208e76c1461029d57806386d93f66146102b05780638da5cb5b146102d157600080fd5b8063485cc955116100ff578063485cc955146101e45780634fbe68a0146101f757806352a067e51461020a5780635509a9e9146102505780635794fefc1461027d57600080fd5b8063072db1471461013c57806308abefa9146101515780631b982cf11461019757806326041874146101aa578063365a86fc146101bd575b600080fd5b61014f61014a366004611634565b61034d565b005b61017a61015f366004611667565b6000908152600260205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b61014f6101a5366004611634565b61070f565b61014f6101b83660046117ca565b610989565b61017a7f000000000000000000000000000000000000000000000000000000000000000081565b61014f6101f236600461189d565b6109c6565b60065461017a906001600160a01b031681565b610240610218366004611634565b63ffffffff9091166000908152600560205260409020546001600160a01b0390811691161490565b604051901515815260200161018e565b60045461026890640100000000900463ffffffff1681565b60405163ffffffff909116815260200161018e565b6004546102689063ffffffff1681565b61014f610b6b565b61014f610ba7565b60075461017a906001600160a01b031681565b6102c36102be3660046118b9565b610be6565b60405190815260200161018e565b61017a610c01565b61014f610c10565b61014f6102ef3660046118b9565b610c3f565b61014f6103023660046118ec565b610cf5565b610268610315366004611923565b610ff8565b61014f61032836600461194d565b6112f4565b61034061033b366004611991565b61132d565b60405161018e91906119e4565b600454600160401b900460ff1661037f5760405162461bcd60e51b815260040161037690611a22565b60405180910390fd5b33600061038b82610be6565b036103a85760405162461bcd60e51b815260040161037690611a4b565b63ffffffff8316600090815260056020526040812054600160a01b90046001600160401b0316908190036103ee5760405162461bcd60e51b815260040161037690611a90565b600654604051634f558e7960e01b81526001600160401b03831660048201526001600160a01b0390911690634f558e7990602401602060405180830381865afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104639190611abc565b61047f5760405162461bcd60e51b815260040161037690611ad9565b600654604051630852cd8d60e31b81526001600160401b03831660048201526001600160a01b03909116906342966c6890602401600060405180830381600087803b1580156104cd57600080fd5b505af11580156104e1573d6000803e3d6000fd5b5050505060016004808282829054906101000a900463ffffffff166105069190611b26565b92506101000a81548163ffffffff021916908363ffffffff16021790555060003060048054906101000a900463ffffffff16604051602001610549929190611b43565b60408051601f19818403018152828252805160209182012060065463ffffffff8a168386015283518086039093018352848401938490526394d008ef60e01b90935293506001600160a01b03909116916394d008ef916105af9188918691604401611bb8565b600060405180830381600087803b1580156105c957600080fd5b505af11580156105dd573d6000803e3d6000fd5b50505063ffffffff86166000908152600560205260409081902080546001600160401b038516600160a01b0267ffffffffffffffff60a01b199091161790556007549051634f558e7960e01b81526001600160a01b039091169150634f558e799061065b9085906004016001600160401b0391909116815260200190565b602060405180830381865afa158015610678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069c9190611abc565b1561070857600754604051630852cd8d60e31b81526001600160401b03841660048201526001600160a01b03909116906342966c6890602401600060405180830381600087803b1580156106ef57600080fd5b505af1158015610703573d6000803e3d6000fd5b505050505b5050505050565b600454600160401b900460ff166107385760405162461bcd60e51b815260040161037690611a22565b33600061074482610be6565b036107615760405162461bcd60e51b815260040161037690611a4b565b63ffffffff8316600090815260056020526040812054600160a01b90046001600160401b0316908190036107a75760405162461bcd60e51b815260040161037690611a90565b600654604051634f558e7960e01b81526001600160401b03831660048201526001600160a01b0390911690634f558e7990602401602060405180830381865afa1580156107f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081c9190611abc565b6108385760405162461bcd60e51b815260040161037690611ad9565b600754604051634f558e7960e01b81526001600160401b03831660048201526001600160a01b0390911690634f558e7990602401602060405180830381865afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190611abc565b156108fa5760405162461bcd60e51b815260206004820152601c60248201527f4f626c69676174696f6e20722073686f756c646e2774206578697374000000006044820152606401610376565b6007546040805163ffffffff871660208201526001600160a01b03909216916394d008ef9186918591016040516020818303038152906040526040518463ffffffff1660e01b815260040161095193929190611bb8565b600060405180830381600087803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b5050505050505050565b33610992610c01565b6001600160a01b0316146109b85760405162461bcd60e51b815260040161037690611bf4565b6109c282826113d0565b5050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a2e5760405162461bcd60e51b815260206004820152600d60248201526c37b7363c903232b83637bcb2b960991b6044820152606401610376565b600454600160401b900460ff1615610a7e5760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610376565b6001600160a01b038216610ad45760405162461bcd60e51b815260206004820152601b60248201527f70726f6d6973736f72794e6f7465546f6b656e206973207a65726f00000000006044820152606401610376565b6001600160a01b038116610b2a5760405162461bcd60e51b815260206004820152601e60248201527f6f626c69676174696f6e52656365697074546f6b656e206973207a65726f00006044820152606401610376565b6004805460ff60401b1916600160401b179055600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b6001546001600160a01b03163314610b955760405162461bcd60e51b815260040161037690611c29565b600180546001600160a01b0319169055565b6001546001600160a01b03163314610bd15760405162461bcd60e51b815260040161037690611c29565b600154610b95906001600160a01b031661148a565b6001600160a01b031660009081526003602052604090205490565b6000546001600160a01b031690565b33610c19610c01565b6001600160a01b031614610b955760405162461bcd60e51b815260040161037690611bf4565b33610c48610c01565b6001600160a01b031614610c6e5760405162461bcd60e51b815260040161037690611bf4565b6001600160a01b038116610cd35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610376565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600454600160401b900460ff16610d1e5760405162461bcd60e51b815260040161037690611a22565b63ffffffff8216600090815260056020526040902060018154600160e01b900460ff166003811115610d5257610d526119ac565b14610d995760405162461bcd60e51b81526020600482015260176024820152764c6f616e20737461747573206d757374206265204e657760481b6044820152606401610376565b80546001600160a01b03163314610e055760405162461bcd60e51b815260206004820152602a60248201527f4e6f74207468652073616d6520436f6e747261637420746861742072656769736044820152693a32b932b2102637b0b760b11b6064820152608401610376565b8115610e2157805460ff60e01b1916600160e11b178155610e33565b805460ff60e01b1916600360e01b1781555b6006548154604051630852cd8d60e31b8152600160a01b9091046001600160401b031660048201526001600160a01b03909116906342966c6890602401600060405180830381600087803b158015610e8a57600080fd5b505af1158015610e9e573d6000803e3d6000fd5b50506007548354604051634f558e7960e01b8152600160a01b9091046001600160401b031660048201526001600160a01b039091169250634f558e799150602401602060405180830381865afa158015610efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f209190611abc565b15610f95576007548154604051630852cd8d60e31b8152600160a01b9091046001600160401b031660048201526001600160a01b03909116906342966c6890602401600060405180830381600087803b158015610f7c57600080fd5b505af1158015610f90573d6000803e3d6000fd5b505050505b80546040513391600160a01b81046001600160401b03169163ffffffff8716917fed71188e6e889129ea3e58f204838c0d459c617582cbbc6759017f50820edb5c91610feb91600160e01b900460ff1690611c60565b60405180910390a4505050565b600454600090600160401b900460ff166110245760405162461bcd60e51b815260040161037690611a22565b3380611045846000908152600260205260409020546001600160a01b031690565b6001600160a01b0316146110ab5760405162461bcd60e51b815260206004820152602760248201527f43616c6c6572206d757374206265207265676973746572656420666f72206c6f604482015266616e207479706560c81b6064820152608401610376565b60048054600191906000906110c790849063ffffffff16611b26565b92506101000a81548163ffffffff021916908363ffffffff16021790555060016004808282829054906101000a900463ffffffff166111069190611b26565b92506101000a81548163ffffffff021916908363ffffffff16021790555060003060048054906101000a900463ffffffff16604051602001611149929190611b43565b60408051601f1981840301815282825280516020918201206060840183526001600160a01b0386811685526001600160401b03821683860152600185850152600654600454855163ffffffff9091168186015285518082039095018552808601958690526394d008ef60e01b90955291955016916394d008ef916111d3918a918791604401611bb8565b600060405180830381600087803b1580156111ed57600080fd5b505af1158015611201573d6000803e3d6000fd5b505060045463ffffffff1660009081526005602090815260409182902085518154928701516001600160401b0316600160a01b026001600160e01b03199093166001600160a01b0390911617919091178082559185015185945090925090829060ff60e01b1916600160e01b83600381111561127f5761127f6119ac565b0217905550506004546040516001600160a01b03861692506001600160401b0385169163ffffffff16907fed71188e6e889129ea3e58f204838c0d459c617582cbbc6759017f50820edb5c906112d790600190611c60565b60405180910390a4505060045463ffffffff169150505b92915050565b336112fd610c01565b6001600160a01b0316146113235760405162461bcd60e51b815260040161037690611bf4565b6109c282826114da565b61134e60408051606081018252600080825260208201819052909182015290565b63ffffffff8216600090815260056020908152604091829020825160608101845281546001600160a01b0381168252600160a01b81046001600160401b03169382019390935292909190830190600160e01b900460ff1660038111156113b6576113b66119ac565b60038111156113c7576113c76119ac565b90525092915050565b805182511461142d5760405162461bcd60e51b815260206004820152602360248201527f66756e6374696f6e20696e666f726d6174696f6e206172697479206d69736d616044820152620e8c6d60eb1b6064820152608401610376565b60005b82518110156114855761147583828151811061144e5761144e611c6e565b602002602001015183838151811061146857611468611c6e565b60200260200101516114da565b61147e81611c84565b9050611430565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b815160000361151f5760405162461bcd60e51b81526020600482015260116024820152706c6f616e5479706520697320656d70747960781b6044820152606401610376565b60405163f99a8ffb60e01b815260009073__$d7e2e0a2db402280e6c36233d590dce656$__9063f99a8ffb90611559908690600401611c9d565b602060405180830381865af4158015611576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159a9190611cb0565b600081815260026020908152604080832080546001600160a01b0319166001600160a01b0388169081179091558084526003909252808320849055519293509183917f22be69269c1f7d73e73dcb25b710dd88c7aa1cf374c16d945def98df2107c2f891a3505050565b803563ffffffff8116811461161857600080fd5b919050565b80356001600160a01b038116811461161857600080fd5b6000806040838503121561164757600080fd5b61165083611604565b915061165e6020840161161d565b90509250929050565b60006020828403121561167957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156116be576116be611680565b604052919050565b60006001600160401b038211156116df576116df611680565b5060051b60200190565b600082601f8301126116fa57600080fd5b81356001600160401b0381111561171357611713611680565b611726601f8201601f1916602001611696565b81815284602083860101111561173b57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261176957600080fd5b8135602061177e611779836116c6565b611696565b82815260059290921b8401810191818101908684111561179d57600080fd5b8286015b848110156117bf576117b28161161d565b83529183019183016117a1565b509695505050505050565b600080604083850312156117dd57600080fd5b82356001600160401b03808211156117f457600080fd5b818501915085601f83011261180857600080fd5b81356020611818611779836116c6565b82815260059290921b8401810191818101908984111561183757600080fd5b8286015b8481101561186f578035868111156118535760008081fd5b6118618c86838b01016116e9565b84525091830191830161183b565b509650508601359250508082111561188657600080fd5b5061189385828601611758565b9150509250929050565b600080604083850312156118b057600080fd5b6116508361161d565b6000602082840312156118cb57600080fd5b6118d48261161d565b9392505050565b80151581146118e957600080fd5b50565b600080604083850312156118ff57600080fd5b61190883611604565b91506020830135611918816118db565b809150509250929050565b6000806040838503121561193657600080fd5b61193f8361161d565b946020939093013593505050565b6000806040838503121561196057600080fd5b82356001600160401b0381111561197657600080fd5b611982858286016116e9565b92505061165e6020840161161d565b6000602082840312156119a357600080fd5b6118d482611604565b634e487b7160e01b600052602160045260246000fd5b600481106119e057634e487b7160e01b600052602160045260246000fd5b9052565b81516001600160a01b031681526020808301516001600160401b0316908201526040808301516060830191611a1b908401826119c2565b5092915050565b6020808252600f908201526e1b9bdd081a5b9a5d1a585b1a5e9959608a1b604082015260600190565b60208082526025908201527f43616c6c6572206d75737420612062652072656769737465726564206c6f616e604082015264207479706560d81b606082015260800190565b6020808252601290820152711b1bd85b88191bd95cdb89dd08195e1a5cdd60721b604082015260600190565b600060208284031215611ace57600080fd5b81516118d4816118db565b6020808252601c908201527f50726f6d6973736f7279206e6f74652073686f756c6420657869737400000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b63ffffffff818116838216019080821115611a1b57611a1b611b10565b60609290921b6bffffffffffffffffffffffff1916825260e01b6001600160e01b031916601482015260180190565b6000815180845260005b81811015611b9857602081850181015186830182015201611b7c565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03841681526001600160401b0383166020820152606060408201819052600090611beb90830184611b72565b95945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f4f776e61626c653a206e6f74206f776e65722063616e64696461746500000000604082015260600190565b602081016112ee82846119c2565b634e487b7160e01b600052603260045260246000fd5b600060018201611c9657611c96611b10565b5060010190565b6020815260006118d46020830184611b72565b600060208284031215611cc257600080fd5b505191905056fea164736f6c6343000813000a",
  "libraries": {
    "ContractKeys": "0x733aC632056AA272130Af63809fF3301C80bD1e7"
  },
  "devdoc": {
    "author": "NFTfi",
    "events": {
      "TypeUpdated(bytes32,address)": {
        "params": {
          "loanContract": "- Address of the loan type contract.",
          "loanType": "- Loan type represented by keccak256('loan type')."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_admin": "- Initial admin of this contract.",
          "_loanContracts": "- The addresses of each wrapper contract that implements the loan type's behaviour.",
          "_loanTypes": "- Loan types represented by keccak256('loan type').",
          "_nftfiHub": "- Address of the NftfiHub contract"
        }
      },
      "getContractFromType(bytes32)": {
        "params": {
          "_loanType": "- The loan type, e.g. bytes32(\"DIRECT_LOAN_FIXED\"), or bytes32(\"DIRECT_LOAN_PRO_RATED\")."
        }
      },
      "getLoanData(uint32)": {
        "details": "Returns loan's data for a given id.",
        "params": {
          "_loanId": "- Id of the loan"
        }
      },
      "getTypeFromContract(address)": {
        "params": {
          "_loanContract": "- The loan contract"
        }
      },
      "initialize(address,address)": {
        "details": "Sets `promissoryNoteToken` and `obligationReceiptToken`. It can be executed once by the deployer.",
        "params": {
          "_obligationReceiptToken": "- Obligaiton Recipt Token address",
          "_promissoryNoteToken": "- Promissory Note Token address"
        }
      },
      "isValidLoanId(uint32,address)": {
        "details": "checks if the given id is valid for the given loan contract address",
        "params": {
          "_loanContract": "- address og the loan contract",
          "_loanId": "- Id of the loan"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerLoan(address,bytes32)": {
        "details": "This is called by the LoanType beginning the new loan. It initialize the new loan data, mints both PromissoryNote and ObligationReceipt SmartNft's and returns the new loan id.",
        "params": {
          "_lender": "- Address of the lender",
          "_loanType": "- The type of the loan"
        }
      },
      "registerLoanType(string,address)": {
        "params": {
          "_loanContract": "- The address of the wrapper contract that implements the loan type's behaviour.",
          "_loanType": "- Loan type represented by 'loan type'."
        }
      },
      "registerLoanTypes(string[],address[])": {
        "params": {
          "_loanContracts": "- The addresses of each wrapper contract that implements the loan type's behaviour.",
          "_loanTypes": "- Loan types represented by 'loan type'."
        }
      },
      "requestTransferOwnership(address)": {
        "details": "Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`). Can only be called by the current owner."
      },
      "resolveLoan(uint32,bool)": {
        "details": "This is called by the LoanType who created the loan, when a loan is resolved whether by paying back or liquidating the loan. It sets the loan as `RESOLVED` and burns both PromossoryNote and ObligationReceipt SmartNft's.",
        "params": {
          "_loanId": "- Id of the loan"
        }
      }
    },
    "stateVariables": {
      "contractTypes": {
        "details": "reverse mapping of loanTypes - for each contract address, records the associated loan type"
      },
      "typeContracts": {
        "details": "For each loan type, records the address of the contract that implements the type"
      }
    },
    "title": "DirectLoanCoordinator",
    "version": 1
  },
  "userdoc": {
    "events": {
      "TypeUpdated(bytes32,address)": {
        "notice": "This event is fired whenever the admins register a loan type."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Sets the admin of the contract. Initializes `contractTypes` with a batch of loan types. Sets `NftfiHub`."
      },
      "getContractFromType(bytes32)": {
        "notice": "This function can be called by anyone to get the contract address that implements the given loan type."
      },
      "getTypeFromContract(address)": {
        "notice": "This function can be called by anyone to get the loan type of the given contract address."
      },
      "registerLoanType(string,address)": {
        "notice": "Set or update the contract address that implements the given Loan Type. Set address(0) for a loan type for un-register such type."
      },
      "registerLoanTypes(string[],address[])": {
        "notice": "Batch set or update the contract addresses that implement the given batch Loan Type. Set address(0) for a loan type for un-register such type."
      },
      "totalNumLoans()": {
        "notice": "A continuously increasing counter that simultaneously allows every loan to have a unique ID and provides a running count of how many loans have been started by this contract."
      }
    },
    "notice": "This contract is in charge of coordinating the creation, disctubution and desctruction of the SmartNfts related to a loan, the Promossory Note and Obligaiton Receipt.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20389,
        "contract": "contracts/loans/direct/DirectLoanCoordinator.sol:DirectLoanCoordinator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20391,
        "contract": "contracts/loans/direct/DirectLoanCoordinator.sol:DirectLoanCoordinator",
        "label": "_ownerCandidate",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9536,
        "contract": "contracts/loans/direct/DirectLoanCoordinator.sol:DirectLoanCoordinator",
        "label": "typeContracts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 9541,
        "contract": "contracts/loans/direct/DirectLoanCoordinator.sol:DirectLoanCoordinator",
        "label": "contractTypes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 9545,
        "contract": "contracts/loans/direct/DirectLoanCoordinator.sol:DirectLoanCoordinator",
        "label": "totalNumLoans",
        "offset": 0,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 9548,
        "contract": "contracts/loans/direct/DirectLoanCoordinator.sol:DirectLoanCoordinator",
        "label": "smartNftIdCounter",
        "offset": 4,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 9553,
        "contract": "contracts/loans/direct/DirectLoanCoordinator.sol:DirectLoanCoordinator",
        "label": "_initialized",
        "offset": 8,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 9558,
        "contract": "contracts/loans/direct/DirectLoanCoordinator.sol:DirectLoanCoordinator",
        "label": "loans",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint32,t_struct(Loan)8927_storage)"
      },
      {
        "astId": 9561,
        "contract": "contracts/loans/direct/DirectLoanCoordinator.sol:DirectLoanCoordinator",
        "label": "promissoryNoteToken",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 9564,
        "contract": "contracts/loans/direct/DirectLoanCoordinator.sol:DirectLoanCoordinator",
        "label": "obligationReceiptToken",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(StatusType)8919": {
        "encoding": "inplace",
        "label": "enum IDirectLoanCoordinator.StatusType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint32,t_struct(Loan)8927_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct IDirectLoanCoordinator.Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)8927_storage"
      },
      "t_struct(Loan)8927_storage": {
        "encoding": "inplace",
        "label": "struct IDirectLoanCoordinator.Loan",
        "members": [
          {
            "astId": 8921,
            "contract": "contracts/loans/direct/DirectLoanCoordinator.sol:DirectLoanCoordinator",
            "label": "loanContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8923,
            "contract": "contracts/loans/direct/DirectLoanCoordinator.sol:DirectLoanCoordinator",
            "label": "smartNftId",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 8926,
            "contract": "contracts/loans/direct/DirectLoanCoordinator.sol:DirectLoanCoordinator",
            "label": "status",
            "offset": 28,
            "slot": "0",
            "type": "t_enum(StatusType)8919"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}