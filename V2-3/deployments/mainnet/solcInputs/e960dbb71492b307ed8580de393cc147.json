{
  "language": "Solidity",
  "sources": {
    "contracts/airdrop/AirdropFlashLoan.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../interfaces/INftfiHub.sol\";\nimport \"../interfaces/IPermittedAirdrops.sol\";\nimport \"../interfaces/INftWrapper.sol\";\nimport \"../utils/ContractKeys.sol\";\n\n/**\n * @title AirdropFlashLoan\n * @author NFTfi\n * @dev\n */\ncontract AirdropFlashLoan is ERC721Holder, ERC1155Holder, ReentrancyGuard {\n    using Address for address;\n    using SafeERC20 for IERC20;\n\n    INftfiHub public immutable hub;\n\n    constructor(address _nftfiHub) {\n        hub = INftfiHub(_nftfiHub);\n    }\n\n    function pullAirdrop(\n        address _nftCollateralContract,\n        uint256 _nftCollateralId,\n        address _nftWrapper,\n        address _target,\n        bytes calldata _data,\n        address _nftAirdrop,\n        uint256 _nftAirdropId,\n        bool _is1155,\n        uint256 _nftAirdropAmount,\n        address _beneficiary\n    ) external nonReentrant {\n        require(\n            IPermittedAirdrops(hub.getContract(ContractKeys.PERMITTED_AIRDROPS)).isValidAirdrop(\n                abi.encode(_target, _getSelector(_data))\n            ),\n            \"Invalid Airdrop\"\n        );\n\n        // assumes that the collateral nft has been transferreded to this contract before calling this function\n        _target.functionCall(_data);\n\n        // return the collateral\n        _transferNFT(_nftWrapper, address(this), msg.sender, _nftCollateralContract, _nftCollateralId);\n\n        // in case that arbitray function from _target does not send the airdrop to a specified address\n        if (_nftAirdrop != address(0) && _beneficiary != address(0)) {\n            // send the airdrop to the beneficiary\n            if (_is1155) {\n                IERC1155(_nftAirdrop).safeTransferFrom(\n                    address(this),\n                    _beneficiary,\n                    _nftAirdropId,\n                    _nftAirdropAmount,\n                    \"0x\"\n                );\n            } else {\n                IERC721(_nftAirdrop).safeTransferFrom(address(this), _beneficiary, _nftAirdropId);\n            }\n        }\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC1155Receiver) returns (bool) {\n        return _interfaceId == type(IERC721Receiver).interfaceId || super.supportsInterface(_interfaceId);\n    }\n\n    function _transferNFT(\n        address _nftWrapper,\n        address _sender,\n        address _recipient,\n        address _nftCollateralContract,\n        uint256 _nftCollateralId\n    ) internal {\n        _nftWrapper.functionDelegateCall(\n            abi.encodeWithSelector(\n                INftWrapper(_nftWrapper).transferNFT.selector,\n                _sender,\n                _recipient,\n                _nftCollateralContract,\n                _nftCollateralId\n            ),\n            \"NFT was not successfully transferred\"\n        );\n    }\n\n    function _getSelector(bytes memory _data) internal pure returns (bytes4 selector) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            selector := mload(add(_data, 32))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/INftfiHub.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\n/**\n * @title INftfiHub\n * @author NFTfi\n * @dev NftfiHub interface\n */\ninterface INftfiHub {\n    function setContract(string calldata _contractKey, address _contractAddress) external;\n\n    function getContract(bytes32 _contractKey) external view returns (address);\n}\n"
    },
    "contracts/interfaces/IPermittedAirdrops.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\ninterface IPermittedAirdrops {\n    function isValidAirdrop(bytes memory _addressSig) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/INftWrapper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\n/**\n * @title INftTypeRegistry\n * @author NFTfi\n * @dev Interface for NFT Wrappers.\n */\ninterface INftWrapper {\n    function transferNFT(\n        address from,\n        address to,\n        address nftContract,\n        uint256 tokenId\n    ) external returns (bool);\n\n    function isOwner(\n        address owner,\n        address nftContract,\n        uint256 tokenId\n    ) external view returns (bool);\n\n    function wrapAirdropReceiver(\n        address _recipient,\n        address _nftContract,\n        uint256 _nftId,\n        address _beneficiary\n    ) external returns (bool);\n}\n"
    },
    "contracts/utils/ContractKeys.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\n/**\n * @title ContractKeys\n * @author NFTfi\n * @dev Common library for contract keys\n */\nlibrary ContractKeys {\n    bytes32 public constant PERMITTED_ERC20S = bytes32(\"PERMITTED_ERC20S\");\n    bytes32 public constant PERMITTED_NFTS = bytes32(\"PERMITTED_NFTS\");\n    bytes32 public constant PERMITTED_PARTNERS = bytes32(\"PERMITTED_PARTNERS\");\n    bytes32 public constant NFT_TYPE_REGISTRY = bytes32(\"NFT_TYPE_REGISTRY\");\n    bytes32 public constant LOAN_REGISTRY = bytes32(\"LOAN_REGISTRY\");\n    bytes32 public constant PERMITTED_SNFT_RECEIVER = bytes32(\"PERMITTED_SNFT_RECEIVER\");\n    bytes32 public constant PERMITTED_BUNDLE_ERC20S = bytes32(\"PERMITTED_BUNDLE_ERC20S\");\n    bytes32 public constant PERMITTED_AIRDROPS = bytes32(\"PERMITTED_AIRDROPS\");\n    bytes32 public constant AIRDROP_RECEIVER = bytes32(\"AIRDROP_RECEIVER\");\n    bytes32 public constant AIRDROP_FACTORY = bytes32(\"AIRDROP_FACTORY\");\n    bytes32 public constant AIRDROP_FLASH_LOAN = bytes32(\"AIRDROP_FLASH_LOAN\");\n    bytes32 public constant NFTFI_BUNDLER = bytes32(\"NFTFI_BUNDLER\");\n\n    string public constant AIRDROP_WRAPPER_STRING = \"AirdropWrapper\";\n\n    /**\n     * @notice Returns the bytes32 representation of a string\n     * @param _key the string key\n     * @return id bytes32 representation\n     */\n    function getIdFromStringKey(string memory _key) external pure returns (bytes32 id) {\n        require(bytes(_key).length <= 32, \"invalid key\");\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            id := mload(add(_key, 32))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/utils/TokenTrade.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../utils/ContractKeys.sol\";\nimport \"../interfaces/IPermittedERC20s.sol\";\nimport \"../interfaces/INftfiHub.sol\";\nimport \"../interfaces/IDirectLoanCoordinator.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract TokenTrade {\n    using SafeERC20 for IERC20;\n    using ECDSA for bytes32;\n\n    INftfiHub public hub;\n\n    bytes32 public immutable LOAN_COORDINATOR;\n\n    constructor(address _nftfiHub, bytes32 _loanCoordinatorKey) {\n        hub = INftfiHub(_nftfiHub);\n        LOAN_COORDINATOR = _loanCoordinatorKey;\n    }\n\n    /**\n     * @notice A mapping that takes both a user's address and a trade nonce that was first used when signing an\n     * off-chain order and checks whether that nonce has previously either been used for a trade, or has been\n     * pre-emptively cancelled. The nonce referred to here is not the same as an Ethereum account's nonce.\n     * We are referring instead to nonces that are used by both the lender and the borrower when they are first\n     * signing off-chain NFTfi orders.\n     *\n     * These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each\n     * nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower\n     * in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would submit a\n     * user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling\n     * NFTfi.cancelTradeCommitment(), which marks the nonce as used and prevents any future trade from\n     * using the user's off-chain order that contains that nonce.\n     */\n    mapping(address => mapping(uint256 => bool)) private _nonceHasBeenUsedForUser;\n\n    /**\n     * @notice This function can be called by the initiator to cancel all off-chain orders that they\n     * have signed that contain this nonce. If the off-chain orders were created correctly, there should only be one\n     * off-chain order that contains this nonce at all.\n     *\n     * The nonce referred to here is not the same as an Ethereum account's nonce. We are referring\n     * instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi\n     * orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order.\n     * Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the\n     * borrower in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would\n     * submit a user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling\n     * NFTfi.cancelTradeCommitment(), which marks the nonce as used and prevents any future trade from\n     * using the user's off-chain order that contains that nonce.\n     *\n     * @param  _nonce - User nonce\n     */\n    function cancelTradeCommitment(uint256 _nonce) external {\n        require(!_nonceHasBeenUsedForUser[msg.sender][_nonce], \"Invalid nonce\");\n        _nonceHasBeenUsedForUser[msg.sender][_nonce] = true;\n    }\n\n    /**\n     * @notice This function can be used to view whether a particular nonce for a particular user has already been used,\n     * either from a successful trade or a cancelled off-chain order.\n     *\n     * @param _user - The address of the user. This function works for both lenders and borrowers alike.\n     * @param  _nonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are referring\n     * instead to nonces that are used by both the lender and the borrower when they are first signing off-chain\n     * NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain\n     * order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or\n     * the borrower in that situation. This serves two purposes:\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelTradeCommitment()\n     * , which marks the nonce as used and prevents any future trade from using the user's off-chain order that contains\n     * that nonce.\n     *\n     * @return A bool representing whether or not this nonce has been used for this user.\n     */\n    function getNonceUsage(address _user, uint256 _nonce) external view returns (bool) {\n        return _nonceHasBeenUsedForUser[_user][_nonce];\n    }\n\n    /**\n     * @notice trade initiator sells their obligation receipt to the accepter\n     * Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal\n     * both parties have to approve the token allowances for the trade contract before calling this function\n     *\n     * parameters: see trade()\n     */\n    function sellObligationReceipt(\n        address _tradeERC20,\n        uint256 _nftId,\n        uint256 _erc20Amount,\n        address _buyer,\n        uint256 _buyerNonce,\n        uint256 _expiry,\n        bytes memory _buyerSignature\n    ) external {\n        require(!_nonceHasBeenUsedForUser[_buyer][_buyerNonce], \"Buyer nonce invalid\");\n        _nonceHasBeenUsedForUser[_buyer][_buyerNonce] = true;\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\n        address obligationReceipt = loanCoordinator.obligationReceiptToken();\n        require(\n            isValidTradeSignature(\n                _tradeERC20,\n                obligationReceipt,\n                _nftId,\n                _erc20Amount,\n                _buyer,\n                _buyerNonce,\n                _expiry,\n                _buyerSignature\n            ),\n            \"Trade signature is invalid\"\n        );\n        trade(_tradeERC20, obligationReceipt, _nftId, _erc20Amount, msg.sender, _buyer);\n    }\n\n    /**\n     * @notice trade initiator buys obligation receipt of the accepter\n     * Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal\n     * both parties have to approve the token allowances for the trade contract before calling this function\n     *\n     * parameters: see trade()\n     */\n    function buyObligationReceipt(\n        address _tradeERC20,\n        uint256 _nftId,\n        uint256 _erc20Amount,\n        address _seller,\n        uint256 _sellerNonce,\n        uint256 _expiry,\n        bytes memory _sellerSignature\n    ) external {\n        require(!_nonceHasBeenUsedForUser[_seller][_sellerNonce], \"Seller nonce invalid\");\n        _nonceHasBeenUsedForUser[_seller][_sellerNonce] = true;\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\n        address obligationReceipt = loanCoordinator.obligationReceiptToken();\n        require(\n            isValidTradeSignature(\n                _tradeERC20,\n                obligationReceipt,\n                _nftId,\n                _erc20Amount,\n                _seller,\n                _sellerNonce,\n                _expiry,\n                _sellerSignature\n            ),\n            \"Trade signature is invalid\"\n        );\n        trade(_tradeERC20, obligationReceipt, _nftId, _erc20Amount, _seller, msg.sender);\n    }\n\n    /**\n     * @notice trade initiator sells their promissory note to the accepter\n     * Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal\n     * both parties have to approve the token allowances for the trade contract before calling this function\n     *\n     * parameters: see trade()\n     */\n    function sellPromissoryNote(\n        address _tradeERC20,\n        uint256 _nftId,\n        uint256 _erc20Amount,\n        address _buyer,\n        uint256 _buyerNonce,\n        uint256 _expiry,\n        bytes memory _buyerSignature\n    ) external {\n        require(!_nonceHasBeenUsedForUser[_buyer][_buyerNonce], \"Buyer nonce invalid\");\n        _nonceHasBeenUsedForUser[_buyer][_buyerNonce] = true;\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\n        address promissoryNote = loanCoordinator.promissoryNoteToken();\n        require(\n            isValidTradeSignature(\n                _tradeERC20,\n                promissoryNote,\n                _nftId,\n                _erc20Amount,\n                _buyer,\n                _buyerNonce,\n                _expiry,\n                _buyerSignature\n            ),\n            \"Trade signature is invalid\"\n        );\n        trade(_tradeERC20, promissoryNote, _nftId, _erc20Amount, msg.sender, _buyer);\n    }\n\n    /**\n     * @notice trade initiator buys promissory note of the accepter\n     * Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal\n     * both parties have to approve the token allowances for the trade contract before calling this function\n     *\n     * parameters: see trade()\n     */\n    function buyPromissoryNote(\n        address _tradeERC20,\n        uint256 _nftId,\n        uint256 _erc20Amount,\n        address _seller,\n        uint256 _sellerNonce,\n        uint256 _expiry,\n        bytes memory _sellerSignature\n    ) external {\n        require(!_nonceHasBeenUsedForUser[_seller][_sellerNonce], \"Seller nonce invalid\");\n        _nonceHasBeenUsedForUser[_seller][_sellerNonce] = true;\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\n        address promissoryNote = loanCoordinator.promissoryNoteToken();\n        require(\n            isValidTradeSignature(\n                _tradeERC20,\n                promissoryNote,\n                _nftId,\n                _erc20Amount,\n                _seller,\n                _sellerNonce,\n                _expiry,\n                _sellerSignature\n            ),\n            \"Trade signature is invalid\"\n        );\n        trade(_tradeERC20, promissoryNote, _nftId, _erc20Amount, _seller, msg.sender);\n    }\n\n    /**\n     * @notice Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal\n     * both parties have to approve the token allowances for the trade contract before calling this function\n     *\n     * @param _tradeERC20 - Contract address for the token denomination of the erc20 side of the trade,\n     * can only be a premitted erc20 token\n     * @param _tradeNft - Contract address for the loanNFT side of the trade,\n     * can only be the 'promissory note' or the 'obligation receipt' of the used loan coordinator\n     * @param _nftId - ID of the loanNFT to be tradeped\n     * true:\n     *      initiator sells loanNFT for erc20, accepter buys loanNFT for erc20\n     * false:\n     *      initiator buys loanNFT for erc20, accepter sells loanNFT for erc20\n     * @param _erc20Amount - amount of payment price in erc20 for the loanNFT\n     * @param _seller - address of the user selling the loanNFT for ERC20 tokens\n     * @param _buyer - address of the user buying the loanNFT for ERC20 tokens\n     */\n    function trade(\n        address _tradeERC20,\n        address _tradeNft,\n        uint256 _nftId,\n        uint256 _erc20Amount,\n        address _seller,\n        address _buyer\n    ) internal {\n        require(\n            IPermittedERC20s(hub.getContract(ContractKeys.PERMITTED_ERC20S)).getERC20Permit(_tradeERC20),\n            \"Currency denomination is not permitted\"\n        );\n        IERC20(_tradeERC20).safeTransferFrom(_buyer, _seller, _erc20Amount);\n        IERC721(_tradeNft).safeTransferFrom(_seller, _buyer, _nftId);\n    }\n\n    /**\n     * @notice This function is called in trade()to validate the trade initiator's signature that the lender\n     * has provided off-chain to verify that they did indeed want to\n     * agree to this loan renegotiation according to these terms.\n     *\n     * @param _tradeERC20 - Contract address for the token denomination of the erc20 side of the trade,\n     * can only be a premitted erc20 token\n     * @param _tradeNft - Contract address for the loanNFT side of the trade,\n     * can only be the 'promissory note' or the 'obligation receipt' of the used loan coordinator\n     * @param _nftId - ID of the loanNFT to be tradeped\n     * @param _erc20Amount - amount of payment price in erc20 for the loanNFT\n     * @param _accepter - address of the user accepting the proposed trade, they have created the off-chain signature\n     * @param _accepterNonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are\n     * referring instead to nonces that are used by both the lender and the borrower when they are first signing\n     * off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\n     * lender or the borrower in that situation. This serves two purposes:\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelTradeCommitment()\n     * , which marks the nonce as used and prevents any future trade from using the user's off-chain order that contains\n     * that nonce.\n     * @param _expiry - The date when the trade offer expires\n     * @param _accepterSignature - The ECDSA signature of the trade initiator,\n     * obtained off-chain ahead of time, signing the\n     * following combination of parameters:\n     * - tradeERC20,\n     * - tradeLoanNft,\n     * - loanNftId,\n     * - erc20Amount,\n     * - initiator,\n     * - accepter,\n     * - initiatorNonce,\n     * - expiry,\n     * - chainId\n     */\n    function isValidTradeSignature(\n        address _tradeERC20,\n        address _tradeNft,\n        uint256 _nftId,\n        uint256 _erc20Amount,\n        address _accepter,\n        uint256 _accepterNonce,\n        uint256 _expiry,\n        bytes memory _accepterSignature\n    ) public view returns (bool) {\n        require(block.timestamp <= _expiry, \"Trade Signature has expired\");\n        if (_accepter == address(0)) {\n            return false;\n        } else {\n            bytes32 message = keccak256(\n                abi.encodePacked(\n                    _tradeERC20,\n                    _tradeNft,\n                    _nftId,\n                    _erc20Amount,\n                    _accepter,\n                    _accepterNonce,\n                    _expiry,\n                    getChainID()\n                )\n            );\n\n            bytes32 messageWithEthSignPrefix = message.toEthSignedMessageHash();\n\n            return (messageWithEthSignPrefix.recover(_accepterSignature) == _accepter);\n        }\n    }\n\n    /**\n     * @dev This function gets the current chain ID.\n     */\n    function getChainID() internal view returns (uint256) {\n        uint256 id;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n}\n"
    },
    "contracts/interfaces/IPermittedERC20s.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\ninterface IPermittedERC20s {\n    function getERC20Permit(address _erc20) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IDirectLoanCoordinator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\n/**\n * @title IDirectLoanCoordinator\n * @author NFTfi\n * @dev DirectLoanCoordinator interface.\n */\ninterface IDirectLoanCoordinator {\n    enum StatusType {\n        NOT_EXISTS,\n        NEW,\n        RESOLVED\n    }\n\n    /**\n     * @notice This struct contains data related to a loan\n     *\n     * @param smartNftId - The id of both the promissory note and obligation receipt.\n     * @param status - The status in which the loan currently is.\n     * @param loanContract - Address of the LoanType contract that created the loan.\n     */\n    struct Loan {\n        address loanContract;\n        uint64 smartNftId;\n        StatusType status;\n    }\n\n    function registerLoan(address _lender, bytes32 _loanType) external returns (uint32);\n\n    function mintObligationReceipt(uint32 _loanId, address _borrower) external;\n\n    function resolveLoan(uint32 _loanId) external;\n\n    function promissoryNoteToken() external view returns (address);\n\n    function obligationReceiptToken() external view returns (address);\n\n    function getLoanData(uint32 _loanId) external view returns (Loan memory);\n\n    function isValidLoanId(uint32 _loanId, address _loanContract) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/test/TestSigningUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"../loans/direct/loanTypes/LoanData.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../utils/NFTfiSigningUtils.sol\";\n\n/**\n * @title  TestSigningUtils\n * @author NFTfi\n * @notice Wrapping the NFTfiSigningUtils library in a contract so it can be unit tested\n */\ncontract TestSigningUtils {\n    function getChainID() public view returns (uint256) {\n        return NFTfiSigningUtils.getChainID();\n    }\n\n    function isValidBorrowerSignature(LoanData.ListingTerms memory _listingTerms, LoanData.Signature memory _signature)\n        public\n        view\n        returns (bool)\n    {\n        return NFTfiSigningUtils.isValidBorrowerSignature(_listingTerms, _signature);\n    }\n\n    function isValidLenderSignature(LoanData.Offer memory _offer, LoanData.Signature memory _signature)\n        public\n        view\n        returns (bool)\n    {\n        return NFTfiSigningUtils.isValidLenderSignature(_offer, _signature);\n    }\n\n    function isValidLenderRenegotiationSignature(\n        uint32 _loanId,\n        uint32 _newLoanDuration,\n        uint256 _newMaximumRepaymentAmount,\n        uint256 _renegotiationFee,\n        LoanData.Signature memory _signature\n    ) public view returns (bool) {\n        return\n            NFTfiSigningUtils.isValidLenderRenegotiationSignature(\n                _loanId,\n                _newLoanDuration,\n                _newMaximumRepaymentAmount,\n                _renegotiationFee,\n                _signature\n            );\n    }\n}\n"
    },
    "contracts/loans/direct/loanTypes/LoanData.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\n/**\n * @title  LoanData\n * @author NFTfi\n * @notice An interface containg the main Loan struct shared by Direct Loans types.\n */\ninterface LoanData {\n    /* ********** */\n    /* DATA TYPES */\n    /* ********** */\n\n    /**\n     * @notice The main Loan Terms struct. This data is saved upon loan creation.\n     *\n     * @param loanERC20Denomination - The address of the ERC20 contract of the currency being used as principal/interest\n     * for this loan.\n     * @param loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * @param maximumRepaymentAmount - The maximum amount of money that the borrower would be required to retrieve their\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\n     * @param nftCollateralContract - The address of the the NFT collateral contract.\n     * @param nftCollateralWrapper - The NFTfi wrapper of the NFT collateral contract.\n     * @param nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\n     * loan. The NFT is stored within this contract during the duration of the loan.\n     * @param loanStartTime - The block.timestamp when the loan first began (measured in seconds).\n     * @param loanDuration - The amount of time (measured in seconds) that can elapse before the lender can liquidate\n     * the loan and seize the underlying collateral NFT.\n     * @param loanInterestRateForDurationInBasisPoints - This is the interest rate (measured in basis points, e.g.\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\n     * is irrelevant so it should be set to 0.\n     * @param loanAdminFeeInBasisPoints - The percent (measured in basis points) of the interest earned that will be\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\n     * earned.\n     * @param borrower\n     */\n    struct LoanTerms {\n        uint256 loanPrincipalAmount;\n        uint256 maximumRepaymentAmount;\n        uint256 nftCollateralId;\n        address loanERC20Denomination;\n        uint32 loanDuration;\n        uint16 loanInterestRateForDurationInBasisPoints;\n        uint16 loanAdminFeeInBasisPoints;\n        address nftCollateralWrapper;\n        uint64 loanStartTime;\n        address nftCollateralContract;\n        address borrower;\n    }\n\n    /**\n     * @notice Some extra Loan's settings struct. This data is saved upon loan creation.\n     * We need this to avoid stack too deep errors.\n     *\n     * @param revenueSharePartner - The address of the partner that will receive the revenue share.\n     * @param revenueShareInBasisPoints - The percent (measured in basis points) of the admin fee amount that will be\n     * taken as a revenue share for a t\n     * @param referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.he partner, at the moment\n     * the loan is begun.\n     */\n    struct LoanExtras {\n        address revenueSharePartner;\n        uint16 revenueShareInBasisPoints;\n        uint16 referralFeeInBasisPoints;\n    }\n\n    /**\n     * @notice The offer made by the lender. Used as parameter on both acceptOffer (initiated by the borrower) and\n     * acceptListing (initiated by the lender).\n     *\n     * @param loanERC20Denomination - The address of the ERC20 contract of the currency being used as principal/interest\n     * for this loan.\n     * @param loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * @param maximumRepaymentAmount - The maximum amount of money that the borrower would be required to retrieve their\n     *  collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always\n     * have to pay this amount to retrieve their collateral, regardless of whether they repay early.\n     * @param nftCollateralContract - The address of the ERC721 contract of the NFT collateral.\n     * @param nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\n     * loan. The NFT is stored within this contract during the duration of the loan.\n     * @param referrer - The address of the referrer who found the lender matching the listing, Zero address to signal\n     * this there is no referrer.\n     * @param loanDuration - The amount of time (measured in seconds) that can elapse before the lender can liquidate\n     * the loan and seize the underlying collateral NFT.\n     * @param loanAdminFeeInBasisPoints - The percent (measured in basis points) of the interest earned that will be\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\n     * earned.\n     */\n    struct Offer {\n        uint256 loanPrincipalAmount;\n        uint256 maximumRepaymentAmount;\n        uint256 nftCollateralId;\n        address nftCollateralContract;\n        uint32 loanDuration;\n        uint16 loanAdminFeeInBasisPoints;\n        address loanERC20Denomination;\n        address referrer;\n    }\n\n    /**\n     * @notice Signature related params. Used as parameter on both acceptOffer (containing borrower signature) and\n     * acceptListing (containing lender signature).\n     *\n     * @param signer - The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\n     * @param nonce - The nonce referred here is not the same as an Ethereum account's nonce.\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\n     * lender or the borrower in that situation. This serves two purposes:\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\n     * that nonce.\n     * @param expiry - Date when the signature expires\n     * @param signature - The ECDSA signature of the borrower or the lender, obtained off-chain ahead of time, signing\n     * the following combination of parameters:\n     * - Borrower\n     *   - ListingTerms.loanERC20Denomination,\n     *   - ListingTerms.minLoanPrincipalAmount,\n     *   - ListingTerms.maxLoanPrincipalAmount,\n     *   - ListingTerms.nftCollateralContract,\n     *   - ListingTerms.nftCollateralId,\n     *   - ListingTerms.revenueSharePartner,\n     *   - ListingTerms.minLoanDuration,\n     *   - ListingTerms.maxLoanDuration,\n     *   - ListingTerms.maxInterestRateForDurationInBasisPoints,\n     *   - ListingTerms.referralFeeInBasisPoints,\n     *   - Signature.signer,\n     *   - Signature.nonce,\n     *   - Signature.expiry,\n     *   - address of the loan type contract\n     *   - chainId\n     * - Lender:\n     *   - Offer.loanERC20Denomination\n     *   - Offer.loanPrincipalAmount\n     *   - Offer.maximumRepaymentAmount\n     *   - Offer.nftCollateralContract\n     *   - Offer.nftCollateralId\n     *   - Offer.referrer\n     *   - Offer.loanDuration\n     *   - Offer.loanAdminFeeInBasisPoints\n     *   - Signature.signer,\n     *   - Signature.nonce,\n     *   - Signature.expiry,\n     *   - address of the loan type contract\n     *   - chainId\n     */\n    struct Signature {\n        uint256 nonce;\n        uint256 expiry;\n        address signer;\n        bytes signature;\n    }\n\n    /**\n     * @notice Some extra parameters that the borrower needs to set when accepting an offer.\n     *\n     * @param revenueSharePartner - The address of the partner that will receive the revenue share.\n     * @param referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\n     */\n    struct BorrowerSettings {\n        address revenueSharePartner;\n        uint16 referralFeeInBasisPoints;\n    }\n\n    /**\n     * @notice Terms the borrower set off-chain and is willing to accept automatically when fulfiled by a lender's\n     * offer.\n     *\n     * @param loanERC20Denomination - The address of the ERC20 contract of the currency being used as principal/interest\n     * for this loan.\n     * @param minLoanPrincipalAmount - The minumum sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * @param maxLoanPrincipalAmount - The  sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * @param maximumRepaymentAmount - The maximum amount of money that the borrower would be required to retrieve their\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\n     * @param nftCollateralContract - The address of the ERC721 contract of the NFT collateral.\n     * @param nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\n     * loan. The NFT is stored within this contract during the duration of the loan.\n     * @param revenueSharePartner - The address of the partner that will receive the revenue share.\n     * @param minLoanDuration - The minumum amount of time (measured in seconds) that can elapse before the lender can\n     * liquidate the loan and seize the underlying collateral NFT.\n     * @param maxLoanDuration - The maximum amount of time (measured in seconds) that can elapse before the lender can\n     * liquidate the loan and seize the underlying collateral NFT.\n     * @param maxInterestRateForDurationInBasisPoints - This is maximum the interest rate (measured in basis points,\n     * e.g. hundreths of a percent) for the loan.\n     * @param referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\n     */\n    struct ListingTerms {\n        uint256 minLoanPrincipalAmount;\n        uint256 maxLoanPrincipalAmount;\n        uint256 nftCollateralId;\n        address nftCollateralContract;\n        uint32 minLoanDuration;\n        uint32 maxLoanDuration;\n        uint16 maxInterestRateForDurationInBasisPoints;\n        uint16 referralFeeInBasisPoints;\n        address revenueSharePartner;\n        address loanERC20Denomination;\n    }\n}\n"
    },
    "contracts/utils/NFTfiSigningUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"../interfaces/IBundleBuilder.sol\";\nimport \"../loans/direct/loanTypes/LoanData.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\n\n/**\n * @title  NFTfiSigningUtils\n * @author NFTfi\n * @notice Helper contract for NFTfi. This contract manages verifying signatures from off-chain NFTfi orders.\n * Based on the version of this same contract used on NFTfi V1\n */\nlibrary NFTfiSigningUtils {\n    /* ********* */\n    /* FUNCTIONS */\n    /* ********* */\n\n    /**\n     * @dev This function gets the current chain ID.\n     */\n    function getChainID() public view returns (uint256) {\n        uint256 id;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n\n    /**\n     * @notice This function is when the lender accepts a borrower's binding listing terms, to validate the lender's\n     * signature that the borrower provided off-chain to verify that it did indeed made such listing.\n     *\n     * @param _listingTerms - The listing terms struct containing:\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\n     * for this loan.\n     * - minLoanPrincipalAmount: The minumum sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * - maxLoanPrincipalAmount: The  sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\n     * loan. The NFT is stored within this contract during the duration of the loan.\n     * - revenueSharePartner: The address of the partner that will receive the revenue share.\n     * - minLoanDuration: The minumum amount of time (measured in seconds) that can elapse before the lender can\n     * liquidate the loan and seize the underlying collateral NFT.\n     * - maxLoanDuration: The maximum amount of time (measured in seconds) that can elapse before the lender can\n     * liquidate the loan and seize the underlying collateral NFT.\n     * - maxInterestRateForDurationInBasisPoints: This is maximum the interest rate (measured in basis points, e.g.\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\n     * is irrelevant so it should be set to 0.\n     * - referralFeeInBasisPoints: The percent (measured in basis points) of the loan principal amount that will be\n     * taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\n     * @param _signature - The offer struct containing:\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\n     * lender or the borrower in that situation. This serves two purposes:\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     *   - Second, it allows a user to cancel an off-chain order by calling\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\n     * using the user's off-chain order that contains that nonce.\n     * - expiry: Date when the signature expires\n     * - signature: The ECDSA signature of the borrower, obtained off-chain ahead of time, signing the following\n     * combination of parameters:\n     *   - listingTerms.loanERC20Denomination,\n     *   - listingTerms.minLoanPrincipalAmount,\n     *   - listingTerms.maxLoanPrincipalAmount,\n     *   - listingTerms.nftCollateralContract,\n     *   - listingTerms.nftCollateralId,\n     *   - listingTerms.revenueSharePartner,\n     *   - listingTerms.minLoanDuration,\n     *   - listingTerms.maxLoanDuration,\n     *   - listingTerms.maxInterestRateForDurationInBasisPoints,\n     *   - listingTerms.referralFeeInBasisPoints,\n     *   - signature.signer,\n     *   - signature.nonce,\n     *   - signature.expiry,\n     *   - address of this contract\n     *   - chainId\n     */\n    function isValidBorrowerSignature(LoanData.ListingTerms memory _listingTerms, LoanData.Signature memory _signature)\n        external\n        view\n        returns (bool)\n    {\n        return isValidBorrowerSignature(_listingTerms, _signature, address(this));\n    }\n\n    /**\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\n     *\n     */\n    function isValidBorrowerSignature(\n        LoanData.ListingTerms memory _listingTerms,\n        LoanData.Signature memory _signature,\n        address _loanContract\n    ) public view returns (bool) {\n        require(block.timestamp <= _signature.expiry, \"Borrower Signature has expired\");\n        require(_loanContract != address(0), \"Loan is zero address\");\n        if (_signature.signer == address(0)) {\n            return false;\n        } else {\n            bytes32 message = keccak256(\n                abi.encodePacked(\n                    getEncodedListing(_listingTerms),\n                    getEncodedSignature(_signature),\n                    _loanContract,\n                    getChainID()\n                )\n            );\n\n            return\n                SignatureChecker.isValidSignatureNow(\n                    _signature.signer,\n                    ECDSA.toEthSignedMessageHash(message),\n                    _signature.signature\n                );\n        }\n    }\n\n    /**\n     * @notice This function is when the lender accepts a borrower's binding listing terms, to validate the lender's\n     * signature that the borrower provided off-chain to verify that it did indeed made such listing.\n     *\n     * @param _listingTerms - The listing terms struct containing:\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\n     * for this loan.\n     * - minLoanPrincipalAmount: The minumum sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * - maxLoanPrincipalAmount: The  sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\n     * loan. The NFT is stored within this contract during the duration of the loan.\n     * - revenueSharePartner: The address of the partner that will receive the revenue share.\n     * - minLoanDuration: The minumum amount of time (measured in seconds) that can elapse before the lender can\n     * liquidate the loan and seize the underlying collateral NFT.\n     * - maxLoanDuration: The maximum amount of time (measured in seconds) that can elapse before the lender can\n     * liquidate the loan and seize the underlying collateral NFT.\n     * - maxInterestRateForDurationInBasisPoints: This is maximum the interest rate (measured in basis points, e.g.\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\n     * is irrelevant so it should be set to 0.\n     * - referralFeeInBasisPoints: The percent (measured in basis points) of the loan principal amount that will be\n     * taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\n     * @param _bundleElements - the lists of erc721-20-1155 tokens that are to be bundled\n     * @param _signature - The offer struct containing:\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\n     * lender or the borrower in that situation. This serves two purposes:\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     *   - Second, it allows a user to cancel an off-chain order by calling\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\n     * using the user's off-chain order that contains that nonce.\n     * - expiry: Date when the signature expires\n     * - signature: The ECDSA signature of the borrower, obtained off-chain ahead of time, signing the following\n     * combination of parameters:\n     *   - listingTerms.loanERC20Denomination,\n     *   - listingTerms.minLoanPrincipalAmount,\n     *   - listingTerms.maxLoanPrincipalAmount,\n     *   - listingTerms.nftCollateralContract,\n     *   - listingTerms.nftCollateralId,\n     *   - listingTerms.revenueSharePartner,\n     *   - listingTerms.minLoanDuration,\n     *   - listingTerms.maxLoanDuration,\n     *   - listingTerms.maxInterestRateForDurationInBasisPoints,\n     *   - listingTerms.referralFeeInBasisPoints,\n     *   - bundleElements\n     *   - signature.signer,\n     *   - signature.nonce,\n     *   - signature.expiry,\n     *   - address of this contract\n     *   - chainId\n     */\n    function isValidBorrowerSignatureBundle(\n        LoanData.ListingTerms memory _listingTerms,\n        IBundleBuilder.BundleElements memory _bundleElements,\n        LoanData.Signature memory _signature\n    ) external view returns (bool) {\n        return isValidBorrowerSignatureBundle(_listingTerms, _bundleElements, _signature, address(this));\n    }\n\n    /**\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\n     *\n     */\n    function isValidBorrowerSignatureBundle(\n        LoanData.ListingTerms memory _listingTerms,\n        IBundleBuilder.BundleElements memory _bundleElements,\n        LoanData.Signature memory _signature,\n        address _loanContract\n    ) public view returns (bool) {\n        require(block.timestamp <= _signature.expiry, \"Borrower Signature has expired\");\n        require(_loanContract != address(0), \"Loan is zero address\");\n        if (_signature.signer == address(0)) {\n            return false;\n        } else {\n            bytes32 message = keccak256(\n                abi.encodePacked(\n                    getEncodedListing(_listingTerms),\n                    abi.encode(_bundleElements),\n                    getEncodedSignature(_signature),\n                    _loanContract,\n                    getChainID()\n                )\n            );\n\n            return\n                SignatureChecker.isValidSignatureNow(\n                    _signature.signer,\n                    ECDSA.toEthSignedMessageHash(message),\n                    _signature.signature\n                );\n        }\n    }\n\n    /**\n     * @notice This function is when the borrower accepts a lender's offer, to validate the lender's signature that the\n     * lender provided off-chain to verify that it did indeed made such offer.\n     *\n     * @param _offer - The offer struct containing:\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\n     * for this loan.\n     * - loanPrincipalAmount: The original sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\n     * loan. The NFT is stored within this contract during the duration of the loan.\n     * - referrer: The address of the referrer who found the lender matching the listing, Zero address to signal\n     * this there is no referrer.\n     * - loanDuration: The amount of time (measured in seconds) that can elapse before the lender can liquidate the\n     * loan and seize the underlying collateral NFT.\n     * - loanInterestRateForDurationInBasisPoints: This is the interest rate (measured in basis points, e.g.\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\n     * is irrelevant so it should be set to 0.\n     * - loanAdminFeeInBasisPoints: The percent (measured in basis points) of the interest earned that will be\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\n     * earned.\n     * @param _signature - The signature structure containing:\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\n     * lender or the borrower in that situation. This serves two purposes:\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     *   - Second, it allows a user to cancel an off-chain order by calling\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\n     * using the user's off-chain order that contains that nonce.\n     * - expiry: Date when the signature expires\n     * - signature: The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following\n     * combination of parameters:\n     *   - offer.loanERC20Denomination\n     *   - offer.loanPrincipalAmount\n     *   - offer.maximumRepaymentAmount\n     *   - offer.nftCollateralContract\n     *   - offer.nftCollateralId\n     *   - offer.referrer\n     *   - offer.loanDuration\n     *   - offer.loanAdminFeeInBasisPoints\n     *   - signature.signer,\n     *   - signature.nonce,\n     *   - signature.expiry,\n     *   - address of this contract\n     *   - chainId\n     */\n    function isValidLenderSignature(LoanData.Offer memory _offer, LoanData.Signature memory _signature)\n        external\n        view\n        returns (bool)\n    {\n        return isValidLenderSignature(_offer, _signature, address(this));\n    }\n\n    /**\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\n     *\n     */\n    function isValidLenderSignature(\n        LoanData.Offer memory _offer,\n        LoanData.Signature memory _signature,\n        address _loanContract\n    ) public view returns (bool) {\n        require(block.timestamp <= _signature.expiry, \"Lender Signature has expired\");\n        require(_loanContract != address(0), \"Loan is zero address\");\n        if (_signature.signer == address(0)) {\n            return false;\n        } else {\n            bytes32 message = keccak256(\n                abi.encodePacked(getEncodedOffer(_offer), getEncodedSignature(_signature), _loanContract, getChainID())\n            );\n\n            return\n                SignatureChecker.isValidSignatureNow(\n                    _signature.signer,\n                    ECDSA.toEthSignedMessageHash(message),\n                    _signature.signature\n                );\n        }\n    }\n\n    /**\n     * @notice This function is when the borrower accepts a lender's offer, to validate the lender's signature that the\n     * lender provided off-chain to verify that it did indeed made such offer.\n     *\n     * @param _offer - The offer struct containing:\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\n     * for this loan.\n     * - loanPrincipalAmount: The original sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\n     * loan. The NFT is stored within this contract during the duration of the loan.\n     * - referrer: The address of the referrer who found the lender matching the listing, Zero address to signal\n     * this there is no referrer.\n     * - loanDuration: The amount of time (measured in seconds) that can elapse before the lender can liquidate the\n     * loan and seize the underlying collateral NFT.\n     * - loanInterestRateForDurationInBasisPoints: This is the interest rate (measured in basis points, e.g.\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\n     * is irrelevant so it should be set to 0.\n     * - loanAdminFeeInBasisPoints: The percent (measured in basis points) of the interest earned that will be\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\n     * earned.\n     * @param _bundleElements - the lists of erc721-20-1155 tokens that are to be bundled\n     * @param _signature - The signature structure containing:\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\n     * lender or the borrower in that situation. This serves two purposes:\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     *   - Second, it allows a user to cancel an off-chain order by calling\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\n     * using the user's off-chain order that contains that nonce.\n     * - expiry: Date when the signature expires\n     * - signature: The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following\n     * combination of parameters:\n     *   - offer.loanERC20Denomination\n     *   - offer.loanPrincipalAmount\n     *   - offer.maximumRepaymentAmount\n     *   - offer.nftCollateralContract\n     *   - offer.nftCollateralId\n     *   - offer.referrer\n     *   - offer.loanDuration\n     *   - offer.loanAdminFeeInBasisPoints\n     *   - bundleElements\n     *   - signature.signer,\n     *   - signature.nonce,\n     *   - signature.expiry,\n     *   - address of this contract\n     *   - chainId\n     */\n    function isValidLenderSignatureBundle(\n        LoanData.Offer memory _offer,\n        IBundleBuilder.BundleElements memory _bundleElements,\n        LoanData.Signature memory _signature\n    ) external view returns (bool) {\n        return isValidLenderSignatureBundle(_offer, _bundleElements, _signature, address(this));\n    }\n\n    /**\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\n     *\n     */\n    function isValidLenderSignatureBundle(\n        LoanData.Offer memory _offer,\n        IBundleBuilder.BundleElements memory _bundleElements,\n        LoanData.Signature memory _signature,\n        address _loanContract\n    ) public view returns (bool) {\n        require(block.timestamp <= _signature.expiry, \"Lender Signature has expired\");\n        require(_loanContract != address(0), \"Loan is zero address\");\n        if (_signature.signer == address(0)) {\n            return false;\n        } else {\n            bytes32 message = keccak256(\n                abi.encodePacked(\n                    getEncodedOffer(_offer),\n                    abi.encode(_bundleElements),\n                    getEncodedSignature(_signature),\n                    _loanContract,\n                    getChainID()\n                )\n            );\n\n            return\n                SignatureChecker.isValidSignatureNow(\n                    _signature.signer,\n                    ECDSA.toEthSignedMessageHash(message),\n                    _signature.signature\n                );\n        }\n    }\n\n    /**\n     * @notice This function is called in renegotiateLoan() to validate the lender's signature that the lender provided\n     * off-chain to verify that they did indeed want to agree to this loan renegotiation according to these terms.\n     *\n     * @param _loanId - The unique identifier for the loan to be renegotiated\n     * @param _newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\n     * liquidate the loan and seize the underlying collateral NFT.\n     * @param _newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\n     * early.\n     * @param _renegotiationFee Agreed upon fee in ether that borrower pays for the lender for the renegitiation\n     * @param _signature - The signature structure containing:\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\n     * lender or the borrower in that situation. This serves two purposes:\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\n     * that nonce.\n     * - expiry - The date when the renegotiation offer expires\n     * - lenderSignature - The ECDSA signature of the lender, obtained off-chain ahead of time, signing the\n     * following combination of parameters:\n     * - _loanId\n     * - _newLoanDuration\n     * - _newMaximumRepaymentAmount\n     * - _lender\n     * - _lenderNonce\n     * - _expiry\n     * - address of this contract\n     * - chainId\n     */\n    function isValidLenderRenegotiationSignature(\n        uint256 _loanId,\n        uint32 _newLoanDuration,\n        uint256 _newMaximumRepaymentAmount,\n        uint256 _renegotiationFee,\n        LoanData.Signature memory _signature\n    ) external view returns (bool) {\n        return\n            isValidLenderRenegotiationSignature(\n                _loanId,\n                _newLoanDuration,\n                _newMaximumRepaymentAmount,\n                _renegotiationFee,\n                _signature,\n                address(this)\n            );\n    }\n\n    /**\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\n     *\n     */\n    function isValidLenderRenegotiationSignature(\n        uint256 _loanId,\n        uint32 _newLoanDuration,\n        uint256 _newMaximumRepaymentAmount,\n        uint256 _renegotiationFee,\n        LoanData.Signature memory _signature,\n        address _loanContract\n    ) public view returns (bool) {\n        require(block.timestamp <= _signature.expiry, \"Renegotiation Signature has expired\");\n        require(_loanContract != address(0), \"Loan is zero address\");\n        if (_signature.signer == address(0)) {\n            return false;\n        } else {\n            bytes32 message = keccak256(\n                abi.encodePacked(\n                    _loanId,\n                    _newLoanDuration,\n                    _newMaximumRepaymentAmount,\n                    _renegotiationFee,\n                    getEncodedSignature(_signature),\n                    _loanContract,\n                    getChainID()\n                )\n            );\n\n            return\n                SignatureChecker.isValidSignatureNow(\n                    _signature.signer,\n                    ECDSA.toEthSignedMessageHash(message),\n                    _signature.signature\n                );\n        }\n    }\n\n    /**\n     * @dev We need this to avoid stack too deep errors.\n     */\n    function getEncodedListing(LoanData.ListingTerms memory _listingTerms) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                _listingTerms.loanERC20Denomination,\n                _listingTerms.minLoanPrincipalAmount,\n                _listingTerms.maxLoanPrincipalAmount,\n                _listingTerms.nftCollateralContract,\n                _listingTerms.nftCollateralId,\n                _listingTerms.revenueSharePartner,\n                _listingTerms.minLoanDuration,\n                _listingTerms.maxLoanDuration,\n                _listingTerms.maxInterestRateForDurationInBasisPoints,\n                _listingTerms.referralFeeInBasisPoints\n            );\n    }\n\n    /**\n     * @dev We need this to avoid stack too deep errors.\n     */\n    function getEncodedOffer(LoanData.Offer memory _offer) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                _offer.loanERC20Denomination,\n                _offer.loanPrincipalAmount,\n                _offer.maximumRepaymentAmount,\n                _offer.nftCollateralContract,\n                _offer.nftCollateralId,\n                _offer.referrer,\n                _offer.loanDuration,\n                _offer.loanAdminFeeInBasisPoints\n            );\n    }\n\n    /**\n     * @dev We need this to avoid stack too deep errors.\n     */\n    function getEncodedSignature(LoanData.Signature memory _signature) internal pure returns (bytes memory) {\n        return abi.encodePacked(_signature.signer, _signature.nonce, _signature.expiry);\n    }\n}\n"
    },
    "contracts/interfaces/IBundleBuilder.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\ninterface IBundleBuilder {\n    /**\n     * @notice data of a erc721 bundle element\n     *\n     * @param tokenContract - address of the token contract\n     * @param id - id of the token\n     * @param safeTransferable - wether the implementing token contract has a safeTransfer function or not\n     */\n    struct BundleElementERC721 {\n        address tokenContract;\n        uint256 id;\n        bool safeTransferable;\n    }\n\n    /**\n     * @notice data of a erc20 bundle element\n     *\n     * @param tokenContract - address of the token contract\n     * @param amount - amount of the token\n     */\n    struct BundleElementERC20 {\n        address tokenContract;\n        uint256 amount;\n    }\n\n    /**\n     * @notice data of a erc20 bundle element\n     *\n     * @param tokenContract - address of the token contract\n     * @param ids - list of ids of the tokens\n     * @param amounts - list amounts of the tokens\n     */\n    struct BundleElementERC1155 {\n        address tokenContract;\n        uint256[] ids;\n        uint256[] amounts;\n    }\n\n    /**\n     * @notice the lists of erc721-20-1155 tokens that are to be bundled\n     *\n     * @param erc721s list of erc721 tokens\n     * @param erc20s list of erc20 tokens\n     * @param erc1155s list of erc1155 tokens\n     */\n    struct BundleElements {\n        BundleElementERC721[] erc721s;\n        BundleElementERC20[] erc20s;\n        BundleElementERC1155[] erc1155s;\n    }\n\n    /**\n     * @notice used by the loan contract to build a bundle from the BundleElements struct at the beginning of a loan,\n     * returns the id of the created bundle\n     *\n     * @param _bundleElements - the lists of erc721-20-1155 tokens that are to be bundled\n     * @param _sender sender of the tokens in the bundle - the borrower\n     * @param _receiver receiver of the created bundle, normally the loan contract\n     */\n    function buildBundle(\n        BundleElements memory _bundleElements,\n        address _sender,\n        address _receiver\n    ) external returns (uint256);\n\n    /**\n     * @notice Remove all the children from the bundle\n     * @dev This method may run out of gas if the list of children is too big. In that case, children can be removed\n     *      individually.\n     * @param _tokenId the id of the bundle\n     * @param _receiver address of the receiver of the children\n     */\n    function decomposeBundle(uint256 _tokenId, address _receiver) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../Address.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "contracts/utils/NFTfiSigningUtilsContract.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"./NFTfiSigningUtils.sol\";\n\n/**\n * @title  NFTfiSigningUtilsContract\n * @author NFTfi\n * @notice Helper contract for NFTfi. This contract manages externally verifying signatures from off-chain NFTfi orders.\n */\ncontract NFTfiSigningUtilsContract {\n    /* ********* */\n    /* FUNCTIONS */\n    /* ********* */\n\n    /**\n     * @notice This function is when the lender accepts a borrower's binding listing terms, to validate the lender's\n     * signature that the borrower provided off-chain to verify that it did indeed made such listing.\n     *\n     * @param _listingTerms - The listing terms struct containing:\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\n     * for this loan.\n     * - minLoanPrincipalAmount: The minumum sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * - maxLoanPrincipalAmount: The  sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\n     * loan. The NFT is stored within this contract during the duration of the loan.\n     * - revenueSharePartner: The address of the partner that will receive the revenue share.\n     * - minLoanDuration: The minumum amount of time (measured in seconds) that can elapse before the lender can\n     * liquidate the loan and seize the underlying collateral NFT.\n     * - maxLoanDuration: The maximum amount of time (measured in seconds) that can elapse before the lender can\n     * liquidate the loan and seize the underlying collateral NFT.\n     * - maxInterestRateForDurationInBasisPoints: This is maximum the interest rate (measured in basis points, e.g.\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\n     * is irrelevant so it should be set to 0.\n     * - referralFeeInBasisPoints: The percent (measured in basis points) of the loan principal amount that will be\n     * taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\n     * @param _signature - The offer struct containing:\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\n     * lender or the borrower in that situation. This serves two purposes:\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     *   - Second, it allows a user to cancel an off-chain order by calling\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\n     * using the user's off-chain order that contains that nonce.\n     * - expiry: Date when the signature expires\n     * - signature: The ECDSA signature of the borrower, obtained off-chain ahead of time, signing the following\n     * combination of parameters:\n     *   - listingTerms.loanERC20Denomination,\n     *   - listingTerms.minLoanPrincipalAmount,\n     *   - listingTerms.maxLoanPrincipalAmount,\n     *   - listingTerms.nftCollateralContract,\n     *   - listingTerms.nftCollateralId,\n     *   - listingTerms.revenueSharePartner,\n     *   - listingTerms.minLoanDuration,\n     *   - listingTerms.maxLoanDuration,\n     *   - listingTerms.maxInterestRateForDurationInBasisPoints,\n     *   - listingTerms.referralFeeInBasisPoints,\n     *   - signature.signer,\n     *   - signature.nonce,\n     *   - signature.expiry,\n     *   - loan contract address,\n     *   - chainId\n     * @param _loanContract - Address of the loan contract where the signature is going to be used\n     */\n    function isValidBorrowerSignature(\n        LoanData.ListingTerms memory _listingTerms,\n        LoanData.Signature memory _signature,\n        address _loanContract\n    ) external view returns (bool) {\n        return NFTfiSigningUtils.isValidBorrowerSignature(_listingTerms, _signature, _loanContract);\n    }\n\n    /**\n     * @notice This function is when the lender accepts a borrower's binding listing terms, to validate the lender's\n     * signature that the borrower provided off-chain to verify that it did indeed made such listing.\n     *\n     * @param _listingTerms - The listing terms struct containing:\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\n     * for this loan.\n     * - minLoanPrincipalAmount: The minumum sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * - maxLoanPrincipalAmount: The  sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\n     * loan. The NFT is stored within this contract during the duration of the loan.\n     * - revenueSharePartner: The address of the partner that will receive the revenue share.\n     * - minLoanDuration: The minumum amount of time (measured in seconds) that can elapse before the lender can\n     * liquidate the loan and seize the underlying collateral NFT.\n     * - maxLoanDuration: The maximum amount of time (measured in seconds) that can elapse before the lender can\n     * liquidate the loan and seize the underlying collateral NFT.\n     * - maxInterestRateForDurationInBasisPoints: This is maximum the interest rate (measured in basis points, e.g.\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\n     * is irrelevant so it should be set to 0.\n     * - referralFeeInBasisPoints: The percent (measured in basis points) of the loan principal amount that will be\n     * taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\n     * @param _bundleElements - the lists of erc721-20-1155 tokens that are to be bundled\n     * @param _signature - The offer struct containing:\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\n     * lender or the borrower in that situation. This serves two purposes:\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     *   - Second, it allows a user to cancel an off-chain order by calling\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\n     * using the user's off-chain order that contains that nonce.\n     * - expiry: Date when the signature expires\n     * - signature: The ECDSA signature of the borrower, obtained off-chain ahead of time, signing the following\n     * combination of parameters:\n     *   - listingTerms.loanERC20Denomination,\n     *   - listingTerms.minLoanPrincipalAmount,\n     *   - listingTerms.maxLoanPrincipalAmount,\n     *   - listingTerms.nftCollateralContract,\n     *   - listingTerms.nftCollateralId,\n     *   - listingTerms.revenueSharePartner,\n     *   - listingTerms.minLoanDuration,\n     *   - listingTerms.maxLoanDuration,\n     *   - listingTerms.maxInterestRateForDurationInBasisPoints,\n     *   - listingTerms.referralFeeInBasisPoints,\n     *   - bundleElements\n     *   - signature.signer,\n     *   - signature.nonce,\n     *   - signature.expiry,\n     *   - loan contract address,\n     *   - chainId\n     * @param _loanContract - Address of the loan contract where the signature is going to be used\n     */\n    function isValidBorrowerSignatureBundle(\n        LoanData.ListingTerms memory _listingTerms,\n        IBundleBuilder.BundleElements memory _bundleElements,\n        LoanData.Signature memory _signature,\n        address _loanContract\n    ) external view returns (bool) {\n        return\n            NFTfiSigningUtils.isValidBorrowerSignatureBundle(_listingTerms, _bundleElements, _signature, _loanContract);\n    }\n\n    /**\n     * @notice This function is when the borrower accepts a lender's offer, to validate the lender's signature that the\n     * lender provided off-chain to verify that it did indeed made such offer.\n     *\n     * @param _offer - The offer struct containing:\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\n     * for this loan.\n     * - loanPrincipalAmount: The original sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\n     * loan. The NFT is stored within this contract during the duration of the loan.\n     * - referrer: The address of the referrer who found the lender matching the listing, Zero address to signal\n     * this there is no referrer.\n     * - loanDuration: The amount of time (measured in seconds) that can elapse before the lender can liquidate the\n     * loan and seize the underlying collateral NFT.\n     * - loanInterestRateForDurationInBasisPoints: This is the interest rate (measured in basis points, e.g.\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\n     * is irrelevant so it should be set to 0.\n     * - loanAdminFeeInBasisPoints: The percent (measured in basis points) of the interest earned that will be\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\n     * earned.\n     * @param _signature - The signature structure containing:\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\n     * lender or the borrower in that situation. This serves two purposes:\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     *   - Second, it allows a user to cancel an off-chain order by calling\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\n     * using the user's off-chain order that contains that nonce.\n     * - expiry: Date when the signature expires\n     * - signature: The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following\n     * combination of parameters:\n     *   - offer.loanERC20Denomination\n     *   - offer.loanPrincipalAmount\n     *   - offer.maximumRepaymentAmount\n     *   - offer.nftCollateralContract\n     *   - offer.nftCollateralId\n     *   - offer.referrer\n     *   - offer.loanDuration\n     *   - offer.loanAdminFeeInBasisPoints\n     *   - signature.signer,\n     *   - signature.nonce,\n     *   - signature.expiry,\n     *   - loan contract address,\n     *   - chainId\n     * @param _loanContract - Address of the loan contract where the signature is going to be used\n     */\n    function isValidLenderSignature(\n        LoanData.Offer memory _offer,\n        LoanData.Signature memory _signature,\n        address _loanContract\n    ) external view returns (bool) {\n        return NFTfiSigningUtils.isValidLenderSignature(_offer, _signature, _loanContract);\n    }\n\n    /**\n     * @notice This function is when the borrower accepts a lender's offer, to validate the lender's signature that the\n     * lender provided off-chain to verify that it did indeed made such offer.\n     *\n     * @param _offer - The offer struct containing:\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\n     * for this loan.\n     * - loanPrincipalAmount: The original sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\n     * loan. The NFT is stored within this contract during the duration of the loan.\n     * - referrer: The address of the referrer who found the lender matching the listing, Zero address to signal\n     * this there is no referrer.\n     * - loanDuration: The amount of time (measured in seconds) that can elapse before the lender can liquidate the\n     * loan and seize the underlying collateral NFT.\n     * - loanInterestRateForDurationInBasisPoints: This is the interest rate (measured in basis points, e.g.\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\n     * is irrelevant so it should be set to 0.\n     * - loanAdminFeeInBasisPoints: The percent (measured in basis points) of the interest earned that will be\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\n     * earned.\n     * @param _bundleElements - the lists of erc721-20-1155 tokens that are to be bundled\n     * @param _signature - The signature structure containing:\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\n     * lender or the borrower in that situation. This serves two purposes:\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     *   - Second, it allows a user to cancel an off-chain order by calling\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\n     * using the user's off-chain order that contains that nonce.\n     * - expiry: Date when the signature expires\n     * - signature: The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following\n     * combination of parameters:\n     *   - offer.loanERC20Denomination\n     *   - offer.loanPrincipalAmount\n     *   - offer.maximumRepaymentAmount\n     *   - offer.nftCollateralContract\n     *   - offer.nftCollateralId\n     *   - offer.referrer\n     *   - offer.loanDuration\n     *   - offer.loanAdminFeeInBasisPoints\n     *   - bundleElements\n     *   - signature.signer,\n     *   - signature.nonce,\n     *   - signature.expiry,\n     *   - loan contract address,\n     *   - chainId\n     * @param _loanContract - Address of the loan contract where the signature is going to be used\n     */\n    function isValidLenderSignatureBundle(\n        LoanData.Offer memory _offer,\n        IBundleBuilder.BundleElements memory _bundleElements,\n        LoanData.Signature memory _signature,\n        address _loanContract\n    ) external view returns (bool) {\n        return NFTfiSigningUtils.isValidLenderSignatureBundle(_offer, _bundleElements, _signature, _loanContract);\n    }\n\n    /**\n     * @notice This function is called in renegotiateLoan() to validate the lender's signature that the lender provided\n     * off-chain to verify that they did indeed want to agree to this loan renegotiation according to these terms.\n     *\n     * @param _loanId - The unique identifier for the loan to be renegotiated\n     * @param _newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\n     * liquidate the loan and seize the underlying collateral NFT.\n     * @param _newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\n     * early.\n     * @param _renegotiationFee Agreed upon fee in ether that borrower pays for the lender for the renegitiation\n     * @param _signature - The signature structure containing:\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\n     * lender or the borrower in that situation. This serves two purposes:\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\n     * that nonce.\n     * - expiry - The date when the renegotiation offer expires\n     * - lenderSignature - The ECDSA signature of the lender, obtained off-chain ahead of time, signing the\n     * following combination of parameters:\n     * - _loanId\n     * - _newLoanDuration\n     * - _newMaximumRepaymentAmount\n     * - _lender\n     * - _lenderNonce\n     * - _expiry\n     *  - loan contract address,\n     * - chainId\n     * @param _loanContract - Address of the loan contract where the signature is going to be used\n     */\n    function isValidLenderRenegotiationSignature(\n        uint256 _loanId,\n        uint32 _newLoanDuration,\n        uint256 _newMaximumRepaymentAmount,\n        uint256 _renegotiationFee,\n        LoanData.Signature memory _signature,\n        address _loanContract\n    ) external view returns (bool) {\n        return\n            NFTfiSigningUtils.isValidLenderRenegotiationSignature(\n                _loanId,\n                _newLoanDuration,\n                _newMaximumRepaymentAmount,\n                _renegotiationFee,\n                _signature,\n                _loanContract\n            );\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../extensions/ERC721Enumerable.sol\";\nimport \"../extensions/ERC721Burnable.sol\";\nimport \"../extensions/ERC721Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev {ERC721} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *  - token ID and URI autogeneration\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC721PresetMinterPauserAutoId is\n    Context,\n    AccessControlEnumerable,\n    ERC721Enumerable,\n    ERC721Burnable,\n    ERC721Pausable\n{\n    using Counters for Counters.Counter;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    Counters.Counter private _tokenIdTracker;\n\n    string private _baseTokenURI;\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\n     * See {ERC721-tokenURI}.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) ERC721(name, symbol) {\n        _baseTokenURI = baseTokenURI;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    /**\n     * @dev Creates a new token for `to`. Its token ID will be automatically\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\n     * URI autogenerated based on the base URI passed at construction.\n     *\n     * See {ERC721-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have minter role to mint\");\n\n        // We cannot just use balanceOf to create the new tokenId because tokens\n        // can be burned (destroyed), so we need a separate counter.\n        _mint(to, _tokenIdTracker.current());\n        _tokenIdTracker.increment();\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlEnumerable, ERC721, ERC721Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC721Pausable is ERC721, Pausable {\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "contracts/NftfiHub.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"./interfaces/INftfiHub.sol\";\nimport \"./utils/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./utils/ContractKeys.sol\";\n\n/**\n * @title  NftfiHub\n * @author NFTfi\n * @dev Registry for the contracts supported by NFTfi protocol.\n */\ncontract NftfiHub is Ownable, Pausable, ReentrancyGuard, INftfiHub {\n    /* ******* */\n    /* STORAGE */\n    /* ******* */\n\n    mapping(bytes32 => address) private contracts;\n\n    /* ****** */\n    /* EVENTS */\n    /* ****** */\n\n    /**\n     * @notice This event is fired whenever the admin registers a contract.\n     *\n     * @param contractKey - Contract key e.g. bytes32('PERMITTED_NFTS').\n     * @param contractAddress - Address of the contract.\n     */\n    event ContractUpdated(bytes32 indexed contractKey, address indexed contractAddress);\n\n    /* *********** */\n    /* CONSTRUCTOR */\n    /* *********** */\n\n    /**\n     * @dev Initializes `contracts` with a batch of permitted contracts\n     *\n     * @param _admin - Initial admin of this contract.\n     * @param _contractKeys - Initial contract keys.\n     * @param _contractAddresses - Initial associated contract addresses.\n     */\n    constructor(\n        address _admin,\n        string[] memory _contractKeys,\n        address[] memory _contractAddresses\n    ) Ownable(_admin) {\n        _setContracts(_contractKeys, _contractAddresses);\n    }\n\n    /* ********* */\n    /* FUNCTIONS */\n    /* ********* */\n\n    /**\n     * @notice Set or update the contract address for the given key.\n     * @param _contractKey - New or existing contract key.\n     * @param _contractAddress - The associated contract address.\n     */\n    function setContract(string calldata _contractKey, address _contractAddress) external override onlyOwner {\n        _setContract(_contractKey, _contractAddress);\n    }\n\n    /**\n     * @notice Set or update the contract addresses for the given keys.\n     * @param _contractKeys - New or existing contract keys.\n     * @param _contractAddresses - The associated contract addresses.\n     */\n    function setContracts(string[] memory _contractKeys, address[] memory _contractAddresses) external onlyOwner {\n        _setContracts(_contractKeys, _contractAddresses);\n    }\n\n    /**\n     * @notice This function can be called by anyone to lookup the contract address associated with the key.\n     * @param  _contractKey - The index to the contract address.\n     */\n    function getContract(bytes32 _contractKey) external view override returns (address) {\n        return contracts[_contractKey];\n    }\n\n    /**\n     * @notice Set or update the contract address for the given key.\n     * @param _contractKey - New or existing contract key.\n     * @param _contractAddress - The associated contract address.\n     */\n    function _setContract(string memory _contractKey, address _contractAddress) internal {\n        bytes32 key = ContractKeys.getIdFromStringKey(_contractKey);\n        contracts[key] = _contractAddress;\n\n        emit ContractUpdated(key, _contractAddress);\n    }\n\n    /**\n     * @notice Set or update the contract addresses for the given keys.\n     * @param _contractKeys - New or existing contract key.\n     * @param _contractAddresses - The associated contract address.\n     */\n    function _setContracts(string[] memory _contractKeys, address[] memory _contractAddresses) internal {\n        require(_contractKeys.length == _contractAddresses.length, \"setContracts function information arity mismatch\");\n\n        for (uint256 i = 0; i < _contractKeys.length; i++) {\n            _setContract(_contractKeys[i], _contractAddresses[i]);\n        }\n    }\n}\n"
    },
    "contracts/utils/Ownable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * Modified version from openzeppelin/contracts/access/Ownable.sol that allows to\n * initialize the owner using a parameter in the constructor\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor(address _initialOwner) {\n        _setOwner(_initialOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address _newOwner) public virtual onlyOwner {\n        require(_newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(_newOwner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Sets the owner.\n     */\n    function _setOwner(address _newOwner) private {\n        address oldOwner = _owner;\n        _owner = _newOwner;\n        emit OwnershipTransferred(oldOwner, _newOwner);\n    }\n}\n"
    },
    "contracts/test/TestAbusiveAirdropFlashLoan.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../interfaces/INftfiHub.sol\";\nimport \"../interfaces/INftWrapper.sol\";\nimport \"../utils/ContractKeys.sol\";\n\n/**\n * @title AirdropReceiver\n * @author NFTfi\n * @dev\n */\ncontract TestAbusiveAirdropFlashLoan is ERC721Holder, ERC1155Holder, ReentrancyGuard {\n    using Address for address;\n    using SafeERC20 for IERC20;\n\n    INftfiHub public immutable hub;\n\n    constructor(address _nftfiHub) {\n        hub = INftfiHub(_nftfiHub);\n    }\n\n    function pullAirdrop(\n        address,\n        uint256,\n        address,\n        address _target,\n        bytes calldata _data,\n        address _nftAirdrop,\n        uint256 _nftAirdropId,\n        bool _is1155,\n        uint256 _nftAirdropAmount,\n        address _beneficiary\n    ) external nonReentrant {\n        // assumes that the collateral nft has been transferreded to this contract before calling this function\n        _target.functionCall(_data);\n\n        // DO NOT return the collateral\n        // _transferNFT(_nftWrapper, address(this), msg.sender, _nftCollateralContract, _nftCollateralId);\n\n        // in case that arbitray function from _target does not send the airdrop to a specified address\n        if (_nftAirdrop != address(0) && _beneficiary != address(0)) {\n            // send the airdrop to the beneficiary\n            if (_is1155) {\n                IERC1155(_nftAirdrop).safeTransferFrom(\n                    address(this),\n                    _beneficiary,\n                    _nftAirdropId,\n                    _nftAirdropAmount,\n                    \"0x\"\n                );\n            } else {\n                IERC721(_nftAirdrop).safeTransferFrom(address(this), _beneficiary, _nftAirdropId);\n            }\n        }\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC1155Receiver) returns (bool) {\n        return _interfaceId == type(IERC721Receiver).interfaceId || super.supportsInterface(_interfaceId);\n    }\n\n    function _transferNFT(\n        address _nftWrapper,\n        address _sender,\n        address _recipient,\n        address _nftCollateralContract,\n        uint256 _nftCollateralId\n    ) internal {\n        _nftWrapper.functionDelegateCall(\n            abi.encodeWithSelector(\n                INftWrapper(_nftWrapper).transferNFT.selector,\n                _sender,\n                _recipient,\n                _nftCollateralContract,\n                _nftCollateralId\n            ),\n            \"NFT was not successfully transferred\"\n        );\n    }\n}\n"
    },
    "contracts/nftTypeRegistry/nftTypes/ERC721Wrapper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"../../interfaces/INftWrapper.sol\";\n\n/**\n * @title ERC721Wrapper\n * @author NFTfi\n * @dev Provides logic to transfer ERC721\n */\ncontract ERC721Wrapper is INftWrapper {\n    /**\n     * @dev Transfers ERC721 `_nftId` handled by the contract `_nftContract` from `_sender` to `_recipient`\n     *\n     * @param _sender - The current owner of the ERC721\n     * @param _recipient - The new owner of the ERC721\n     * @param _nftContract - ERC721 contract\n     * @param _nftId - ERC721 id\n     *\n     * @return true if successfully transferred, false otherwise\n     */\n    function transferNFT(\n        address _sender,\n        address _recipient,\n        address _nftContract,\n        uint256 _nftId\n    ) external override returns (bool) {\n        IERC721(_nftContract).safeTransferFrom(_sender, _recipient, _nftId);\n        return true;\n    }\n\n    function isOwner(\n        address _owner,\n        address _nftContract,\n        uint256 _tokenId\n    ) external view override returns (bool) {\n        return IERC721(_nftContract).ownerOf(_tokenId) == _owner;\n    }\n\n    function wrapAirdropReceiver(\n        address _recipient,\n        address _nftContract,\n        uint256 _nftId,\n        address _beneficiary\n    ) external override returns (bool) {\n        IERC721(_nftContract).safeTransferFrom(address(this), _recipient, _nftId, abi.encode(_beneficiary));\n\n        return true;\n    }\n}\n"
    },
    "contracts/test/TestSignerContract.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../utils/NftReceiver.sol\";\n\ninterface ILoan {\n    function liquidateOverdueLoan(uint32 _loanId) external;\n}\n\n/**\n * @title  TestSignerContract\n * @author NFTfi\n * @notice Test implementation of a signing contract\n */\ncontract TestSignerContract is NftReceiver {\n    address public admin;\n\n    constructor(address _admin) {\n        admin = _admin;\n    }\n\n    function isValidSignature(bytes32 _hash, bytes calldata _signature) external view returns (bytes4) {\n        // Validate signatures\n        if (ECDSA.recover(_hash, _signature) == admin) {\n            return 0x1626ba7e;\n        } else {\n            return 0xffffffff;\n        }\n    }\n\n    function approveNFT(\n        address _token,\n        address _to,\n        uint256 _tokenId\n    ) external {\n        IERC721(_token).approve(_to, _tokenId);\n    }\n\n    function approveERC20(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) external {\n        IERC20(_token).approve(_to, _amount);\n    }\n\n    function liquidateOverdueLoan(address _loanContract, uint32 _loanId) external {\n        ILoan(_loanContract).liquidateOverdueLoan(_loanId);\n    }\n}\n"
    },
    "contracts/utils/NftReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\n\n/**\n * @title NftReceiver\n * @author NFTfi\n * @dev Base contract with capabilities for receiving ERC1155 and ERC721 tokens\n */\nabstract contract NftReceiver is IERC1155Receiver, ERC721Holder {\n    /**\n     *  @dev Handles the receipt of a single ERC1155 token type. This function is called at the end of a\n     * `safeTransferFrom` after the balance has been updated.\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if allowed\n     */\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     *  @dev Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a\n     * `safeBatchTransferFrom` after the balances have been updated.\n     *  @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if allowed\n     */\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external virtual override returns (bytes4) {\n        revert(\"ERC1155 batch not supported\");\n    }\n\n    /**\n     * @dev Checks whether this contract implements the interface defined by `interfaceId`.\n     * @param _interfaceId Id of the interface\n     * @return true if this contract implements the interface\n     */\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return\n            _interfaceId == type(IERC1155Receiver).interfaceId ||\n            _interfaceId == type(IERC721Receiver).interfaceId ||\n            _interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/test/TestNftReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.4;\n\nimport \"../utils/NftReceiver.sol\";\n\ncontract TestNftReceiver is NftReceiver {\n    constructor() {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n"
    },
    "contracts/test/TestNonBundleRootOwner.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\n\ncontract TestNonBundleRootOwner is ERC721Holder {\n    function rootOwnerOfChild(address, uint256) public pure returns (bytes32 rootOwner) {\n        return bytes32(\"\");\n    }\n}\n"
    },
    "contracts/airdrop/AirdropReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../interfaces/INftfiHub.sol\";\nimport \"../interfaces/IPermittedNFTs.sol\";\nimport \"../interfaces/IPermittedAirdrops.sol\";\nimport \"../interfaces/INftWrapper.sol\";\nimport \"../utils/ContractKeys.sol\";\n\n/**\n * @title AirdropReceiver\n * @author NFTfi\n * @dev\n */\ncontract AirdropReceiver is ERC721Enumerable, ERC721Holder, ERC1155Holder, Initializable, ReentrancyGuard {\n    using Address for address;\n    using SafeERC20 for IERC20;\n\n    INftfiHub public immutable hub;\n\n    // in the context of this contract the name of this is a bit confusing, this \"wrapper\" is the one that\n    // knows how to transfer a type of nft\n    address public nftTransferWrapper;\n    address public beneficiary;\n    address public wrappedNft;\n    uint256 public wrappedNftId;\n\n    bool private wrapping_;\n\n    event Initialized(uint256 indexed tokenId);\n\n    event NftWrapped(\n        address indexed nftCollateralContract,\n        uint256 indexed nftCollateralId,\n        address indexed from,\n        address beneficiary,\n        address owner\n    );\n    event NftUnwrapped(\n        address indexed nftCollateralContract,\n        uint256 indexed nftCollateralId,\n        address indexed to,\n        address owner\n    );\n\n    modifier onlyOwner() {\n        require(ownerOf(getTokenId()) == msg.sender, \"Only owner\");\n\n        _;\n    }\n\n    modifier onlyOwnerOrBeneficiary() {\n        require(ownerOf(getTokenId()) == msg.sender || msg.sender == beneficiary, \"Only owner or beneficiary\");\n\n        _;\n    }\n\n    constructor(address _nftfiHub) ERC721(\"\", \"\") {\n        hub = INftfiHub(_nftfiHub);\n\n        // grant ownership of implementation to deployer, this blocks initialization of this implementation\n        _safeMint(msg.sender, getTokenId());\n    }\n\n    function getTokenId() public view returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(address(this))));\n    }\n\n    function initialize(address _to) external initializer nonReentrant returns (uint256) {\n        uint256 tokenId = getTokenId();\n        _safeMint(_to, tokenId);\n\n        emit Initialized(tokenId);\n\n        return tokenId;\n    }\n\n    function wrap(\n        address _from,\n        address _beneficiary,\n        address _nftCollateralContract,\n        uint256 _nftCollateralId\n    ) external onlyOwner {\n        require(wrappedNft == address(0), \"already wrapping\");\n        require(_from != address(0), \"from is zero address\");\n        require(_beneficiary != address(0), \"beneficiary is zero address\");\n        require(_nftCollateralContract != address(0), \"nftCollateralContract is zero address\");\n\n        wrapping_ = true;\n\n        nftTransferWrapper = IPermittedNFTs(hub.getContract(ContractKeys.PERMITTED_NFTS)).getNFTWrapper(\n            _nftCollateralContract\n        );\n\n        _transferNFT(nftTransferWrapper, _from, address(this), _nftCollateralContract, _nftCollateralId);\n\n        beneficiary = _beneficiary;\n        wrappedNft = _nftCollateralContract;\n        wrappedNftId = _nftCollateralId;\n\n        emit NftWrapped(_nftCollateralContract, _nftCollateralId, _from, _beneficiary, msg.sender);\n\n        wrapping_ = false;\n    }\n\n    function unwrap(address _receiver) external onlyOwner {\n        require(wrappedNft != address(0), \"not wrapping\");\n\n        _transferNFT(nftTransferWrapper, address(this), _receiver, wrappedNft, wrappedNftId);\n\n        emit NftUnwrapped(wrappedNft, wrappedNftId, _receiver, msg.sender);\n\n        beneficiary = address(0);\n        wrappedNft = address(0);\n        wrappedNftId = 0;\n        nftTransferWrapper = address(0);\n    }\n\n    function pullAirdrop(address _target, bytes calldata _data) external nonReentrant onlyOwnerOrBeneficiary {\n        require(\n            IPermittedAirdrops(hub.getContract(ContractKeys.PERMITTED_AIRDROPS)).isValidAirdrop(\n                abi.encode(_target, _getSelector(_data))\n            ),\n            \"Invalid Airdrop\"\n        );\n\n        _target.functionCall(_data);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 _interfaceId)\n        public\n        view\n        virtual\n        override(ERC721Enumerable, ERC1155Receiver)\n        returns (bool)\n    {\n        return _interfaceId == type(IERC721Receiver).interfaceId || super.supportsInterface(_interfaceId);\n    }\n\n    /**\n     * @notice used by the owner account to be able to drain ERC20 tokens received as airdrops\n     * for the locked  collateral NFT-s\n     * @param tokenAddress - address of the token contract for the token to be sent out\n     * @param receiver - receiver of the token\n     */\n    function drainERC20Airdrop(address tokenAddress, address receiver) external onlyOwner {\n        IERC20 tokenContract = IERC20(tokenAddress);\n        uint256 amount = tokenContract.balanceOf(address(this));\n        require(amount > 0, \"no tokens owned\");\n        tokenContract.safeTransfer(receiver, amount);\n    }\n\n    /**\n     * @notice used by the owner account to be able to drain ERC721 tokens received as airdrops\n     * for the locked  collateral NFT-s\n     * @param tokenAddress - address of the token contract for the token to be sent out\n     * @param tokenId - id token to be sent out\n     * @param receiver - receiver of the token\n     */\n    function drainERC721Airdrop(\n        address tokenAddress,\n        uint256 tokenId,\n        address receiver\n    ) external onlyOwner {\n        require(wrappedNft != tokenAddress && tokenId != wrappedNftId, \"token is wrapped\");\n        IERC721 tokenContract = IERC721(tokenAddress);\n        tokenContract.safeTransferFrom(address(this), receiver, tokenId);\n    }\n\n    /**\n     * @notice used by the owner account to be able to drain ERC1155 tokens received as airdrops\n     * for the locked  collateral NFT-s\n     * @param tokenAddress - address of the token contract for the token to be sent out\n     * @param tokenId - id token to be sent out\n     * @param receiver - receiver of the token\n     */\n    function drainERC1155Airdrop(\n        address tokenAddress,\n        uint256 tokenId,\n        address receiver\n    ) external onlyOwner {\n        require(wrappedNft != tokenAddress && tokenId != wrappedNftId, \"token is wrapped\");\n        IERC1155 tokenContract = IERC1155(tokenAddress);\n        uint256 amount = tokenContract.balanceOf(address(this), tokenId);\n        require(amount > 0, \"no nfts owned\");\n        tokenContract.safeTransferFrom(address(this), receiver, tokenId, amount, \"\");\n    }\n\n    function _transferNFT(\n        address _nftTransferWrapper,\n        address _sender,\n        address _recipient,\n        address _nftCollateralContract,\n        uint256 _nftCollateralId\n    ) internal {\n        _nftTransferWrapper.functionDelegateCall(\n            abi.encodeWithSelector(\n                INftWrapper(_nftTransferWrapper).transferNFT.selector,\n                _sender,\n                _recipient,\n                _nftCollateralContract,\n                _nftCollateralId\n            ),\n            \"NFT was not successfully transferred\"\n        );\n    }\n\n    function _getSelector(bytes memory _data) internal pure returns (bytes4 selector) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            selector := mload(add(_data, 32))\n        }\n    }\n\n    function onERC721Received(\n        address,\n        address _from,\n        uint256 _tokenId,\n        bytes calldata _data\n    ) public virtual override returns (bytes4) {\n        // owner can only send with the intention of wrapping\n        if (ownerOf(getTokenId()) == _from && !wrapping_) {\n            require(wrappedNft == address(0), \"already wrapping\");\n\n            address _beneficiary = abi.decode(_data, (address));\n            require(_beneficiary != address(0), \"beneficiary is zero address\");\n\n            // sender is the nftCollateral contract\n            _receiveAndWrap(_from, _beneficiary, msg.sender, _tokenId);\n        }\n        // otherwise it is considered an airdrop\n        return this.onERC721Received.selector;\n    }\n\n    function onERC1155Received(\n        address,\n        address _from,\n        uint256 _id,\n        uint256,\n        bytes calldata _data\n    ) public virtual override returns (bytes4) {\n        // owner can only send with the intention of wrapping\n        if (ownerOf(getTokenId()) == _from && !wrapping_) {\n            require(wrappedNft == address(0), \"already wrapping\");\n\n            address _beneficiary = abi.decode(_data, (address));\n            require(_beneficiary != address(0), \"beneficiary is zero address\");\n\n            // sender is the nftCollateral contract\n            _receiveAndWrap(_from, _beneficiary, msg.sender, _id);\n        }\n        // otherwise it is considered an airdrop\n\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address _from,\n        uint256[] calldata _ids,\n        uint256[] calldata,\n        bytes calldata _data\n    ) public virtual override returns (bytes4) {\n        // owner can only send with the intention of wrapping\n        if (ownerOf(getTokenId()) == _from && !wrapping_) {\n            require(wrappedNft == address(0), \"already wrapping\");\n            require(_ids.length > 1, \"only 0 allowed\");\n\n            address _beneficiary = abi.decode(_data, (address));\n            require(_beneficiary != address(0), \"beneficiary is zero address\");\n\n            // sender is the nftCollateral contract\n            _receiveAndWrap(_from, _beneficiary, msg.sender, _ids[0]);\n        }\n        // otherwise it is considered an airdrop\n\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    function _receiveAndWrap(\n        address _from,\n        address _beneficiary,\n        address _nftCollateralContract,\n        uint256 _nftCollateralId\n    ) internal {\n        nftTransferWrapper = IPermittedNFTs(hub.getContract(ContractKeys.PERMITTED_NFTS)).getNFTWrapper(\n            _nftCollateralContract\n        );\n\n        require(nftTransferWrapper != address(0), \"bft not permitted\");\n\n        beneficiary = _beneficiary;\n        wrappedNft = _nftCollateralContract;\n        wrappedNftId = _nftCollateralId;\n\n        emit NftWrapped(_nftCollateralContract, _nftCollateralId, _from, _beneficiary, _from);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !Address.isContract(address(this));\n    }\n}\n"
    },
    "contracts/interfaces/IPermittedNFTs.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\ninterface IPermittedNFTs {\n    function setNFTPermit(address _nftContract, string memory _nftType) external;\n\n    function getNFTPermit(address _nftContract) external view returns (bytes32);\n\n    function getNFTWrapper(address _nftContract) external view returns (address);\n}\n"
    },
    "contracts/nftTypeRegistry/nftTypes/CryptoKittiesWrapper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.4;\n\nimport \"../../interfaces/INftWrapper.sol\";\nimport \"../../interfaces/ICryptoKitties.sol\";\nimport \"../../airdrop/AirdropReceiver.sol\";\n\n/**\n * @title CryptoKittiesWrapper\n * @author NFTfi\n * @dev Provides logic to transfer CryptoKitties\n */\ncontract CryptoKittiesWrapper is INftWrapper {\n    /**\n     * @dev Transfers Kitty `_nftId` handled by the contract `_nftContract` from `_sender` to `_recipient`\n     *\n     * @param _sender - The current owner of the Kitty\n     * @param _recipient - The new owner of the Kitty\n     * @param _nftContract - CryptoKitties contract\n     * @param _nftId - Kitty id\n     *\n     * @return true if successfully transferred, false otherwise\n     */\n    function transferNFT(\n        address _sender,\n        address _recipient,\n        address _nftContract,\n        uint256 _nftId\n    ) external override returns (bool) {\n        if (_sender == address(this)) {\n            ICryptoKitties(_nftContract).transfer(_recipient, _nftId);\n        } else {\n            ICryptoKitties(_nftContract).transferFrom(_sender, _recipient, _nftId);\n        }\n\n        return true;\n    }\n\n    function isOwner(\n        address _owner,\n        address _nftContract,\n        uint256 _tokenId\n    ) external view override returns (bool) {\n        return ICryptoKitties(_nftContract).ownerOf(_tokenId) == _owner;\n    }\n\n    function wrapAirdropReceiver(\n        address _recipient,\n        address _nftContract,\n        uint256 _nftId,\n        address _beneficiary\n    ) external override returns (bool) {\n        ICryptoKitties(_nftContract).approve(_recipient, _nftId);\n\n        AirdropReceiver(_recipient).wrap(address(this), _beneficiary, _nftContract, _nftId);\n\n        return true;\n    }\n}\n"
    },
    "contracts/interfaces/ICryptoKitties.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.4;\n\n/**\n * @title IERC721_CryptoKitties\n * @author NFTfi\n * @dev ERC721 compliant interface used by CryptoKitties contract.\n * Extracted from https://etherscan.io/address/0x06012c8cf97bead5deae237070f9587f8e7a266d#code\n */\ninterface ICryptoKitties {\n    // Events\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId);\n\n    function approve(address _to, uint256 _tokenId) external;\n\n    function transfer(address _to, uint256 _tokenId) external;\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) external;\n\n    // Required methods\n    function totalSupply() external view returns (uint256 total);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n\n    // Optional\n    // function name() public view returns (string name);\n    // function symbol() public view returns (string symbol);\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n}\n"
    },
    "contracts/test/TestCryptoKitties.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.4;\n\nimport \"../interfaces/ICryptoKitties.sol\";\n\n/**\n * @title TestCryptoKitties\n * @dev Test contract with CryptoKitties ERC721 related functionalities.\n * Extracted from https://etherscan.io/address/0x06012c8cf97bead5deae237070f9587f8e7a266d#code\n */\ncontract TestCryptoKitties is ICryptoKitties {\n    // @notice Name and symbol of the non fungible token, as defined in ERC721.\n    string public constant name = \"CryptoKitties\";\n    string public constant symbol = \"CK\";\n\n    bytes4 public constant InterfaceSignature_ERC165 = bytes4(keccak256(\"supportsInterface(bytes4)\"));\n\n    bytes4 public constant InterfaceSignature_ERC721 =\n        bytes4(keccak256(\"name()\")) ^\n            bytes4(keccak256(\"symbol()\")) ^\n            bytes4(keccak256(\"totalSupply()\")) ^\n            bytes4(keccak256(\"balanceOf(address)\")) ^\n            bytes4(keccak256(\"ownerOf(uint256)\")) ^\n            bytes4(keccak256(\"approve(address,uint256)\")) ^\n            bytes4(keccak256(\"transfer(address,uint256)\")) ^\n            bytes4(keccak256(\"transferFrom(address,address,uint256)\")) ^\n            bytes4(keccak256(\"tokensOfOwner(address)\")) ^\n            bytes4(keccak256(\"tokenMetadata(uint256,string)\"));\n\n    /*** DATA TYPES ***/\n\n    /// @dev The main Kitty struct. Every cat in CryptoKitties is represented by a copy\n    ///  of this structure, so great care was taken to ensure that it fits neatly into\n    ///  exactly two 256-bit words. Note that the order of the members in this structure\n    ///  is important because of the byte-packing rules used by Ethereum.\n    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\n    struct Kitty {\n        // The Kitty's genetic code is packed into these 256-bits, the format is\n        // sooper-sekret! A cat's genes never change.\n        uint256 genes;\n        // The timestamp from the block when this cat came into existence.\n        uint64 birthTime;\n        // The minimum timestamp after which this cat can engage in breeding\n        // activities again. This same timestamp is used for the pregnancy\n        // timer (for matrons) as well as the siring cooldown.\n        uint64 cooldownEndBlock;\n        // The ID of the parents of this kitty, set to 0 for gen0 cats.\n        // Note that using 32-bit unsigned integers limits us to a \"mere\"\n        // 4 billion cats. This number might seem small until you realize\n        // that Ethereum currently has a limit of about 500 million\n        // transactions per year! So, this definitely won't be a problem\n        // for several years (even as Ethereum learns to scale).\n        uint32 matronId;\n        uint32 sireId;\n        // Set to the ID of the sire cat for matrons that are pregnant,\n        // zero otherwise. A non-zero value here is how we know a cat\n        // is pregnant. Used to retrieve the genetic material for the new\n        // kitten when the birth transpires.\n        uint32 siringWithId;\n        // Set to the index in the cooldown array (see below) that represents\n        // the current cooldown duration for this Kitty. This starts at zero\n        // for gen0 cats, and is initialized to floor(generation/2) for others.\n        // Incremented by one for each successful breeding action, regardless\n        // of whether this cat is acting as matron or sire.\n        uint16 cooldownIndex;\n        // The \"generation number\" of this cat. Cats minted by the CK contract\n        // for sale are called \"gen0\" and have a generation number of 0. The\n        // generation number of all other cats is the larger of the two generation\n        // numbers of their parents, plus one.\n        // (i.e. max(matron.generation, sire.generation) + 1)\n        uint16 generation;\n    }\n\n    /*** CONSTANTS ***/\n\n    /// @dev A mapping from cat IDs to the address that owns them. All cats have\n    ///  some valid owner address, even gen0 cats are created with a non-zero owner.\n    mapping(uint256 => address) public kittyIndexToOwner;\n\n    // @dev A mapping from owner address to count of tokens that address owns.\n    //  Used internally inside balanceOf() to resolve ownership count.\n    mapping(address => uint256) public ownershipTokenCount;\n\n    /// @dev A mapping from KittyIDs to an address that has been approved to call\n    ///  transferFrom(). Each Kitty can only have one approved address for transfer\n    ///  at any time. A zero value means no approval is outstanding.\n    mapping(uint256 => address) public kittyIndexToApproved;\n\n    /// @dev A mapping from KittyIDs to an address that has been approved to use\n    ///  this Kitty for siring via breedWith(). Each Kitty can only have one approved\n    ///  address for siring at any time. A zero value means no approval is outstanding.\n    mapping(uint256 => address) public sireAllowedToAddress;\n\n    /// @dev An array containing the Kitty struct for all Kitties in existence. The ID\n    ///  of each cat is actually an index into this array. Note that ID 0 is a negacat,\n    ///  the unKitty, the mythical beast that is the parent of all gen0 cats. A bizarre\n    ///  creature that is both matron and sire... to itself! Has an invalid genetic code.\n    ///  In other words, cat ID 0 is invalid... ;-)\n    Kitty[] public kitties;\n\n    /// @dev The Birth event is fired whenever a new kitten comes into existence. This obviously\n    ///  includes any time a cat is created through the giveBirth method, but it is also called\n    ///  when a new gen0 cat is created.\n    event Birth(address owner, uint256 kittyId, uint256 matronId, uint256 sireId, uint256 genes);\n\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\n    ///  ERC-165 (obviously!) and ERC-721.\n    function supportsInterface(bytes4 _interfaceID) external pure override returns (bool) {\n        // DEBUG ONLY\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\n\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n    }\n\n    /// @notice Returns the number of Kitties owned by a specific address.\n    /// @param _owner The owner address to check.\n    /// @dev Required for ERC-721 compliance\n    function balanceOf(address _owner) public view override returns (uint256 count) {\n        return ownershipTokenCount[_owner];\n    }\n\n    function mint(address _owner) external returns (uint256) {\n        return _createKitty(0, 0, 0, 0, _owner);\n    }\n\n    /// @notice Transfers a Kitty to another address. If transferring to a smart\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\n    ///  CryptoKitties specifically) or your Kitty may be lost forever. Seriously.\n    /// @param _to The address of the recipient, can be a user or contract.\n    /// @param _tokenId The ID of the Kitty to transfer.\n    /// @dev Required for ERC-721 compliance.\n    function transfer(address _to, uint256 _tokenId) external override {\n        // Safety check to prevent against an unexpected 0x0 default.\n        // solhint-disable-next-line reason-string\n        require(_to != address(0));\n        // Disallow transfers to this contract to prevent accidental misuse.\n        // The contract should never own any kitties (except very briefly\n        // after a gen0 cat is created and before it goes on auction).\n        // solhint-disable-next-line reason-string\n        require(_to != address(this));\n        // Disallow transfers to the auction contracts to prevent accidental\n        // misuse. Auction contracts should only take ownership of kitties\n        // through the allow + transferFrom flow.\n        // require(_to != address(saleAuction));\n        // require(_to != address(siringAuction));\n\n        // You can only send your own cat.\n        // solhint-disable-next-line reason-string\n        require(_owns(msg.sender, _tokenId));\n\n        // Reassign ownership, clear pending approvals, emit Transfer event.\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    /// @notice Grant another address the right to transfer a specific Kitty via\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\n    ///  clear all approvals.\n    /// @param _tokenId The ID of the Kitty that can be transferred if this call succeeds.\n    /// @dev Required for ERC-721 compliance.\n    function approve(address _to, uint256 _tokenId) external override {\n        // Only an owner can grant transfer approval.\n        // solhint-disable-next-line reason-string\n        require(_owns(msg.sender, _tokenId));\n\n        // Register the approval (replacing any previous approval).\n        _approve(_tokenId, _to);\n\n        // Emit approval event.\n        emit Approval(msg.sender, _to, _tokenId);\n    }\n\n    /// @notice Transfer a Kitty owned by another address, for which the calling address\n    ///  has previously been granted transfer approval by the owner.\n    /// @param _from The address that owns the Kitty to be transfered.\n    /// @param _to The address that should take ownership of the Kitty. Can be any address,\n    ///  including the caller.\n    /// @param _tokenId The ID of the Kitty to be transferred.\n    /// @dev Required for ERC-721 compliance.\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) external override {\n        // Safety check to prevent against an unexpected 0x0 default.\n        // solhint-disable-next-line reason-string\n        require(_to != address(0));\n        // Disallow transfers to this contract to prevent accidental misuse.\n        // The contract should never own any kitties (except very briefly\n        // after a gen0 cat is created and before it goes on auction).\n        // solhint-disable-next-line reason-string\n        require(_to != address(this));\n        // Check for approval and valid ownership\n        // solhint-disable-next-line reason-string\n        require(_approvedFor(msg.sender, _tokenId));\n        // solhint-disable-next-line reason-string\n        require(_owns(_from, _tokenId));\n\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// @notice Returns the total number of Kitties currently in existence.\n    /// @dev Required for ERC-721 compliance.\n    function totalSupply() public view override returns (uint256) {\n        return kitties.length - 1;\n    }\n\n    /// @notice Returns the address currently assigned ownership of a given Kitty.\n    /// @dev Required for ERC-721 compliance.\n    function ownerOf(uint256 _tokenId) external view override returns (address owner) {\n        owner = kittyIndexToOwner[_tokenId];\n\n        // solhint-disable-next-line reason-string\n        require(owner != address(0));\n    }\n\n    /// @notice Returns a list of all Kitty IDs assigned to an address.\n    /// @param _owner The owner whose Kitties we are interested in.\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n    ///  expensive (it walks the entire Kitty array looking for cats belonging to owner),\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n    ///  not contract-to-contract calls.\n    function tokensOfOwner(address _owner) external view returns (uint256[] memory ownerTokens) {\n        uint256 tokenCount = balanceOf(_owner);\n\n        if (tokenCount == 0) {\n            // Return an empty array\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 totalCats = totalSupply();\n            uint256 resultIndex = 0;\n\n            // We count on the fact that all cats have IDs starting at 1 and increasing\n            // sequentially up to the totalCat count.\n            uint256 catId;\n\n            for (catId = 1; catId <= totalCats; catId++) {\n                if (kittyIndexToOwner[catId] == _owner) {\n                    result[resultIndex] = catId;\n                    resultIndex++;\n                }\n            }\n\n            return result;\n        }\n    }\n\n    /// @dev Assigns ownership of a specific Kitty to an address.\n    function _transfer(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) internal {\n        // Since the number of kittens is capped to 2^32 we can't overflow this\n        ownershipTokenCount[_to]++;\n        // transfer ownership\n        kittyIndexToOwner[_tokenId] = _to;\n        // When creating new kittens _from is 0x0, but we can't account that address.\n        if (_from != address(0)) {\n            ownershipTokenCount[_from]--;\n            // once the kitten is transferred also clear sire allowances\n            delete sireAllowedToAddress[_tokenId];\n            // clear any previously approved ownership exchange\n            delete kittyIndexToApproved[_tokenId];\n        }\n        // Emit the transfer event.\n        emit Transfer(_from, _to, _tokenId);\n    }\n\n    /// @dev An internal method that creates a new kitty and stores it. This\n    ///  method doesn't do any checking and should only be called when the\n    ///  input data is known to be valid. Will generate both a Birth event\n    ///  and a Transfer event.\n    /// @param _matronId The kitty ID of the matron of this cat (zero for gen0)\n    /// @param _sireId The kitty ID of the sire of this cat (zero for gen0)\n    /// @param _generation The generation number of this cat, must be computed by caller.\n    /// @param _genes The kitty's genetic code.\n    /// @param _owner The inital owner of this cat, must be non-zero (except for the unKitty, ID 0)\n    function _createKitty(\n        uint256 _matronId,\n        uint256 _sireId,\n        uint256 _generation,\n        uint256 _genes,\n        address _owner\n    ) internal returns (uint256) {\n        // These requires are not strictly necessary, our calling code should make\n        // sure that these conditions are never broken. However! _createKitty() is already\n        // an expensive call (for storage), and it doesn't hurt to be especially careful\n        // to ensure our data structures are always valid.\n        require(_matronId == uint256(uint32(_matronId)), \"bad _matronId\");\n        require(_sireId == uint256(uint32(_sireId)), \"bad _sireId\");\n        require(_generation == uint256(uint16(_generation)), \"bad _generation\");\n\n        // New kitty starts with the same cooldown as parent gen/2\n        uint16 cooldownIndex = uint16(_generation / 2);\n        if (cooldownIndex > 13) {\n            cooldownIndex = 13;\n        }\n\n        Kitty memory _kitty = Kitty({\n            genes: _genes,\n            birthTime: uint64(block.timestamp),\n            cooldownEndBlock: 0,\n            matronId: uint32(_matronId),\n            sireId: uint32(_sireId),\n            siringWithId: 0,\n            cooldownIndex: cooldownIndex,\n            generation: uint16(_generation)\n        });\n        kitties.push(_kitty);\n        uint256 newKittenId = kitties.length - 1;\n\n        // It's probably never going to happen, 4 billion cats is A LOT, but\n        // let's just be 100% sure we never let this happen.\n        require(newKittenId == uint256(uint32(newKittenId)), \"bad newKittenId\");\n\n        // emit the birth event\n        emit Birth(_owner, newKittenId, uint256(_kitty.matronId), uint256(_kitty.sireId), _kitty.genes);\n\n        // This will assign ownership, and also emit the Transfer event as\n        // per ERC721 draft\n        _transfer(address(0), _owner, newKittenId);\n\n        return newKittenId;\n    }\n\n    /// @dev Checks if a given address is the current owner of a particular Kitty.\n    /// @param _claimant the address we are validating against.\n    /// @param _tokenId kitten id, only valid when > 0\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return kittyIndexToOwner[_tokenId] == _claimant;\n    }\n\n    /// @dev Checks if a given address currently has transferApproval for a particular Kitty.\n    /// @param _claimant the address we are confirming kitten is approved for.\n    /// @param _tokenId kitten id, only valid when > 0\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return kittyIndexToApproved[_tokenId] == _claimant;\n    }\n\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\n    ///  _approve() and transferFrom() are used together for putting Kitties on auction, and\n    ///  there is no value in spamming the log with Approval events in that case.\n    function _approve(uint256 _tokenId, address _approved) internal {\n        kittyIndexToApproved[_tokenId] = _approved;\n    }\n}\n"
    },
    "contracts/airdrop/AirdropReceiverFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\n\nimport \"../interfaces/INftfiHub.sol\";\nimport \"../utils/ContractKeys.sol\";\nimport \"../utils/Ownable.sol\";\n\nimport \"./AirdropReceiver.sol\";\nimport \"./IAirdropReceiverFactory.sol\";\n\n/**\n * @title AirdropReceiver\n * @author NFTfi\n * @dev\n */\ncontract AirdropReceiverFactory is IAirdropReceiverFactory, Ownable {\n    INftfiHub public immutable hub;\n\n    event AirdropReceiverCreated(\n        address indexed instance,\n        uint256 indexed receiverId,\n        address indexed owner,\n        address creator\n    );\n\n    constructor(address _admin, address _nftfiHub) Ownable(_admin) {\n        hub = INftfiHub(_nftfiHub);\n    }\n\n    function createAirdropReceiver(address _to) external override returns (address, uint256) {\n        address receiverImpl = hub.getContract(ContractKeys.AIRDROP_RECEIVER);\n\n        address instance = Clones.clone(receiverImpl);\n\n        uint256 wrapperId = AirdropReceiver(instance).initialize(_to);\n\n        IPermittedNFTs(hub.getContract(ContractKeys.PERMITTED_NFTS)).setNFTPermit(\n            instance,\n            ContractKeys.AIRDROP_WRAPPER_STRING\n        );\n\n        emit AirdropReceiverCreated(instance, wrapperId, _to, msg.sender);\n\n        return (instance, wrapperId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/airdrop/IAirdropReceiverFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\n/**\n * @title IAirdropReceiver\n * @author NFTfi\n * @dev\n */\ninterface IAirdropReceiverFactory {\n    function createAirdropReceiver(address _to) external returns (address, uint256);\n}\n"
    },
    "contracts/loans/direct/loanTypes/LoanAirdropUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"./IDirectLoanBase.sol\";\nimport \"./LoanData.sol\";\nimport \"../../../interfaces/IDirectLoanCoordinator.sol\";\nimport \"../../../utils/ContractKeys.sol\";\nimport \"../../../interfaces/INftfiHub.sol\";\nimport \"../../../interfaces/IPermittedPartners.sol\";\nimport \"../../../interfaces/IPermittedERC20s.sol\";\nimport \"../../../interfaces/IAirdropFlashLoan.sol\";\nimport \"../../../interfaces/INftWrapper.sol\";\nimport \"../../../airdrop/IAirdropReceiverFactory.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title  LoanAirdropUtils\n * @author NFTfi\n * @notice Helper library for LoanBase\n */\nlibrary LoanAirdropUtils {\n    /**\n     * @notice This event is fired whenever a flashloan is initiated to pull an airdrop\n     *\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\n     * @param  borrower - The address of the borrower.\n     * @param  nftCollateralId - The ID within the AirdropReceiver for the NFT being used as collateral for this\n     * loan.\n     * @param  nftCollateralContract - The ERC721 contract of the NFT collateral\n     * @param target - address of the airdropping contract\n     * @param data - function selector to be called\n     */\n    event AirdropPulledFlashloan(\n        uint256 indexed loanId,\n        address indexed borrower,\n        uint256 nftCollateralId,\n        address nftCollateralContract,\n        address target,\n        bytes data\n    );\n\n    /**\n     * @notice This event is fired whenever the collateral gets wrapped in an airdrop receiver\n     *\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\n     * @param  borrower - The address of the borrower.\n     * @param  nftCollateralId - The ID within the AirdropReceiver for the NFT being used as collateral for this\n     * loan.\n     * @param  nftCollateralContract - The contract of the NFT collateral\n     * @param receiverId - id of the created AirdropReceiver, takes the place of nftCollateralId on the loan\n     * @param receiverInstance - address of the created AirdropReceiver\n     */\n    event CollateralWrapped(\n        uint256 indexed loanId,\n        address indexed borrower,\n        uint256 nftCollateralId,\n        address nftCollateralContract,\n        uint256 receiverId,\n        address receiverInstance\n    );\n\n    function pullAirdrop(\n        uint32 _loanId,\n        LoanData.LoanTerms memory _loan,\n        address _target,\n        bytes calldata _data,\n        address _nftAirdrop,\n        uint256 _nftAirdropId,\n        bool _is1155,\n        uint256 _nftAirdropAmount,\n        INftfiHub _hub\n    ) external {\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(\n            _hub.getContract(IDirectLoanBase(address(this)).LOAN_COORDINATOR())\n        );\n\n        address borrower;\n\n        // scoped to aviod stack too deep\n        {\n            IDirectLoanCoordinator.Loan memory loanCoordinatorData = loanCoordinator.getLoanData(_loanId);\n            uint256 smartNftId = loanCoordinatorData.smartNftId;\n            if (_loan.borrower != address(0)) {\n                borrower = _loan.borrower;\n            } else {\n                borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(smartNftId);\n            }\n        }\n\n        require(msg.sender == borrower, \"Only borrower can airdrop\");\n\n        {\n            IAirdropFlashLoan airdropFlashLoan = IAirdropFlashLoan(_hub.getContract(ContractKeys.AIRDROP_FLASH_LOAN));\n\n            _transferNFT(_loan, address(this), address(airdropFlashLoan));\n\n            airdropFlashLoan.pullAirdrop(\n                _loan.nftCollateralContract,\n                _loan.nftCollateralId,\n                _loan.nftCollateralWrapper,\n                _target,\n                _data,\n                _nftAirdrop,\n                _nftAirdropId,\n                _is1155,\n                _nftAirdropAmount,\n                borrower\n            );\n        }\n\n        // revert if the collateral hasn't been transferred back before it ends\n        require(\n            INftWrapper(_loan.nftCollateralWrapper).isOwner(\n                address(this),\n                _loan.nftCollateralContract,\n                _loan.nftCollateralId\n            ),\n            \"Collateral should be returned\"\n        );\n\n        emit AirdropPulledFlashloan(\n            _loanId,\n            borrower,\n            _loan.nftCollateralId,\n            _loan.nftCollateralContract,\n            _target,\n            _data\n        );\n    }\n\n    function wrapCollateral(\n        uint32 _loanId,\n        LoanData.LoanTerms storage _loan,\n        INftfiHub _hub\n    ) external returns (address instance, uint256 receiverId) {\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(\n            _hub.getContract(IDirectLoanBase(address(this)).LOAN_COORDINATOR())\n        );\n        // Fetch the current lender of the promissory note corresponding to this overdue loan.\n        IDirectLoanCoordinator.Loan memory loanCoordinatorData = loanCoordinator.getLoanData(_loanId);\n        uint256 smartNftId = loanCoordinatorData.smartNftId;\n\n        address borrower;\n\n        if (_loan.borrower != address(0)) {\n            borrower = _loan.borrower;\n        } else {\n            borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(smartNftId);\n        }\n\n        require(msg.sender == borrower, \"Only borrower can wrapp\");\n\n        IAirdropReceiverFactory factory = IAirdropReceiverFactory(_hub.getContract(ContractKeys.AIRDROP_FACTORY));\n        (instance, receiverId) = factory.createAirdropReceiver(address(this));\n\n        // transfer collateral to airdrop receiver wrapper\n        _transferNFTtoAirdropReceiver(_loan, instance, borrower);\n\n        emit CollateralWrapped(\n            _loanId,\n            borrower,\n            _loan.nftCollateralId,\n            _loan.nftCollateralContract,\n            receiverId,\n            instance\n        );\n\n        // set the receiver as the new collateral\n        _loan.nftCollateralContract = instance;\n        _loan.nftCollateralId = receiverId;\n    }\n\n    /**\n     * @dev Transfers several types of NFTs using a wrapper that knows how to handle each case.\n     *\n     * @param _loan -\n     * @param _sender - Current owner of the NFT\n     * @param _recipient - Recipient of the transfer\n     */\n    function _transferNFT(\n        LoanData.LoanTerms memory _loan,\n        address _sender,\n        address _recipient\n    ) internal {\n        Address.functionDelegateCall(\n            _loan.nftCollateralWrapper,\n            abi.encodeWithSelector(\n                INftWrapper(_loan.nftCollateralWrapper).transferNFT.selector,\n                _sender,\n                _recipient,\n                _loan.nftCollateralContract,\n                _loan.nftCollateralId\n            ),\n            \"NFT not successfully transferred\"\n        );\n    }\n\n    /**\n     * @dev Transfers several types of NFTs to an airdrop receiver with an airdrop beneficiary\n     * address attached as supplementing data using a wrapper that knows how to handle each case.\n     *\n     * @param _loan -\n     * @param _airdropReceiverInstance - Recipient of the transfer\n     * @param _airdropBeneficiary - Beneficiary of the future airdops\n     */\n    function _transferNFTtoAirdropReceiver(\n        LoanData.LoanTerms memory _loan,\n        address _airdropReceiverInstance,\n        address _airdropBeneficiary\n    ) internal {\n        Address.functionDelegateCall(\n            _loan.nftCollateralWrapper,\n            abi.encodeWithSelector(\n                INftWrapper(_loan.nftCollateralWrapper).wrapAirdropReceiver.selector,\n                _airdropReceiverInstance,\n                _loan.nftCollateralContract,\n                _loan.nftCollateralId,\n                _airdropBeneficiary\n            ),\n            \"NFT was not successfully migrated\"\n        );\n    }\n}\n"
    },
    "contracts/loans/direct/loanTypes/IDirectLoanBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\nimport \"./LoanData.sol\";\n\npragma solidity 0.8.4;\n\ninterface IDirectLoanBase {\n    function maximumLoanDuration() external view returns (uint256);\n\n    function adminFeeInBasisPoints() external view returns (uint16);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function LOAN_COORDINATOR() external view returns (bytes32);\n\n    function loanIdToLoan(uint32)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            address,\n            uint32,\n            uint16,\n            uint16,\n            address,\n            uint64,\n            address,\n            address\n        );\n\n    function loanRepaidOrLiquidated(uint32) external view returns (bool);\n\n    function getWhetherNonceHasBeenUsedForUser(address _user, uint256 _nonce) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IPermittedPartners.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\ninterface IPermittedPartners {\n    function getPartnerPermit(address _partner) external view returns (uint16);\n}\n"
    },
    "contracts/interfaces/IAirdropFlashLoan.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\ninterface IAirdropFlashLoan {\n    function pullAirdrop(\n        address _nftCollateralContract,\n        uint256 _nftCollateralId,\n        address _nftWrapper,\n        address _target,\n        bytes calldata _data,\n        address _nftAirdrop,\n        uint256 _nftAirdropId,\n        bool _is1155,\n        uint256 _nftAirdropAmount,\n        address _beneficiary\n    ) external;\n}\n"
    },
    "contracts/permittedLists/PermittedERC20s.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"../interfaces/IPermittedERC20s.sol\";\nimport \"../utils/Ownable.sol\";\n\n/**\n * @title  PermittedERC20s\n * @author NFTfi\n * @dev Registry for ERC20 currencies supported by NFTfi. Each ERC20 is\n * associated with a boolean permit.\n */\ncontract PermittedERC20s is Ownable, IPermittedERC20s {\n    /* ******* */\n    /* STORAGE */\n    /* ******* */\n\n    /**\n     * @notice A mapping from an ERC20 currency address to whether that currency\n     * is permitted to be used by this contract.\n     */\n    mapping(address => bool) private erc20Permits;\n\n    /* ****** */\n    /* EVENTS */\n    /* ****** */\n\n    /**\n     * @notice This event is fired whenever the admin sets a ERC20 permit.\n     *\n     * @param erc20Contract - Address of the ERC20 contract.\n     * @param isPermitted - Signals ERC20 permit.\n     */\n    event ERC20Permit(address indexed erc20Contract, bool isPermitted);\n\n    /* *********** */\n    /* CONSTRUCTOR */\n    /* *********** */\n\n    /**\n     * @notice Initialize `erc20Permits` with a batch of permitted ERC20s\n     *\n     * @param _admin - Initial admin of this contract.\n     * @param _permittedErc20s - The batch of addresses initially permitted.\n     */\n    constructor(address _admin, address[] memory _permittedErc20s) Ownable(_admin) {\n        for (uint256 i = 0; i < _permittedErc20s.length; i++) {\n            _setERC20Permit(_permittedErc20s[i], true);\n        }\n    }\n\n    /* ********* */\n    /* FUNCTIONS */\n    /* ********* */\n\n    /**\n     * @notice This function can be called by admins to change the permitted status of an ERC20 currency. This includes\n     * both adding an ERC20 currency to the permitted list and removing it.\n     *\n     * @param _erc20 - The address of the ERC20 currency whose permit list status changed.\n     * @param _permit - The new status of whether the currency is permitted or not.\n     */\n    function setERC20Permit(address _erc20, bool _permit) external onlyOwner {\n        _setERC20Permit(_erc20, _permit);\n    }\n\n    /**\n     * @notice This function can be called by admins to change the permitted status of a batch of ERC20 currency. This\n     * includes both adding an ERC20 currency to the permitted list and removing it.\n     *\n     * @param _erc20s - The addresses of the ERC20 currencies whose permit list status changed.\n     * @param _permits - The new statuses of whether the currency is permitted or not.\n     */\n    function setERC20Permits(address[] memory _erc20s, bool[] memory _permits) external onlyOwner {\n        require(_erc20s.length == _permits.length, \"setERC20Permits function information arity mismatch\");\n\n        for (uint256 i = 0; i < _erc20s.length; i++) {\n            _setERC20Permit(_erc20s[i], _permits[i]);\n        }\n    }\n\n    /**\n     * @notice This function can be called by anyone to get the permit associated with the erc20 contract.\n     *\n     * @param _erc20 - The address of the erc20 contract.\n     *\n     * @return Returns whether the erc20 is permitted\n     */\n    function getERC20Permit(address _erc20) external view override returns (bool) {\n        return erc20Permits[_erc20];\n    }\n\n    /**\n     * @notice This function can be called by admins to change the permitted status of an ERC20 currency. This includes\n     * both adding an ERC20 currency to the permitted list and removing it.\n     *\n     * @param _erc20 - The address of the ERC20 currency whose permit list status changed.\n     * @param _permit - The new status of whether the currency is permitted or not.\n     */\n    function _setERC20Permit(address _erc20, bool _permit) internal {\n        require(_erc20 != address(0), \"erc20 is zero address\");\n\n        erc20Permits[_erc20] = _permit;\n\n        emit ERC20Permit(_erc20, _permit);\n    }\n}\n"
    },
    "contracts/test/TestOwnable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"../utils/Ownable.sol\";\n\ncontract TestOwnable is Ownable {\n    constructor(address _admin) Ownable(_admin) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n"
    },
    "contracts/permittedLists/PermittedPartners.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"../interfaces/INftTypeRegistry.sol\";\nimport \"../interfaces/IPermittedPartners.sol\";\n\nimport \"../utils/Ownable.sol\";\n\n/**\n * @title  PermittedPartners\n * @author NFTfi\n * @dev Registry for partners permitted for reciving a revenue share.\n * Each partner's address is associated with the percent of the admin fee shared.\n */\ncontract PermittedPartners is Ownable, IPermittedPartners {\n    /* ******* */\n    /* STORAGE */\n    /* ******* */\n\n    uint256 public constant HUNDRED_PERCENT = 10000;\n\n    /**\n     * @notice A mapping from a partner's address to the percent of the admin fee shared with them. A zero indicates\n     * non-permitted.\n     */\n    mapping(address => uint16) private partnerRevenueShare;\n\n    /* ****** */\n    /* EVENTS */\n    /* ****** */\n\n    /**\n     * @notice This event is fired whenever the admin sets a partner's revenue share.\n     *\n     * @param partner - The address of the partner.\n     * @param revenueShareInBasisPoints - The percent (measured in basis points) of the admin fee amount that will be\n     * taken as a revenue share for a the partner.\n     */\n    event PartnerRevenueShare(address indexed partner, uint16 revenueShareInBasisPoints);\n\n    /* *********** */\n    /* CONSTRUCTOR */\n    /* *********** */\n\n    /**\n     * @notice Sets the admin of the contract.\n     *\n     * @param _admin - Initial admin of this contract.\n     */\n    constructor(address _admin) Ownable(_admin) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /* ********* */\n    /* FUNCTIONS */\n    /* ********* */\n\n    /**\n     * @notice This function can be called by admins to change the revenue share status of a partner. This includes\n     * adding an partner to the revenue share list, removing it and updating the revenue share percent.\n     *\n     * @param _partner - The address of the partner.\n     * @param _revenueShareInBasisPoints - The percent (measured in basis points) of the admin fee amount that will be\n     * taken as a revenue share for a the partner.\n     */\n    function setPartnerRevenueShare(address _partner, uint16 _revenueShareInBasisPoints) external onlyOwner {\n        require(_partner != address(0), \"Partner is address zero\");\n        require(_revenueShareInBasisPoints <= HUNDRED_PERCENT, \"Revenue share too big\");\n        partnerRevenueShare[_partner] = _revenueShareInBasisPoints;\n        emit PartnerRevenueShare(_partner, _revenueShareInBasisPoints);\n    }\n\n    /**\n     * @notice This function can be called by anyone to get the revenue share parcent associated with the partner.\n     *\n     * @param _partner - The address of the partner.\n     *\n     * @return Returns the partner's revenue share\n     */\n    function getPartnerPermit(address _partner) external view override returns (uint16) {\n        return partnerRevenueShare[_partner];\n    }\n}\n"
    },
    "contracts/interfaces/INftTypeRegistry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\n/**\n * @title INftTypeRegistry\n * @author NFTfi\n * @dev Interface for NFT Types Registry supported by NFTfi.\n */\ninterface INftTypeRegistry {\n    function setNftType(bytes32 _nftType, address _nftWrapper) external;\n\n    function getNftTypeWrapper(bytes32 _nftType) external view returns (address);\n}\n"
    },
    "contracts/loans/direct/loanTypes/LoanChecksAndCalculations.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"./IDirectLoanBase.sol\";\nimport \"./LoanData.sol\";\nimport \"../../../interfaces/IDirectLoanCoordinator.sol\";\nimport \"../../../utils/ContractKeys.sol\";\nimport \"../../../interfaces/INftfiHub.sol\";\nimport \"../../../interfaces/IPermittedPartners.sol\";\nimport \"../../../interfaces/IPermittedERC20s.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @title  LoanChecksAndCalculations\n * @author NFTfi\n * @notice Helper library for LoanBase\n */\nlibrary LoanChecksAndCalculations {\n    uint16 private constant HUNDRED_PERCENT = 10000;\n\n    /**\n     * @dev Function that performs some validation checks before trying to repay a loan\n     *\n     * @param _loanId - The id of the loan being repaid\n     */\n    function payBackChecks(uint32 _loanId, INftfiHub _hub) external view {\n        checkLoanIdValidity(_loanId, _hub);\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have never been called on this loanId.\n        // Depending on how the rest of the code turns out, this check may be unnecessary.\n        require(!IDirectLoanBase(address(this)).loanRepaidOrLiquidated(_loanId), \"Loan already repaid/liquidated\");\n\n        // Fetch loan details from storage, but store them in memory for the sake of saving gas.\n        (, , , , uint32 loanDuration, , , , uint64 loanStartTime, , ) = IDirectLoanBase(address(this)).loanIdToLoan(\n            _loanId\n        );\n\n        // When a loan exceeds the loan term, it is expired. At this stage the Lender can call Liquidate Loan to resolve\n        // the loan.\n        require(block.timestamp <= (uint256(loanStartTime) + uint256(loanDuration)), \"Loan is expired\");\n    }\n\n    function checkLoanIdValidity(uint32 _loanId, INftfiHub _hub) public view {\n        require(\n            IDirectLoanCoordinator(_hub.getContract(IDirectLoanBase(address(this)).LOAN_COORDINATOR())).isValidLoanId(\n                _loanId,\n                address(this)\n            ),\n            \"invalid loanId\"\n        );\n    }\n\n    /**\n     * @dev Function that the partner is permitted and returns its shared percent.\n     *\n     * @param _revenueSharePartner - Partner's address\n     *\n     * @return The revenue share percent for the partner.\n     */\n    function getRevenueSharePercent(address _revenueSharePartner, INftfiHub _hub) external view returns (uint16) {\n        // return soon if no partner is set to avoid a public call\n        if (_revenueSharePartner == address(0)) {\n            return 0;\n        }\n\n        uint16 revenueSharePercent = IPermittedPartners(_hub.getContract(ContractKeys.PERMITTED_PARTNERS))\n        .getPartnerPermit(_revenueSharePartner);\n\n        return revenueSharePercent;\n    }\n\n    /**\n     * @dev Performs some validation checks before trying to renegotiate a loan.\n     * Needed to avoid stack too deep.\n     *\n     * @param _loan - The main Loan Terms struct.\n     * @param _loanId - The unique identifier for the loan to be renegotiated\n     * @param _newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\n     * liquidate the loan and seize the underlying collateral NFT.\n     * @param _newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\n     * early.\n     * @param _lenderNonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are\n     * referring instead to nonces that are used by both the lender and the borrower when they are first signing\n     * off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\n     * lender or the borrower in that situation. This serves two purposes:\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\n     , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\n     * that nonce.\n     * @return Borrower and Lender addresses\n     */\n    function renegotiationChecks(\n        LoanData.LoanTerms memory _loan,\n        uint32 _loanId,\n        uint32 _newLoanDuration,\n        uint256 _newMaximumRepaymentAmount,\n        uint256 _lenderNonce,\n        INftfiHub _hub\n    ) external view returns (address, address) {\n        checkLoanIdValidity(_loanId, _hub);\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(\n            _hub.getContract(IDirectLoanBase(address(this)).LOAN_COORDINATOR())\n        );\n        uint256 smartNftId = loanCoordinator.getLoanData(_loanId).smartNftId;\n\n        address borrower;\n\n        if (_loan.borrower != address(0)) {\n            borrower = _loan.borrower;\n        } else {\n            borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(smartNftId);\n        }\n\n        require(msg.sender == borrower, \"Only borrower can initiate\");\n        require(block.timestamp <= (uint256(_loan.loanStartTime) + _newLoanDuration), \"New duration already expired\");\n        require(\n            uint256(_newLoanDuration) <= IDirectLoanBase(address(this)).maximumLoanDuration(),\n            \"New duration exceeds maximum loan duration\"\n        );\n        require(!IDirectLoanBase(address(this)).loanRepaidOrLiquidated(_loanId), \"Loan already repaid/liquidated\");\n        require(\n            _newMaximumRepaymentAmount >= _loan.loanPrincipalAmount,\n            \"Negative interest rate loans are not allowed.\"\n        );\n\n        // Fetch current owner of loan promissory note.\n        address lender = IERC721(loanCoordinator.promissoryNoteToken()).ownerOf(smartNftId);\n\n        require(\n            !IDirectLoanBase(address(this)).getWhetherNonceHasBeenUsedForUser(lender, _lenderNonce),\n            \"Lender nonce invalid\"\n        );\n\n        return (borrower, lender);\n    }\n\n    /**\n     * @dev Performs some validation checks over loan parameters when accepting a listing\n     *\n     */\n    function bindingTermsSanityChecks(LoanData.ListingTerms memory _listingTerms, LoanData.Offer memory _offer)\n        external\n        pure\n    {\n        // offer vs listing validations\n        require(_offer.loanERC20Denomination == _listingTerms.loanERC20Denomination, \"Invalid loanERC20Denomination\");\n        require(\n            _offer.loanPrincipalAmount >= _listingTerms.minLoanPrincipalAmount &&\n                _offer.loanPrincipalAmount <= _listingTerms.maxLoanPrincipalAmount,\n            \"Invalid loanPrincipalAmount\"\n        );\n        uint256 maxRepaymentLimit = _offer.loanPrincipalAmount +\n            (_offer.loanPrincipalAmount * _listingTerms.maxInterestRateForDurationInBasisPoints) /\n            HUNDRED_PERCENT;\n        require(_offer.maximumRepaymentAmount <= maxRepaymentLimit, \"maxInterestRateForDurationInBasisPoints violated\");\n\n        require(\n            _offer.loanDuration >= _listingTerms.minLoanDuration &&\n                _offer.loanDuration <= _listingTerms.maxLoanDuration,\n            \"Invalid loanDuration\"\n        );\n    }\n\n    /**\n     * @notice A convenience function computing the revenue share taken from the admin fee to transferr to the permitted\n     * partner.\n     *\n     * @param _adminFee - The quantity of ERC20 currency (measured in smalled units of that ERC20 currency) that is due\n     * as an admin fee.\n     * @param _revenueShareInBasisPoints - The percent (measured in basis points) of the admin fee amount that will be\n     * taken as a revenue share for a the partner, at the moment the loan is begun.\n     *\n     * @return The quantity of ERC20 currency (measured in smalled units of that ERC20 currency) that should be sent to\n     * the `revenueSharePartner`.\n     */\n    function computeRevenueShare(uint256 _adminFee, uint256 _revenueShareInBasisPoints)\n        external\n        pure\n        returns (uint256)\n    {\n        return (_adminFee * _revenueShareInBasisPoints) / HUNDRED_PERCENT;\n    }\n\n    /**\n     * @notice A convenience function computing the adminFee taken from a specified quantity of interest.\n     *\n     * @param _interestDue - The amount of interest due, measured in the smallest quantity of the ERC20 currency being\n     * used to pay the interest.\n     * @param _adminFeeInBasisPoints - The percent (measured in basis points) of the interest earned that will be taken\n     * as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\n     * earned.\n     *\n     * @return The quantity of ERC20 currency (measured in smalled units of that ERC20 currency) that is due as an admin\n     * fee.\n     */\n    function computeAdminFee(uint256 _interestDue, uint256 _adminFeeInBasisPoints) external pure returns (uint256) {\n        return (_interestDue * _adminFeeInBasisPoints) / HUNDRED_PERCENT;\n    }\n\n    /**\n     * @notice A convenience function computing the referral fee taken from the loan principal amount to transferr to\n     * the referrer.\n     *\n     * @param _loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * @param _referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\n     * @param _referrer - The address of the referrer who found the lender matching the listing, Zero address to signal\n     * that there is no referrer.\n     *\n     * @return The quantity of ERC20 currency (measured in smalled units of that ERC20 currency) that should be sent to\n     * the referrer.\n     */\n    function computeReferralFee(\n        uint256 _loanPrincipalAmount,\n        uint256 _referralFeeInBasisPoints,\n        address _referrer\n    ) external pure returns (uint256) {\n        if (_referralFeeInBasisPoints == 0 || _referrer == address(0)) {\n            return 0;\n        }\n        return (_loanPrincipalAmount * _referralFeeInBasisPoints) / HUNDRED_PERCENT;\n    }\n}\n"
    },
    "contracts/permittedLists/PermittedNFTsAndTypeRegistry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"../interfaces/IPermittedNFTs.sol\";\nimport \"../interfaces/INftTypeRegistry.sol\";\nimport \"../interfaces/INftfiHub.sol\";\n\nimport \"../utils/Ownable.sol\";\nimport \"../utils/ContractKeys.sol\";\n\n/**\n * @title  PermittedNFTsAndTypeRegistry\n * @author NFTfi\n * @dev Registry for NFT contracts supported by NFTfi.\n * Each NFT is associated with an NFT Type.\n */\ncontract PermittedNFTsAndTypeRegistry is Ownable, IPermittedNFTs {\n    INftfiHub public hub;\n    mapping(bytes32 => address) private nftTypes;\n\n    /**\n     * @notice A mapping from an NFT contract's address to the Token type of that contract. A zero Token Type indicates\n     * non-permitted.\n     */\n    mapping(address => bytes32) private nftPermits;\n\n    /* ****** */\n    /* EVENTS */\n    /* ****** */\n\n    /**\n     * @notice This event is fired whenever the admins register a ntf type.\n     *\n     * @param nftType - Nft type represented by keccak256('nft type').\n     * @param nftWrapper - Address of the wrapper contract.\n     */\n    event TypeUpdated(bytes32 indexed nftType, address indexed nftWrapper);\n\n    /**\n     * @notice This event is fired whenever the admin sets a NFT's permit.\n     *\n     * @param nftContract - Address of the NFT contract.\n     * @param nftType - NTF type e.g. bytes32(\"CRYPTO_KITTIES\")\n     */\n    event NFTPermit(address indexed nftContract, bytes32 indexed nftType);\n\n    /* ********* */\n    /* MODIFIERS */\n    /* ********* */\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwnerOrAirdropFactory(string memory _nftType) {\n        if (\n            ContractKeys.getIdFromStringKey(_nftType) ==\n            ContractKeys.getIdFromStringKey(ContractKeys.AIRDROP_WRAPPER_STRING)\n        ) {\n            require(hub.getContract(ContractKeys.AIRDROP_FACTORY) == _msgSender(), \"caller is not AirdropFactory\");\n        } else {\n            require(owner() == _msgSender(), \"caller is not owner\");\n        }\n        _;\n    }\n\n    /* *********** */\n    /* CONSTRUCTOR */\n    /* *********** */\n\n    /**\n     * @dev Sets `nftTypeRegistry`\n     * Initialize `nftPermits` with a batch of permitted NFTs\n     *\n     * @param _admin - Initial admin of this contract.\n     * @param _nftfiHub - Address of the NftfiHub contract\n     * @param _definedNftTypes - All the ossible nft types\n     * @param _definedNftWrappers - All the possible wrappers for the types\n     * @param _permittedNftContracts - The addresses of the NFT contracts.\n     * @param _permittedNftTypes - The NFT Types. e.g. \"CRYPTO_KITTIES\"\n     * - \"\" means \"disable this permit\"\n     * - != \"\" means \"enable permit with the given NFT Type\"\n     */\n    constructor(\n        address _admin,\n        address _nftfiHub,\n        string[] memory _definedNftTypes,\n        address[] memory _definedNftWrappers,\n        address[] memory _permittedNftContracts,\n        string[] memory _permittedNftTypes\n    ) Ownable(_admin) {\n        hub = INftfiHub(_nftfiHub);\n        _setNftTypes(_definedNftTypes, _definedNftWrappers);\n        _setNFTPermits(_permittedNftContracts, _permittedNftTypes);\n    }\n\n    /* ********* */\n    /* FUNCTIONS */\n    /* ********* */\n\n    /**\n     * @notice This function can be called by admins to change the permitted list status of an NFT contract. This\n     * includes both adding an NFT contract to the permitted list and removing it.\n     * `_nftContract` can not be zero address.\n     *\n     * @param _nftContract - The address of the NFT contract.\n     * @param _nftType - The NFT Type. e.g. \"CRYPTO_KITTIES\"\n     * - \"\" means \"disable this permit\"\n     * - != \"\" means \"enable permit with the given NFT Type\"\n     */\n    function setNFTPermit(address _nftContract, string memory _nftType)\n        external\n        override\n        onlyOwnerOrAirdropFactory(_nftType)\n    {\n        _setNFTPermit(_nftContract, _nftType);\n    }\n\n    /**\n     * @notice This function can be called by admins to change the permitted list status of a batch NFT contracts. This\n     * includes both adding an NFT contract to the permitted list and removing it.\n     * `_nftContract` can not be zero address.\n     *\n     * @param _nftContracts - The addresses of the NFT contracts.\n     * @param _nftTypes - The NFT Types. e.g. \"CRYPTO_KITTIES\"\n     * - \"\" means \"disable this permit\"\n     * - != \"\" means \"enable permit with the given NFT Type\"\n     */\n    function setNFTPermits(address[] memory _nftContracts, string[] memory _nftTypes) external onlyOwner {\n        _setNFTPermits(_nftContracts, _nftTypes);\n    }\n\n    /**\n     * @notice This function can be called by anyone to lookup the Nft Type associated with the contract.\n     * @param  _nftContract - The address of the NFT contract.\n     * @notice Returns the NFT Type:\n     * - bytes32(\"\") means \"not permitted\"\n     * - != bytes32(\"\") means \"permitted with the given NFT Type\"\n     */\n    function getNFTPermit(address _nftContract) external view override returns (bytes32) {\n        return nftPermits[_nftContract];\n    }\n\n    /**\n     * @notice This function can be called by anyone to lookup the address of the NftWrapper associated to the\n     * `_nftContract` type.\n     * @param _nftContract - The address of the NFT contract.\n     */\n    function getNFTWrapper(address _nftContract) external view override returns (address) {\n        bytes32 nftType = nftPermits[_nftContract];\n        return getNftTypeWrapper(nftType);\n    }\n\n    /**\n     * @notice Set or update the wrapper contract address for the given NFT Type.\n     * Set address(0) for a nft type for un-register such type.\n     *\n     * @param _nftType - The nft type, e.g. \"ERC721\", or \"ERC1155\".\n     * @param _nftWrapper - The address of the wrapper contract that implements INftWrapper behaviour for dealing with\n     * NFTs.\n     */\n    function setNftType(string memory _nftType, address _nftWrapper) external onlyOwner {\n        _setNftType(_nftType, _nftWrapper);\n    }\n\n    /**\n     * @notice Batch set or update the wrappers contract address for the given batch of NFT Types.\n     * Set address(0) for a nft type for un-register such type.\n     *\n     * @param _nftTypes - The nft types, e.g. \"ERC721\", or \"ERC1155\".\n     * @param _nftWrappers - The addresses of the wrapper contract that implements INftWrapper behaviour for dealing\n     * with NFTs.\n     */\n    function setNftTypes(string[] memory _nftTypes, address[] memory _nftWrappers) external onlyOwner {\n        _setNftTypes(_nftTypes, _nftWrappers);\n    }\n\n    /**\n     * @notice This function can be called by anyone to get the contract address that implements the given nft type.\n     *\n     * @param  _nftType - The nft type, e.g. bytes32(\"ERC721\"), or bytes32(\"ERC1155\").\n     */\n    function getNftTypeWrapper(bytes32 _nftType) public view returns (address) {\n        return nftTypes[_nftType];\n    }\n\n    /**\n     * @notice Set or update the wrapper contract address for the given NFT Type.\n     * Set address(0) for a nft type for un-register such type.\n     *\n     * @param _nftType - The nft type, e.g. \"ERC721\", or \"ERC1155\".\n     * @param _nftWrapper - The address of the wrapper contract that implements INftWrapper behaviour for dealing with\n     * NFTs.\n     */\n    function _setNftType(string memory _nftType, address _nftWrapper) internal {\n        require(bytes(_nftType).length != 0, \"nftType is empty\");\n        bytes32 nftTypeKey = ContractKeys.getIdFromStringKey(_nftType);\n\n        nftTypes[nftTypeKey] = _nftWrapper;\n\n        emit TypeUpdated(nftTypeKey, _nftWrapper);\n    }\n\n    /**\n     * @notice Batch set or update the wrappers contract address for the given batch of NFT Types.\n     * Set address(0) for a nft type for un-register such type.\n     *\n     * @param _nftTypes - The nft types, e.g. keccak256(\"ERC721\"), or keccak256(\"ERC1155\").\n     * @param _nftWrappers - The addresses of the wrapper contract that implements INftWrapper behaviour for dealing\n     * with NFTs.\n     */\n    function _setNftTypes(string[] memory _nftTypes, address[] memory _nftWrappers) internal {\n        require(_nftTypes.length == _nftWrappers.length, \"setNftTypes function information arity mismatch\");\n\n        for (uint256 i = 0; i < _nftWrappers.length; i++) {\n            _setNftType(_nftTypes[i], _nftWrappers[i]);\n        }\n    }\n\n    /**\n     * @notice This function changes the permitted list status of an NFT contract. This includes both adding an NFT\n     * contract to the permitted list and removing it.\n     * @param _nftContract - The address of the NFT contract.\n     * @param _nftType - The NFT Type. e.g. bytes32(\"CRYPTO_KITTIES\")\n     * - bytes32(\"\") means \"disable this permit\"\n     * - != bytes32(\"\") means \"enable permit with the given NFT Type\"\n     */\n    function _setNFTPermit(address _nftContract, string memory _nftType) internal {\n        require(_nftContract != address(0), \"nftContract is zero address\");\n        bytes32 nftTypeKey = ContractKeys.getIdFromStringKey(_nftType);\n\n        if (nftTypeKey != 0) {\n            require(getNftTypeWrapper(nftTypeKey) != address(0), \"NFT type not registered\");\n        }\n\n        require(\n            nftPermits[_nftContract] != ContractKeys.getIdFromStringKey(ContractKeys.AIRDROP_WRAPPER_STRING),\n            \"AirdropWrapper can't be modified\"\n        );\n        nftPermits[_nftContract] = nftTypeKey;\n        emit NFTPermit(_nftContract, nftTypeKey);\n    }\n\n    /**\n     * @notice This function changes the permitted list status of a batch NFT contracts. This includes both adding an\n     * NFT contract to the permitted list and removing it.\n     * @param _nftContracts - The addresses of the NFT contracts.\n     * @param _nftTypes - The NFT Types. e.g. \"CRYPTO_KITTIES\"\n     * - \"\" means \"disable this permit\"\n     * - != \"\" means \"enable permit with the given NFT Type\"\n     */\n    function _setNFTPermits(address[] memory _nftContracts, string[] memory _nftTypes) internal {\n        require(_nftContracts.length == _nftTypes.length, \"setNFTPermits function information arity mismatch\");\n\n        for (uint256 i = 0; i < _nftContracts.length; i++) {\n            _setNFTPermit(_nftContracts[i], _nftTypes[i]);\n        }\n    }\n}\n"
    },
    "contracts/loans/direct/loanTypes/DirectLoanBaseMinimal.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"./IDirectLoanBase.sol\";\nimport \"./LoanData.sol\";\nimport \"./LoanChecksAndCalculations.sol\";\nimport \"./LoanAirdropUtils.sol\";\nimport \"../../BaseLoan.sol\";\nimport \"../../../utils/NftReceiver.sol\";\nimport \"../../../utils/NFTfiSigningUtils.sol\";\nimport \"../../../interfaces/INftfiHub.sol\";\nimport \"../../../utils/ContractKeys.sol\";\nimport \"../../../interfaces/IDirectLoanCoordinator.sol\";\nimport \"../../../interfaces/INftWrapper.sol\";\nimport \"../../../interfaces/IPermittedPartners.sol\";\nimport \"../../../interfaces/IPermittedERC20s.sol\";\nimport \"../../../interfaces/IPermittedNFTs.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title  DirectLoanBase\n * @author NFTfi\n * @notice Main contract for NFTfi Direct Loans Type. This contract manages the ability to create NFT-backed\n * peer-to-peer loans.\n *\n * There are two ways to commence an NFT-backed loan:\n *\n * a. The borrower accepts a lender's offer by calling `acceptOffer`.\n *   1. the borrower calls nftContract.approveAll(NFTfi), approving the NFTfi contract to move their NFT's on their\n * be1alf.\n *   2. the lender calls erc20Contract.approve(NFTfi), allowing NFTfi to move the lender's ERC20 tokens on their\n * behalf.\n *   3. the lender signs an off-chain message, proposing its offer terms.\n *   4. the borrower calls `acceptOffer` to accept these terms and enter into the loan. The NFT is stored in\n * the contract, the borrower receives the loan principal in the specified ERC20 currency, the lender receives an\n * NFTfi promissory note (in ERC721 form) that represents the rights to either the principal-plus-interest, or the\n * underlying NFT collateral if the borrower does not pay back in time, and the borrower receives obligation receipt\n * (in ERC721 form) that gives them the right to pay back the loan and get the collateral back.\n *\n * b. The lender accepts a borrowe's binding terms by calling `acceptListing`.\n *   1. the borrower calls nftContract.approveAll(NFTfi), approving the NFTfi contract to move their NFT's on their\n * be1alf.\n *   2. the lender calls erc20Contract.approve(NFTfi), allowing NFTfi to move the lender's ERC20 tokens on their\n * behalf.\n *   3. the borrower signs an off-chain message, proposing its binding terms.\n *   4. the lender calls `acceptListing` with an offer matching the binding terms and enter into the loan. The NFT is\n * stored in the contract, the borrower receives the loan principal in the specified ERC20 currency, the lender\n * receives an NFTfi promissory note (in ERC721 form) that represents the rights to either the principal-plus-interest,\n * or the underlying NFT collateral if the borrower does not pay back in time, and the borrower receives obligation\n * receipt (in ERC721 form) that gives them the right to pay back the loan and get the collateral back.\n *\n * The lender can freely transfer and trade this ERC721 promissory note as they wish, with the knowledge that\n * transferring the ERC721 promissory note tranfsers the rights to principal-plus-interest and/or collateral, and that\n * they will no longer have a claim on the loan. The ERC721 promissory note itself represents that claim.\n *\n * The borrower can freely transfer and trade this ERC721 obligaiton receipt as they wish, with the knowledge that\n * transferring the ERC721 obligaiton receipt tranfsers the rights right to pay back the loan and get the collateral\n * back.\n *\n * A loan may end in one of two ways:\n * - First, a borrower may call NFTfi.payBackLoan() and pay back the loan plus interest at any time, in which case they\n * receive their NFT back in the same transaction.\n * - Second, if the loan's duration has passed and the loan has not been paid back yet, a lender can call\n * NFTfi.liquidateOverdueLoan(), in which case they receive the underlying NFT collateral and forfeit the rights to the\n * principal-plus-interest, which the borrower now keeps.\n *\n *\n * If the loan was created as a ProRated type loan (pro-rata interest loan), then the user only pays the principal plus\n * pro-rata interest if repaid early.\n * However, if the loan was was created as a Fixed type loan (agreed to be a fixed-repayment loan), then the borrower\n * pays the maximumRepaymentAmount regardless of whether they repay early or not.\n *\n */\nabstract contract DirectLoanBaseMinimal is IDirectLoanBase, IPermittedERC20s, BaseLoan, NftReceiver, LoanData {\n    using SafeERC20 for IERC20;\n\n    /* ******* */\n    /* STORAGE */\n    /* ******* */\n\n    uint16 public constant HUNDRED_PERCENT = 10000;\n\n    bytes32 public immutable override LOAN_COORDINATOR;\n\n    /**\n     * @notice The maximum duration of any loan started for this loan type, measured in seconds. This is both a\n     * sanity-check for borrowers and an upper limit on how long admins will have to support v1 of this contract if they\n     * eventually deprecate it, as well as a check to ensure that the loan duration never exceeds the space alotted for\n     * it in the loan struct.\n     */\n    uint256 public override maximumLoanDuration = 53 weeks;\n\n    /**\n     * @notice The percentage of interest earned by lenders on this platform that is taken by the contract admin's as a\n     * fee, measured in basis points (hundreths of a percent). The max allowed value is 10000.\n     */\n    uint16 public override adminFeeInBasisPoints = 25;\n\n    /**\n     * @notice A mapping from a loan's identifier to the loan's details, represted by the loan struct.\n     */\n    mapping(uint32 => LoanTerms) public override loanIdToLoan;\n    mapping(uint32 => LoanExtras) public loanIdToLoanExtras;\n\n    /**\n     * @notice A mapping tracking whether a loan has either been repaid or liquidated. This prevents an attacker trying\n     * to repay or liquidate the same loan twice.\n     */\n    mapping(uint32 => bool) public override loanRepaidOrLiquidated;\n\n    /**\n     * @dev keeps track of tokens being held as loan collateral, so we dont allow these\n     * to be transferred with the aridrop draining functions\n     */\n    mapping(address => mapping(uint256 => uint256)) private _escrowTokens;\n\n    /**\n     * @notice A mapping that takes both a user's address and a loan nonce that was first used when signing an off-chain\n     * order and checks whether that nonce has previously either been used for a loan, or has been pre-emptively\n     * cancelled. The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to\n     * nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders.\n     *\n     * These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each\n     * nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower\n     * in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would submit a\n     * user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\n     * using the user's off-chain order that contains that nonce.\n     */\n    mapping(address => mapping(uint256 => bool)) internal _nonceHasBeenUsedForUser;\n\n    /**\n     * @notice A mapping from an ERC20 currency address to whether that currency\n     * is permitted to be used by this contract.\n     */\n    mapping(address => bool) private erc20Permits;\n\n    INftfiHub public immutable hub;\n\n    /* ****** */\n    /* EVENTS */\n    /* ****** */\n\n    /**\n     * @notice This event is fired whenever the admins change the percent of interest rates earned that they charge as a\n     * fee. Note that newAdminFee can never exceed 10,000, since the fee is measured in basis points.\n     *\n     * @param  newAdminFee - The new admin fee measured in basis points. This is a percent of the interest paid upon a\n     * loan's completion that go to the contract admins.\n     */\n    event AdminFeeUpdated(uint16 newAdminFee);\n\n    /**\n     * @notice This event is fired whenever the admins change the maximum duration of any loan started for this loan\n     * type.\n     *\n     * @param  newMaximumLoanDuration - The new maximum duration.\n     */\n    event MaximumLoanDurationUpdated(uint256 newMaximumLoanDuration);\n\n    /**\n     * @notice This event is fired whenever a borrower begins a loan by calling NFTfi.beginLoan(), which can only occur\n     * after both the lender and borrower have approved their ERC721 and ERC20 contracts to use NFTfi, and when they\n     * both have signed off-chain messages that agree on the terms of the loan.\n     *\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\n     * @param  borrower - The address of the borrower.\n     * @param  lender - The address of the lender. The lender can change their address by transferring the NFTfi ERC721\n     * token that they received when the loan began.\n     */\n    event LoanStarted(\n        uint32 indexed loanId,\n        address indexed borrower,\n        address indexed lender,\n        LoanTerms loanTerms,\n        LoanExtras loanExtras\n    );\n\n    /**\n     * @notice This event is fired whenever a borrower successfully repays their loan, paying\n     * principal-plus-interest-minus-fee to the lender in loanERC20Denomination, paying fee to owner in\n     * loanERC20Denomination, and receiving their NFT collateral back.\n     *\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\n     * @param  borrower - The address of the borrower.\n     * @param  lender - The address of the lender. The lender can change their address by transferring the NFTfi ERC721\n     * token that they received when the loan began.\n     * @param  loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * @param  nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\n     * loan. The NFT is stored within this contract during the duration of the loan.\n     * @param  amountPaidToLender The amount of ERC20 that the borrower paid to the lender, measured in the smalled\n     * units of loanERC20Denomination.\n     * @param  adminFee The amount of interest paid to the contract admins, measured in the smalled units of\n     * loanERC20Denomination and determined by adminFeeInBasisPoints. This amount never exceeds the amount of interest\n     * earned.\n     * @param  revenueShare The amount taken from admin fee amount shared with the partner.\n     * @param  revenueSharePartner  - The address of the partner that will receive the revenue share.\n     * @param  nftCollateralContract - The ERC721 contract of the NFT collateral\n     * @param  loanERC20Denomination - The ERC20 contract of the currency being used as principal/interest for this\n     * loan.\n     */\n    event LoanRepaid(\n        uint32 indexed loanId,\n        address indexed borrower,\n        address indexed lender,\n        uint256 loanPrincipalAmount,\n        uint256 nftCollateralId,\n        uint256 amountPaidToLender,\n        uint256 adminFee,\n        uint256 revenueShare,\n        address revenueSharePartner,\n        address nftCollateralContract,\n        address loanERC20Denomination\n    );\n\n    /**\n     * @notice This event is fired whenever a lender liquidates an outstanding loan that is owned to them that has\n     * exceeded its duration. The lender receives the underlying NFT collateral, and the borrower no longer needs to\n     * repay the loan principal-plus-interest.\n     *\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\n     * @param  borrower - The address of the borrower.\n     * @param  lender - The address of the lender. The lender can change their address by transferring the NFTfi ERC721\n     * token that they received when the loan began.\n     * @param  loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\n     * the loan, measured in loanERC20Denomination's smallest units.\n     * @param  nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\n     * loan. The NFT is stored within this contract during the duration of the loan.\n     * @param  loanMaturityDate - The unix time (measured in seconds) that the loan became due and was eligible for\n     * liquidation.\n     * @param  loanLiquidationDate - The unix time (measured in seconds) that liquidation occurred.\n     * @param  nftCollateralContract - The ERC721 contract of the NFT collateral\n     */\n    event LoanLiquidated(\n        uint32 indexed loanId,\n        address indexed borrower,\n        address indexed lender,\n        uint256 loanPrincipalAmount,\n        uint256 nftCollateralId,\n        uint256 loanMaturityDate,\n        uint256 loanLiquidationDate,\n        address nftCollateralContract\n    );\n\n    /**\n     * @notice This event is fired when some of the terms of a loan are being renegotiated.\n     *\n     * @param loanId - The unique identifier for the loan to be renegotiated\n     * @param newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\n     * liquidate the loan and seize the underlying collateral NFT.\n     * @param newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\n     * early.\n     * @param renegotiationFee Agreed upon fee in loan denomination that borrower pays for the lender for the\n     * renegotiation, has to be paid with an ERC20 transfer loanERC20Denomination token, uses transfer from,\n     * frontend will have to propmt an erc20 approve for this from the borrower to the lender\n     * @param renegotiationAdminFee renegotiationFee admin portion based on determined by adminFeeInBasisPoints\n     */\n    event LoanRenegotiated(\n        uint32 indexed loanId,\n        address indexed borrower,\n        address indexed lender,\n        uint32 newLoanDuration,\n        uint256 newMaximumRepaymentAmount,\n        uint256 renegotiationFee,\n        uint256 renegotiationAdminFee\n    );\n\n    /**\n     * @notice This event is fired whenever the admin sets a ERC20 permit.\n     *\n     * @param erc20Contract - Address of the ERC20 contract.\n     * @param isPermitted - Signals ERC20 permit.\n     */\n    event ERC20Permit(address indexed erc20Contract, bool isPermitted);\n\n    /* *********** */\n    /* CONSTRUCTOR */\n    /* *********** */\n\n    /**\n     * @dev Sets `hub`\n     *\n     * @param _admin - Initial admin of this contract.\n     * @param  _nftfiHub - NFTfiHub address\n     * @param  _loanCoordinatorKey -\n     * @param  _permittedErc20s -\n     */\n    constructor(\n        address _admin,\n        address _nftfiHub,\n        bytes32 _loanCoordinatorKey,\n        address[] memory _permittedErc20s\n    ) BaseLoan(_admin) {\n        hub = INftfiHub(_nftfiHub);\n        LOAN_COORDINATOR = _loanCoordinatorKey;\n        for (uint256 i = 0; i < _permittedErc20s.length; i++) {\n            _setERC20Permit(_permittedErc20s[i], true);\n        }\n    }\n\n    /* *************** */\n    /* ADMIN FUNCTIONS */\n    /* *************** */\n\n    /**\n     * @notice This function can be called by admins to change the maximumLoanDuration. Note that they can never change\n     * maximumLoanDuration to be greater than UINT32_MAX, since that's the maximum space alotted for the duration in the\n     * loan struct.\n     *\n     * @param _newMaximumLoanDuration - The new maximum loan duration, measured in seconds.\n     */\n    function updateMaximumLoanDuration(uint256 _newMaximumLoanDuration) external onlyOwner {\n        require(_newMaximumLoanDuration <= uint256(type(uint32).max), \"Loan duration overflow\");\n        maximumLoanDuration = _newMaximumLoanDuration;\n        emit MaximumLoanDurationUpdated(_newMaximumLoanDuration);\n    }\n\n    /**\n     * @notice This function can be called by admins to change the percent of interest rates earned that they charge as\n     * a fee. Note that newAdminFee can never exceed 10,000, since the fee is measured in basis points.\n     *\n     * @param _newAdminFeeInBasisPoints - The new admin fee measured in basis points. This is a percent of the interest\n     * paid upon a loan's completion that go to the contract admins.\n     */\n    function updateAdminFee(uint16 _newAdminFeeInBasisPoints) external onlyOwner {\n        require(_newAdminFeeInBasisPoints <= HUNDRED_PERCENT, \"basis points > 10000\");\n        adminFeeInBasisPoints = _newAdminFeeInBasisPoints;\n        emit AdminFeeUpdated(_newAdminFeeInBasisPoints);\n    }\n\n    /**\n     * @notice used by the owner account to be able to drain ERC20 tokens received as airdrops\n     * for the locked  collateral NFT-s\n     * @param _tokenAddress - address of the token contract for the token to be sent out\n     * @param _receiver - receiver of the token\n     */\n    function drainERC20Airdrop(address _tokenAddress, address _receiver) external onlyOwner {\n        IERC20 tokenContract = IERC20(_tokenAddress);\n        uint256 amount = tokenContract.balanceOf(address(this));\n        require(amount > 0, \"no tokens owned\");\n        tokenContract.safeTransfer(_receiver, amount);\n    }\n\n    /**\n     * @notice This function can be called by admins to change the permitted status of an ERC20 currency. This includes\n     * both adding an ERC20 currency to the permitted list and removing it.\n     *\n     * @param _erc20 - The address of the ERC20 currency whose permit list status changed.\n     * @param _permit - The new status of whether the currency is permitted or not.\n     */\n    function setERC20Permit(address _erc20, bool _permit) external onlyOwner {\n        _setERC20Permit(_erc20, _permit);\n    }\n\n    /**\n     * @notice This function can be called by admins to change the permitted status of a batch of ERC20 currency. This\n     * includes both adding an ERC20 currency to the permitted list and removing it.\n     *\n     * @param _erc20s - The addresses of the ERC20 currencies whose permit list status changed.\n     * @param _permits - The new statuses of whether the currency is permitted or not.\n     */\n    function setERC20Permits(address[] memory _erc20s, bool[] memory _permits) external onlyOwner {\n        require(_erc20s.length == _permits.length, \"setERC20Permits function information arity mismatch\");\n\n        for (uint256 i = 0; i < _erc20s.length; i++) {\n            _setERC20Permit(_erc20s[i], _permits[i]);\n        }\n    }\n\n    /**\n     * @notice used by the owner account to be able to drain ERC721 tokens received as airdrops\n     * for the locked  collateral NFT-s\n     * @param _tokenAddress - address of the token contract for the token to be sent out\n     * @param _tokenId - id token to be sent out\n     * @param _receiver - receiver of the token\n     */\n    function drainERC721Airdrop(\n        address _tokenAddress,\n        uint256 _tokenId,\n        address _receiver\n    ) external onlyOwner {\n        IERC721 tokenContract = IERC721(_tokenAddress);\n        require(_escrowTokens[_tokenAddress][_tokenId] == 0, \"token is collateral\");\n        require(tokenContract.ownerOf(_tokenId) == address(this), \"nft not owned\");\n        tokenContract.safeTransferFrom(address(this), _receiver, _tokenId);\n    }\n\n    /**\n     * @notice used by the owner account to be able to drain ERC1155 tokens received as airdrops\n     * for the locked  collateral NFT-s\n     * @param _tokenAddress - address of the token contract for the token to be sent out\n     * @param _tokenId - id token to be sent out\n     * @param _receiver - receiver of the token\n     */\n    function drainERC1155Airdrop(\n        address _tokenAddress,\n        uint256 _tokenId,\n        address _receiver\n    ) external onlyOwner {\n        IERC1155 tokenContract = IERC1155(_tokenAddress);\n        uint256 amount = tokenContract.balanceOf(address(this), _tokenId);\n        require(_escrowTokens[_tokenAddress][_tokenId] == 0, \"token is collateral\");\n        require(amount > 0, \"no nfts owned\");\n        tokenContract.safeTransferFrom(address(this), _receiver, _tokenId, amount, \"\");\n    }\n\n    function mintObligationReceipt(uint32 _loanId) external nonReentrant {\n        address borrower = loanIdToLoan[_loanId].borrower;\n        require(msg.sender == borrower, \"sender has to be borrower\");\n\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\n        loanCoordinator.mintObligationReceipt(_loanId, borrower);\n\n        delete loanIdToLoan[_loanId].borrower;\n    }\n\n    /**\n     * @dev makes possible to change loan duration and max repayment amount, loan duration even can be extended if\n     * loan was expired but not liquidated.\n     *\n     * @param _loanId - The unique identifier for the loan to be renegotiated\n     * @param _newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\n     * liquidate the loan and seize the underlying collateral NFT.\n     * @param _newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\n     * early.\n     * @param _renegotiationFee Agreed upon fee in ether that borrower pays for the lender for the renegitiation\n     * @param _lenderNonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are\n     * referring instead to nonces that are used by both the lender and the borrower when they are first signing\n     * off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\n     * lender or the borrower in that situation. This serves two purposes:\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\n     * that nonce.\n     * @param _expiry - The date when the renegotiation offer expires\n     * @param _lenderSignature - The ECDSA signature of the lender, obtained off-chain ahead of time, signing the\n     * following combination of parameters:\n     * - _loanId\n     * - _newLoanDuration\n     * - _newMaximumRepaymentAmount\n     * - _lender\n     * - _expiry\n     *  - address of this contract\n     * - chainId\n     */\n    function renegotiateLoan(\n        uint32 _loanId,\n        uint32 _newLoanDuration,\n        uint256 _newMaximumRepaymentAmount,\n        uint256 _renegotiationFee,\n        uint256 _lenderNonce,\n        uint256 _expiry,\n        bytes memory _lenderSignature\n    ) external whenNotPaused nonReentrant {\n        _renegotiateLoan(\n            _loanId,\n            _newLoanDuration,\n            _newMaximumRepaymentAmount,\n            _renegotiationFee,\n            _lenderNonce,\n            _expiry,\n            _lenderSignature\n        );\n    }\n\n    /**\n     * @notice This function is called by a anyone to repay a loan. It can be called at any time after the loan has\n     * begun and before loan expiry.. The caller will pay a pro-rata portion of their interest if the loan is paid off\n     * early and the loan is pro-rated type, but the complete repayment amount if it is fixed type.\n     * The the borrower (current owner of the obligation note) will get the collaterl NFT back.\n     *\n     * This function is purposefully not pausable in order to prevent an attack where the contract admin's pause the\n     * contract and hold hostage the NFT's that are still within it.\n     *\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\n     */\n    function payBackLoan(uint32 _loanId) external nonReentrant {\n        LoanChecksAndCalculations.payBackChecks(_loanId, hub);\n        (\n            address borrower,\n            address lender,\n            LoanTerms memory loan,\n            IDirectLoanCoordinator loanCoordinator\n        ) = _getPartiesAndData(_loanId);\n\n        _payBackLoan(_loanId, borrower, lender, loan);\n\n        _resolveLoan(_loanId, borrower, loan, loanCoordinator);\n\n        // Delete the loan from storage in order to achieve a substantial gas savings and to lessen the burden of\n        // storage on Ethereum nodes, since we will never access this loan's details again, and the details are still\n        // available through event data.\n        delete loanIdToLoan[_loanId];\n        delete loanIdToLoanExtras[_loanId];\n    }\n\n    /**\n     * @notice This function is called by a lender once a loan has finished its duration and the borrower still has not\n     * repaid. The lender can call this function to seize the underlying NFT collateral, although the lender gives up\n     * all rights to the principal-plus-collateral by doing so.\n     *\n     * This function is purposefully not pausable in order to prevent an attack where the contract admin's pause\n     * the contract and hold hostage the NFT's that are still within it.\n     *\n     * We intentionally allow anybody to call this function, although only the lender will end up receiving the seized\n     * collateral. We are exploring the possbility of incentivizing users to call this function by using some of the\n     * admin funds.\n     *\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\n     */\n    function liquidateOverdueLoan(uint32 _loanId) external nonReentrant {\n        LoanChecksAndCalculations.checkLoanIdValidity(_loanId, hub);\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have never been called on this loanId.\n        // Depending on how the rest of the code turns out, this check may be unnecessary.\n        require(!loanRepaidOrLiquidated[_loanId], \"Loan already repaid/liquidated\");\n\n        (\n            address borrower,\n            address lender,\n            LoanTerms memory loan,\n            IDirectLoanCoordinator loanCoordinator\n        ) = _getPartiesAndData(_loanId);\n\n        // Ensure that the loan is indeed overdue, since we can only liquidate overdue loans.\n        uint256 loanMaturityDate = uint256(loan.loanStartTime) + uint256(loan.loanDuration);\n        require(block.timestamp > loanMaturityDate, \"Loan is not overdue yet\");\n\n        require(msg.sender == lender, \"Only lender can liquidate\");\n\n        _resolveLoan(_loanId, lender, loan, loanCoordinator);\n\n        // Emit an event with all relevant details from this transaction.\n        emit LoanLiquidated(\n            _loanId,\n            borrower,\n            lender,\n            loan.loanPrincipalAmount,\n            loan.nftCollateralId,\n            loanMaturityDate,\n            block.timestamp,\n            loan.nftCollateralContract\n        );\n\n        // Delete the loan from storage in order to achieve a substantial gas savings and to lessen the burden of\n        // storage on Ethereum nodes, since we will never access this loan's details again, and the details are still\n        // available through event data.\n        delete loanIdToLoan[_loanId];\n        delete loanIdToLoanExtras[_loanId];\n    }\n\n    /**\n     * @notice this function initiates a flashloan to pull an airdrop from a tartget contract\n     *\n     * @param _loanId -\n     * @param _target - address of the airdropping contract\n     * @param _data - function selector to be called on the airdropping contract\n     * @param _nftAirdrop - address of the used claiming nft in the drop\n     * @param _nftAirdropId - id of the used claiming nft in the drop\n     * @param _is1155 -\n     * @param _nftAirdropAmount - amount in case of 1155\n     */\n\n    function pullAirdrop(\n        uint32 _loanId,\n        address _target,\n        bytes calldata _data,\n        address _nftAirdrop,\n        uint256 _nftAirdropId,\n        bool _is1155,\n        uint256 _nftAirdropAmount\n    ) external nonReentrant {\n        LoanChecksAndCalculations.checkLoanIdValidity(_loanId, hub);\n        require(!loanRepaidOrLiquidated[_loanId], \"Loan already repaid/liquidated\");\n\n        LoanTerms memory loan = loanIdToLoan[_loanId];\n\n        LoanAirdropUtils.pullAirdrop(\n            _loanId,\n            loan,\n            _target,\n            _data,\n            _nftAirdrop,\n            _nftAirdropId,\n            _is1155,\n            _nftAirdropAmount,\n            hub\n        );\n    }\n\n    /**\n     * @notice this function creates a proxy contract wrapping the collateral to be able to catch an expected airdrop\n     *\n     * @param _loanId -\n     */\n\n    function wrapCollateral(uint32 _loanId) external nonReentrant {\n        LoanChecksAndCalculations.checkLoanIdValidity(_loanId, hub);\n        require(!loanRepaidOrLiquidated[_loanId], \"Loan already repaid/liquidated\");\n\n        LoanTerms storage loan = loanIdToLoan[_loanId];\n\n        _escrowTokens[loan.nftCollateralContract][loan.nftCollateralId] -= 1;\n        (address instance, uint256 receiverId) = LoanAirdropUtils.wrapCollateral(_loanId, loan, hub);\n        _escrowTokens[instance][receiverId] += 1;\n    }\n\n    /**\n     * @notice This function can be called by either a lender or a borrower to cancel all off-chain orders that they\n     * have signed that contain this nonce. If the off-chain orders were created correctly, there should only be one\n     * off-chain order that contains this nonce at all.\n     *\n     * The nonce referred to here is not the same as an Ethereum account's nonce. We are referring\n     * instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi\n     * orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order.\n     * Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the\n     * borrower in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would\n     * submit a user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\n     * using the user's off-chain order that contains that nonce.\n     *\n     * @param  _nonce - User nonce\n     */\n    function cancelLoanCommitmentBeforeLoanHasBegun(uint256 _nonce) external {\n        require(!_nonceHasBeenUsedForUser[msg.sender][_nonce], \"Invalid nonce\");\n        _nonceHasBeenUsedForUser[msg.sender][_nonce] = true;\n    }\n\n    /* ******************* */\n    /* READ-ONLY FUNCTIONS */\n    /* ******************* */\n\n    /**\n     * @notice This function can be used to view the current quantity of the ERC20 currency used in the specified loan\n     * required by the borrower to repay their loan, measured in the smallest unit of the ERC20 currency.\n     *\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\n     *\n     * @return The amount of the specified ERC20 currency required to pay back this loan, measured in the smallest unit\n     * of the specified ERC20 currency.\n     */\n    function getPayoffAmount(uint32 _loanId) external view virtual returns (uint256);\n\n    /**\n     * @notice This function can be used to view whether a particular nonce for a particular user has already been used,\n     * either from a successful loan or a cancelled off-chain order.\n     *\n     * @param _user - The address of the user. This function works for both lenders and borrowers alike.\n     * @param  _nonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are referring\n     * instead to nonces that are used by both the lender and the borrower when they are first signing off-chain\n     * NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain\n     * order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or\n     * the borrower in that situation. This serves two purposes:\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\n     * that nonce.\n     *\n     * @return A bool representing whether or not this nonce has been used for this user.\n     */\n    function getWhetherNonceHasBeenUsedForUser(address _user, uint256 _nonce) external view override returns (bool) {\n        return _nonceHasBeenUsedForUser[_user][_nonce];\n    }\n\n    /**\n     * @notice This function can be called by anyone to get the permit associated with the erc20 contract.\n     *\n     * @param _erc20 - The address of the erc20 contract.\n     *\n     * @return Returns whether the erc20 is permitted\n     */\n    function getERC20Permit(address _erc20) public view override returns (bool) {\n        return erc20Permits[_erc20];\n    }\n\n    /* ****************** */\n    /* INTERNAL FUNCTIONS */\n    /* ****************** */\n\n    /**\n     * @dev makes possible to change loan duration and max repayment amount, loan duration even can be extended if\n     * loan was expired but not liquidated. IMPORTANT: Frontend will have to propt the caller to do an ERC20 approve for\n     * the fee amount from themselves (borrower/obligation reciept holder) to the lender (promissory note holder)\n     *\n     * @param _loanId - The unique identifier for the loan to be renegotiated\n     * @param _newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\n     * liquidate the loan and seize the underlying collateral NFT.\n     * @param _newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\n     * early.\n     * @param _renegotiationFee Agreed upon fee in loan denomination that borrower pays for the lender and\n     * the admin for the renegotiation, has to be paid with an ERC20 transfer loanERC20Denomination token,\n     * uses transfer from, frontend will have to propmt an erc20 approve for this from the borrower to the lender,\n     * admin fee is calculated by the loan's loanAdminFeeInBasisPoints value\n     * @param _lenderNonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are\n     * referring instead to nonces that are used by both the lender and the borrower when they are first signing\n     * off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\n     * lender or the borrower in that situation. This serves two purposes:\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\n     , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\n     * that nonce.\n     * @param _expiry - The date when the renegotiation offer expires\n     * @param _lenderSignature - The ECDSA signature of the lender, obtained off-chain ahead of time, signing the\n     * following combination of parameters:\n     * - _loanId\n     * - _newLoanDuration\n     * - _newMaximumRepaymentAmount\n     * - _lender\n     * - _expiry\n     * - address of this contract\n     * - chainId\n     */\n    function _renegotiateLoan(\n        uint32 _loanId,\n        uint32 _newLoanDuration,\n        uint256 _newMaximumRepaymentAmount,\n        uint256 _renegotiationFee,\n        uint256 _lenderNonce,\n        uint256 _expiry,\n        bytes memory _lenderSignature\n    ) internal {\n        LoanTerms storage loan = loanIdToLoan[_loanId];\n\n        (address borrower, address lender) = LoanChecksAndCalculations.renegotiationChecks(\n            loan,\n            _loanId,\n            _newLoanDuration,\n            _newMaximumRepaymentAmount,\n            _lenderNonce,\n            hub\n        );\n\n        _nonceHasBeenUsedForUser[lender][_lenderNonce] = true;\n\n        require(\n            NFTfiSigningUtils.isValidLenderRenegotiationSignature(\n                _loanId,\n                _newLoanDuration,\n                _newMaximumRepaymentAmount,\n                _renegotiationFee,\n                Signature({signer: lender, nonce: _lenderNonce, expiry: _expiry, signature: _lenderSignature})\n            ),\n            \"Renegotiation signature is invalid\"\n        );\n\n        uint256 renegotiationAdminFee;\n        /**\n         * @notice Transfers fee to the lender immediately\n         * @dev implements Checks-Effects-Interactions pattern by modifying state only after\n         * the transfer happened successfully, we also add the nonReentrant modifier to\n         * the pbulic versions\n         */\n        if (_renegotiationFee > 0) {\n            renegotiationAdminFee = LoanChecksAndCalculations.computeAdminFee(\n                _renegotiationFee,\n                loan.loanAdminFeeInBasisPoints\n            );\n            // Transfer principal-plus-interest-minus-fees from the caller (always has to be borrower) to lender\n            IERC20(loan.loanERC20Denomination).safeTransferFrom(\n                borrower,\n                lender,\n                _renegotiationFee - renegotiationAdminFee\n            );\n            // Transfer fees from the caller (always has to be borrower) to admins\n            IERC20(loan.loanERC20Denomination).safeTransferFrom(borrower, owner(), renegotiationAdminFee);\n        }\n\n        loan.loanDuration = _newLoanDuration;\n        loan.maximumRepaymentAmount = _newMaximumRepaymentAmount;\n\n        emit LoanRenegotiated(\n            _loanId,\n            borrower,\n            lender,\n            _newLoanDuration,\n            _newMaximumRepaymentAmount,\n            _renegotiationFee,\n            renegotiationAdminFee\n        );\n    }\n\n    /**\n     * @dev Transfer collateral NFT from borrower to this contract and principal from lender to the borrower and\n     * registers the new loan through the loan coordinator.\n     *\n     * @param _loanType - The type of loan it is being created\n     * @param _loanTerms - Struct containing the loan's settings\n     * @param _loanExtras - Struct containing some loan's extra settings, needed to avoid stack too deep\n     * @param _lender - The address of the lender.\n     * @param _referrer - The address of the referrer who found the lender matching the listing, Zero address to signal\n     * that there is no referrer.\n     */\n    function _createLoan(\n        bytes32 _loanType,\n        LoanTerms memory _loanTerms,\n        LoanExtras memory _loanExtras,\n        address _borrower,\n        address _lender,\n        address _referrer\n    ) internal returns (uint32) {\n        // Transfer collateral from borrower to this contract to be held until\n        // loan completion.\n        _transferNFT(_loanTerms, _borrower, address(this));\n\n        return _createLoanNoNftTransfer(_loanType, _loanTerms, _loanExtras, _borrower, _lender, _referrer);\n    }\n\n    /**\n     * @dev Transfer principal from lender to the borrower and\n     * registers the new loan through the loan coordinator.\n     *\n     * @param _loanType - The type of loan it is being created\n     * @param _loanTerms - Struct containing the loan's settings\n     * @param _loanExtras - Struct containing some loan's extra settings, needed to avoid stack too deep\n     * @param _lender - The address of the lender.\n     * @param _referrer - The address of the referrer who found the lender matching the listing, Zero address to signal\n     * that there is no referrer.\n     */\n    function _createLoanNoNftTransfer(\n        bytes32 _loanType,\n        LoanTerms memory _loanTerms,\n        LoanExtras memory _loanExtras,\n        address _borrower,\n        address _lender,\n        address _referrer\n    ) internal returns (uint32 loanId) {\n        _escrowTokens[_loanTerms.nftCollateralContract][_loanTerms.nftCollateralId] += 1;\n\n        uint256 referralfee = LoanChecksAndCalculations.computeReferralFee(\n            _loanTerms.loanPrincipalAmount,\n            _loanExtras.referralFeeInBasisPoints,\n            _referrer\n        );\n        uint256 principalAmount = _loanTerms.loanPrincipalAmount - referralfee;\n        if (referralfee > 0) {\n            // Transfer the referral fee from lender to referrer.\n            IERC20(_loanTerms.loanERC20Denomination).safeTransferFrom(_lender, _referrer, referralfee);\n        }\n        // Transfer principal from lender to borrower.\n        IERC20(_loanTerms.loanERC20Denomination).safeTransferFrom(_lender, _borrower, principalAmount);\n\n        // Issue an ERC721 promissory note to the lender that gives them the\n        // right to either the principal-plus-interest or the collateral,\n        // and an obligation note to the borrower that gives them the\n        // right to pay back the loan and get the collateral back.\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\n        loanId = loanCoordinator.registerLoan(_lender, _loanType);\n\n        // Add the loan to storage before moving collateral/principal to follow\n        // the Checks-Effects-Interactions pattern.\n        loanIdToLoan[loanId] = _loanTerms;\n        loanIdToLoanExtras[loanId] = _loanExtras;\n\n        return loanId;\n    }\n\n    /**\n     * @dev Transfers several types of NFTs using a wrapper that knows how to handle each case.\n     *\n     * @param _loanTerms - Struct containing all the loan's parameters\n     * @param _sender - Current owner of the NFT\n     * @param _recipient - Recipient of the transfer\n     */\n    function _transferNFT(\n        LoanTerms memory _loanTerms,\n        address _sender,\n        address _recipient\n    ) internal {\n        Address.functionDelegateCall(\n            _loanTerms.nftCollateralWrapper,\n            abi.encodeWithSelector(\n                INftWrapper(_loanTerms.nftCollateralWrapper).transferNFT.selector,\n                _sender,\n                _recipient,\n                _loanTerms.nftCollateralContract,\n                _loanTerms.nftCollateralId\n            ),\n            \"NFT not successfully transferred\"\n        );\n    }\n\n    /**\n     * @notice This function is called by a anyone to repay a loan. It can be called at any time after the loan has\n     * begun and before loan expiry.. The caller will pay a pro-rata portion of their interest if the loan is paid off\n     * early and the loan is pro-rated type, but the complete repayment amount if it is fixed type.\n     * The the borrower (current owner of the obligation note) will get the collaterl NFT back.\n     *\n     * This function is purposefully not pausable in order to prevent an attack where the contract admin's pause the\n     * contract and hold hostage the NFT's that are still within it.\n     *\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\n     */\n    function _payBackLoan(\n        uint32 _loanId,\n        address _borrower,\n        address _lender,\n        LoanTerms memory _loan\n    ) internal {\n        // Fetch loan details from storage, but store them in memory for the sake of saving gas.\n        LoanExtras memory loanExtras = loanIdToLoanExtras[_loanId];\n\n        (uint256 adminFee, uint256 payoffAmount) = _payoffAndFee(_loan);\n\n        // Transfer principal-plus-interest-minus-fees from the caller to lender\n        IERC20(_loan.loanERC20Denomination).safeTransferFrom(msg.sender, _lender, payoffAmount);\n\n        uint256 revenueShare = LoanChecksAndCalculations.computeRevenueShare(\n            adminFee,\n            loanExtras.revenueShareInBasisPoints\n        );\n        // PermittedPartners contract doesn't allow to set a revenueShareInBasisPoints for address zero so revenuShare\n        // > 0 implies that revenueSharePartner ~= address(0), BUT revenueShare can be zero for a partener when the\n        // adminFee is low\n        if (revenueShare > 0 && loanExtras.revenueSharePartner != address(0)) {\n            adminFee -= revenueShare;\n            // Transfer revenue share from the caller to permitted partner\n            IERC20(_loan.loanERC20Denomination).safeTransferFrom(\n                msg.sender,\n                loanExtras.revenueSharePartner,\n                revenueShare\n            );\n        }\n        // Transfer fees from the caller to admins\n        IERC20(_loan.loanERC20Denomination).safeTransferFrom(msg.sender, owner(), adminFee);\n\n        // Emit an event with all relevant details from this transaction.\n        emit LoanRepaid(\n            _loanId,\n            _borrower,\n            _lender,\n            _loan.loanPrincipalAmount,\n            _loan.nftCollateralId,\n            payoffAmount,\n            adminFee,\n            revenueShare,\n            loanExtras.revenueSharePartner, // this could be a non address zero even if revenueShare is 0\n            _loan.nftCollateralContract,\n            _loan.loanERC20Denomination\n        );\n    }\n\n    /**\n     * @notice A convenience function with shared functionality between `payBackLoan` and `liquidateOverdueLoan`.\n     *\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\n     * @param _nftReceiver - The receiver of the collateral nft. The borrower when `payBackLoan` or the lender when\n     * `liquidateOverdueLoan`.\n     * @param _loanTerms - The main Loan Terms struct. This data is saved upon loan creation on loanIdToLoan.\n     * @param _loanCoordinator - The loan coordinator used when creating the loan.\n     */\n    function _resolveLoan(\n        uint32 _loanId,\n        address _nftReceiver,\n        LoanTerms memory _loanTerms,\n        IDirectLoanCoordinator _loanCoordinator\n    ) internal {\n        _resolveLoanNoNftTransfer(_loanId, _loanTerms, _loanCoordinator);\n        // Transfer collateral from this contract to the lender, since the lender is seizing collateral for an overdue\n        // loan\n        _transferNFT(_loanTerms, address(this), _nftReceiver);\n    }\n\n    /**\n     * @notice Resolving the loan without trasferring the nft to provide a base for the bundle\n     * break up of the bundled loans\n     *\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\n     * @param _loanTerms - The main Loan Terms struct. This data is saved upon loan creation on loanIdToLoan.\n     * @param _loanCoordinator - The loan coordinator used when creating the loan.\n     */\n    function _resolveLoanNoNftTransfer(\n        uint32 _loanId,\n        LoanTerms memory _loanTerms,\n        IDirectLoanCoordinator _loanCoordinator\n    ) internal {\n        // Mark loan as liquidated before doing any external transfers to follow the Checks-Effects-Interactions design\n        // pattern\n        loanRepaidOrLiquidated[_loanId] = true;\n\n        _escrowTokens[_loanTerms.nftCollateralContract][_loanTerms.nftCollateralId] -= 1;\n\n        // Destroy the lender's promissory note for this loan and borrower obligation receipt\n        _loanCoordinator.resolveLoan(_loanId);\n    }\n\n    /**\n     * @notice This function can be called by admins to change the permitted status of an ERC20 currency. This includes\n     * both adding an ERC20 currency to the permitted list and removing it.\n     *\n     * @param _erc20 - The address of the ERC20 currency whose permit list status changed.\n     * @param _permit - The new status of whether the currency is permitted or not.\n     */\n    function _setERC20Permit(address _erc20, bool _permit) internal {\n        require(_erc20 != address(0), \"erc20 is zero address\");\n\n        erc20Permits[_erc20] = _permit;\n\n        emit ERC20Permit(_erc20, _permit);\n    }\n\n    /**\n     * @dev Performs some validation checks over loan parameters\n     *\n     */\n    function _loanSanityChecks(LoanData.Offer memory _offer, address _nftWrapper) internal view {\n        require(getERC20Permit(_offer.loanERC20Denomination), \"Currency denomination is not permitted\");\n        require(_nftWrapper != address(0), \"NFT collateral contract is not permitted\");\n        require(uint256(_offer.loanDuration) <= maximumLoanDuration, \"Loan duration exceeds maximum loan duration\");\n        require(uint256(_offer.loanDuration) != 0, \"Loan duration cannot be zero\");\n        require(\n            _offer.loanAdminFeeInBasisPoints == adminFeeInBasisPoints,\n            \"The admin fee has changed since this order was signed.\"\n        );\n    }\n\n    /**\n     * @dev reads some variable values of a loan for payback functions, created to reduce code repetition\n     */\n    function _getPartiesAndData(uint32 _loanId)\n        internal\n        view\n        returns (\n            address borrower,\n            address lender,\n            LoanTerms memory loan,\n            IDirectLoanCoordinator loanCoordinator\n        )\n    {\n        loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\n        IDirectLoanCoordinator.Loan memory loanCoordinatorData = loanCoordinator.getLoanData(_loanId);\n        uint256 smartNftId = loanCoordinatorData.smartNftId;\n        // Fetch loan details from storage, but store them in memory for the sake of saving gas.\n        loan = loanIdToLoan[_loanId];\n        if (loan.borrower != address(0)) {\n            borrower = loan.borrower;\n        } else {\n            // Fetch current owner of loan obligation note.\n            borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(smartNftId);\n        }\n        lender = IERC721(loanCoordinator.promissoryNoteToken()).ownerOf(smartNftId);\n    }\n\n    /**\n     * @dev Creates a `LoanExtras` struct using data sent as the borrower's extra settings.\n     * This is needed in order to avoid stack too deep issues.\n     */\n    function _setupLoanExtras(address _revenueSharePartner, uint16 _referralFeeInBasisPoints)\n        internal\n        view\n        returns (LoanExtras memory)\n    {\n        // Save loan details to a struct in memory first, to save on gas if any\n        // of the below checks fail, and to avoid the \"Stack Too Deep\" error by\n        // clumping the parameters together into one struct held in memory.\n        return\n            LoanExtras({\n                revenueSharePartner: _revenueSharePartner,\n                revenueShareInBasisPoints: LoanChecksAndCalculations.getRevenueSharePercent(_revenueSharePartner, hub),\n                referralFeeInBasisPoints: _referralFeeInBasisPoints\n            });\n    }\n\n    /**\n     * @dev Calculates the payoff amount and admin fee\n     */\n    function _payoffAndFee(LoanTerms memory _loanTerms) internal view virtual returns (uint256, uint256);\n\n    /**\n     * @dev Checks that the collateral is a supported contracts and returns what wrapper to use for the loan's NFT\n     * collateral contract.\n     *\n     * @param _nftCollateralContract - The address of the the NFT collateral contract.\n     *\n     * @return Address of the NftWrapper to use for the loan's NFT collateral.\n     */\n    function _getWrapper(address _nftCollateralContract) internal view returns (address) {\n        return IPermittedNFTs(hub.getContract(ContractKeys.PERMITTED_NFTS)).getNFTWrapper(_nftCollateralContract);\n    }\n}\n"
    },
    "contracts/loans/BaseLoan.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"../utils/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/**\n * @title  BaseLoan\n * @author NFTfi\n * @dev Implements base functionalities common to all Loan types.\n * Mostly related to governance and security.\n */\nabstract contract BaseLoan is Ownable, Pausable, ReentrancyGuard {\n    /* *********** */\n    /* CONSTRUCTOR */\n    /* *********** */\n\n    /**\n     * @notice Sets the admin of the contract.\n     *\n     * @param _admin - Initial admin of this contract.\n     */\n    constructor(address _admin) Ownable(_admin) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /* ********* */\n    /* FUNCTIONS */\n    /* ********* */\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - Only the owner can call this method.\n     * - The contract must not be paused.\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - Only the owner can call this method.\n     * - The contract must be paused.\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"./DirectLoanBaseMinimal.sol\";\nimport \"../../../utils/ContractKeys.sol\";\n\n/**\n * @title  DirectLoanFixed\n * @author NFTfi\n * @notice Main contract for NFTfi Direct Loans Fixed Type. This contract manages the ability to create NFT-backed\n * peer-to-peer loans of type Fixed (agreed to be a fixed-repayment loan) where the borrower pays the\n * maximumRepaymentAmount regardless of whether they repay early or not.\n *\n * There are two ways to commence an NFT-backed loan:\n *\n * a. The borrower accepts a lender's offer by calling `acceptOffer`.\n *   1. the borrower calls nftContract.approveAll(NFTfi), approving the NFTfi contract to move their NFT's on their\n * be1alf.\n *   2. the lender calls erc20Contract.approve(NFTfi), allowing NFTfi to move the lender's ERC20 tokens on their\n * behalf.\n *   3. the lender signs an off-chain message, proposing its offer terms.\n *   4. the borrower calls `acceptOffer` to accept these terms and enter into the loan. The NFT is stored in\n * the contract, the borrower receives the loan principal in the specified ERC20 currency, the lender receives an\n * NFTfi promissory note (in ERC721 form) that represents the rights to either the principal-plus-interest, or the\n * underlying NFT collateral if the borrower does not pay back in time, and the borrower receives obligation receipt\n * (in ERC721 form) that gives them the right to pay back the loan and get the collateral back.\n *\n * b. The lender accepts a borrowe's binding terms by calling `acceptListing`.\n *   1. the borrower calls nftContract.approveAll(NFTfi), approving the NFTfi contract to move their NFT's on their\n * be1alf.\n *   2. the lender calls erc20Contract.approve(NFTfi), allowing NFTfi to move the lender's ERC20 tokens on their\n * behalf.\n *   3. the borrower signs an off-chain message, proposing its binding terms.\n *   4. the lender calls `acceptListing` with an offer matching the binding terms and enter into the loan. The NFT is\n * stored in the contract, the borrower receives the loan principal in the specified ERC20 currency, the lender\n * receives an NFTfi promissory note (in ERC721 form) that represents the rights to either the principal-plus-interest,\n * or the underlying NFT collateral if the borrower does not pay back in time, and the borrower receives obligation\n * receipt (in ERC721 form) that gives them the right to pay back the loan and get the collateral back.\n *\n * The lender can freely transfer and trade this ERC721 promissory note as they wish, with the knowledge that\n * transferring the ERC721 promissory note tranfsers the rights to principal-plus-interest and/or collateral, and that\n * they will no longer have a claim on the loan. The ERC721 promissory note itself represents that claim.\n *\n * The borrower can freely transfer and trade this ERC721 obligaiton receipt as they wish, with the knowledge that\n * transferring the ERC721 obligaiton receipt tranfsers the rights right to pay back the loan and get the collateral\n * back.\n *\n *\n * A loan may end in one of two ways:\n * - First, a borrower may call NFTfi.payBackLoan() and pay back the loan plus interest at any time, in which case they\n * receive their NFT back in the same transaction.\n * - Second, if the loan's duration has passed and the loan has not been paid back yet, a lender can call\n * NFTfi.liquidateOverdueLoan(), in which case they receive the underlying NFT collateral and forfeit the rights to the\n * principal-plus-interest, which the borrower now keeps.\n */\ncontract DirectLoanFixedOffer is DirectLoanBaseMinimal {\n    /* ********** */\n    /* DATA TYPES */\n    /* ********** */\n\n    bytes32 public constant LOAN_TYPE = bytes32(\"DIRECT_LOAN_FIXED_OFFER\");\n\n    /* *********** */\n    /* CONSTRUCTOR */\n    /* *********** */\n\n    /**\n     * @dev Sets `hub` and permitted erc20-s\n     *\n     * @param _admin - Initial admin of this contract.\n     * @param  _nftfiHub - NFTfiHub address\n     * @param  _permittedErc20s - list of permitted ERC20 token contract addresses\n     */\n    constructor(\n        address _admin,\n        address _nftfiHub,\n        address[] memory _permittedErc20s\n    )\n        DirectLoanBaseMinimal(\n            _admin,\n            _nftfiHub,\n            ContractKeys.getIdFromStringKey(\"DIRECT_LOAN_COORDINATOR\"),\n            _permittedErc20s\n        )\n    {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /* ********* */\n    /* FUNCTIONS */\n    /* ********* */\n\n    /**\n     * @notice This function is called by the borrower when accepting a lender's offer to begin a loan.\n     *\n     * @param _offer - The offer made by the lender.\n     * @param _signature - The components of the lender's signature.\n     * @param _borrowerSettings - Some extra parameters that the borrower needs to set when accepting an offer.\n     */\n    function acceptOffer(\n        Offer memory _offer,\n        Signature memory _signature,\n        BorrowerSettings memory _borrowerSettings\n    ) external whenNotPaused nonReentrant {\n        address nftWrapper = _getWrapper(_offer.nftCollateralContract);\n        _loanSanityChecks(_offer, nftWrapper);\n        _loanSanityChecksOffer(_offer);\n        _acceptOffer(\n            LOAN_TYPE,\n            _setupLoanTerms(_offer, nftWrapper),\n            _setupLoanExtras(_borrowerSettings.revenueSharePartner, _borrowerSettings.referralFeeInBasisPoints),\n            _offer,\n            _signature\n        );\n    }\n\n    /* ******************* */\n    /* READ-ONLY FUNCTIONS */\n    /* ******************* */\n\n    /**\n     * @notice This function can be used to view the current quantity of the ERC20 currency used in the specified loan\n     * required by the borrower to repay their loan, measured in the smallest unit of the ERC20 currency.\n     *\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\n     *\n     * @return The amount of the specified ERC20 currency required to pay back this loan, measured in the smallest unit\n     * of the specified ERC20 currency.\n     */\n    function getPayoffAmount(uint32 _loanId) external view override returns (uint256) {\n        LoanTerms storage loan = loanIdToLoan[_loanId];\n        return loan.maximumRepaymentAmount;\n    }\n\n    /* ****************** */\n    /* INTERNAL FUNCTIONS */\n    /* ****************** */\n\n    /**\n     * @notice This function is called by the borrower when accepting a lender's offer to begin a loan.\n     *\n     * @param _loanType - The loan type being created.\n     * @param _loanTerms - The main Loan Terms struct. This data is saved upon loan creation on loanIdToLoan.\n     * @param _loanExtras - The main Loan Terms struct. This data is saved upon loan creation on loanIdToLoanExtras.\n     * @param _offer - The offer made by the lender.\n     * @param _signature - The components of the lender's signature.\n     */\n    function _acceptOffer(\n        bytes32 _loanType,\n        LoanTerms memory _loanTerms,\n        LoanExtras memory _loanExtras,\n        Offer memory _offer,\n        Signature memory _signature\n    ) internal {\n        // Check loan nonces. These are different from Ethereum account nonces.\n        // Here, these are uint256 numbers that should uniquely identify\n        // each signature for each user (i.e. each user should only create one\n        // off-chain signature for each nonce, with a nonce being any arbitrary\n        // uint256 value that they have not used yet for an off-chain NFTfi\n        // signature).\n        require(!_nonceHasBeenUsedForUser[_signature.signer][_signature.nonce], \"Lender nonce invalid\");\n\n        _nonceHasBeenUsedForUser[_signature.signer][_signature.nonce] = true;\n\n        require(NFTfiSigningUtils.isValidLenderSignature(_offer, _signature), \"Lender signature is invalid\");\n\n        address bundle = hub.getContract(ContractKeys.NFTFI_BUNDLER);\n        require(_loanTerms.nftCollateralContract != bundle, \"Collateral cannot be bundle\");\n\n        uint32 loanId = _createLoan(_loanType, _loanTerms, _loanExtras, msg.sender, _signature.signer, _offer.referrer);\n\n        // Emit an event with all relevant details from this transaction.\n        emit LoanStarted(loanId, msg.sender, _signature.signer, _loanTerms, _loanExtras);\n    }\n\n    /**\n     * @dev Creates a `LoanTerms` struct using data sent as the lender's `_offer` on `acceptOffer`.\n     * This is needed in order to avoid stack too deep issues.\n     * Since this is a Fixed loan type loanInterestRateForDurationInBasisPoints is ignored.\n     */\n    function _setupLoanTerms(Offer memory _offer, address _nftWrapper) internal view returns (LoanTerms memory) {\n        return\n            LoanTerms({\n                loanERC20Denomination: _offer.loanERC20Denomination,\n                loanPrincipalAmount: _offer.loanPrincipalAmount,\n                maximumRepaymentAmount: _offer.maximumRepaymentAmount,\n                nftCollateralContract: _offer.nftCollateralContract,\n                nftCollateralWrapper: _nftWrapper,\n                nftCollateralId: _offer.nftCollateralId,\n                loanStartTime: uint64(block.timestamp),\n                loanDuration: _offer.loanDuration,\n                loanInterestRateForDurationInBasisPoints: uint16(0),\n                loanAdminFeeInBasisPoints: _offer.loanAdminFeeInBasisPoints,\n                borrower: msg.sender\n            });\n    }\n\n    /**\n     * @dev Calculates the payoff amount and admin fee\n     *\n     * @param _loanTerms - Struct containing all the loan's parameters\n     */\n    function _payoffAndFee(LoanTerms memory _loanTerms)\n        internal\n        pure\n        override\n        returns (uint256 adminFee, uint256 payoffAmount)\n    {\n        // Calculate amounts to send to lender and admins\n        uint256 interestDue = _loanTerms.maximumRepaymentAmount - _loanTerms.loanPrincipalAmount;\n        adminFee = LoanChecksAndCalculations.computeAdminFee(\n            interestDue,\n            uint256(_loanTerms.loanAdminFeeInBasisPoints)\n        );\n        payoffAmount = _loanTerms.maximumRepaymentAmount - adminFee;\n    }\n\n    /**\n     * @dev Function that performs some validation checks over loan parameters when accepting an offer\n     *\n     */\n    function _loanSanityChecksOffer(LoanData.Offer memory _offer) internal pure {\n        require(\n            _offer.maximumRepaymentAmount >= _offer.loanPrincipalAmount,\n            \"Negative interest rate loans are not allowed.\"\n        );\n    }\n}\n"
    },
    "contracts/composable/NftfiBundler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"./ERC9981155Extension.sol\";\nimport \"./ERC998ERC20Extension.sol\";\nimport \"../utils/ContractKeys.sol\";\nimport \"../interfaces/IBundleBuilder.sol\";\nimport \"../interfaces/INftfiBundler.sol\";\nimport \"../interfaces/INftfiHub.sol\";\nimport \"../interfaces/IPermittedNFTs.sol\";\nimport \"../interfaces/IPermittedERC20s.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/**\n * @title NftfiBundler\n * @author NFTfi\n * @dev ERC998 Top-Down Composable Non-Fungible Token that supports permitted ERC721, ERC1155 and ERC20 children.\n */\ncontract NftfiBundler is IBundleBuilder, ERC9981155Extension, ERC998ERC20Extension {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    INftfiHub public immutable hub;\n\n    event NewBundle(uint256 bundleId, address indexed sender, address indexed receiver);\n\n    /**\n     * @dev Stores the NftfiHub, name and symbol\n     *\n     * @param _nftfiHub Address of the NftfiHub contract\n     * @param _name name of the token contract\n     * @param _symbol symbol of the token contract\n     */\n    constructor(\n        address _nftfiHub,\n        string memory _name,\n        string memory _symbol\n    ) ERC721(_name, _symbol) {\n        hub = INftfiHub(_nftfiHub);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 _interfaceId)\n        public\n        view\n        virtual\n        override(ERC9981155Extension, ERC998ERC20Extension)\n        returns (bool)\n    {\n        return\n            _interfaceId == type(IERC721Receiver).interfaceId ||\n            _interfaceId == type(INftfiBundler).interfaceId ||\n            super.supportsInterface(_interfaceId);\n    }\n\n    /**\n     * @notice Tells if an asset is permitted or not\n     * @param _asset address of the asset\n     * @return true if permitted, false otherwise\n     */\n    function permittedAsset(address _asset) public view returns (bool) {\n        IPermittedNFTs permittedNFTs = IPermittedNFTs(hub.getContract(ContractKeys.PERMITTED_NFTS));\n        return permittedNFTs.getNFTPermit(_asset) > 0;\n    }\n\n    /**\n     * @notice Tells if the erc20 is permitted or not\n     * @param _erc20Contract address of the erc20\n     * @return true if permitted, false otherwise\n     */\n    function permittedErc20Asset(address _erc20Contract) public view returns (bool) {\n        IPermittedERC20s permittedERC20s = IPermittedERC20s(hub.getContract(ContractKeys.PERMITTED_BUNDLE_ERC20S));\n        return permittedERC20s.getERC20Permit(_erc20Contract);\n    }\n\n    /**\n     * @dev used by the loan contract to build a bundle from the BundleElements struct at the beginning of a loan,\n     * returns the id of the created bundle\n     *\n     * @param _bundleElements - the lists of erc721-20-1155 tokens that are to be bundled\n     * @param _sender sender of the tokens in the bundle - the borrower\n     * @param _receiver receiver of the created bundle, normally the loan contract\n     */\n    function buildBundle(\n        BundleElements memory _bundleElements,\n        address _sender,\n        address _receiver\n    ) external override returns (uint256) {\n        uint256 bundleId = _safeMint(_receiver);\n        require(\n            _bundleElements.erc721s.length > 0 ||\n                _bundleElements.erc20s.length > 0 ||\n                _bundleElements.erc1155s.length > 0,\n            \"bundle is empty\"\n        );\n        for (uint256 i = 0; i < _bundleElements.erc721s.length; i++) {\n            if (_bundleElements.erc721s[i].safeTransferable) {\n                IERC721(_bundleElements.erc721s[i].tokenContract).safeTransferFrom(\n                    _sender,\n                    address(this),\n                    _bundleElements.erc721s[i].id,\n                    abi.encodePacked(bundleId)\n                );\n            } else {\n                _getChild(_sender, bundleId, _bundleElements.erc721s[i].tokenContract, _bundleElements.erc721s[i].id);\n            }\n        }\n\n        for (uint256 i = 0; i < _bundleElements.erc20s.length; i++) {\n            _getERC20(_sender, bundleId, _bundleElements.erc20s[i].tokenContract, _bundleElements.erc20s[i].amount);\n        }\n\n        for (uint256 i = 0; i < _bundleElements.erc1155s.length; i++) {\n            IERC1155(_bundleElements.erc1155s[i].tokenContract).safeBatchTransferFrom(\n                _sender,\n                address(this),\n                _bundleElements.erc1155s[i].ids,\n                _bundleElements.erc1155s[i].amounts,\n                abi.encodePacked(bundleId)\n            );\n        }\n\n        emit NewBundle(bundleId, _sender, _receiver);\n        return bundleId;\n    }\n\n    /**\n     * @notice Remove all the children from the bundle\n     * @dev This method may run out of gas if the list of children is too big. In that case, children can be removed\n     *      individually.\n     * @param _tokenId the id of the bundle\n     * @param _receiver address of the receiver of the children\n     */\n    function decomposeBundle(uint256 _tokenId, address _receiver) external override nonReentrant {\n        require(ownerOf(_tokenId) == msg.sender, \"caller is not owner\");\n        _validateReceiver(_receiver);\n\n        // In each iteration all contracts children are removed, so eventually all contracts are removed\n        while (childContracts[_tokenId].length() > 0) {\n            address childContract = childContracts[_tokenId].at(0);\n\n            // In each iteration a child is removed, so eventually all contracts children are removed\n            while (childTokens[_tokenId][childContract].length() > 0) {\n                uint256 childId = childTokens[_tokenId][childContract].at(0);\n\n                uint256 balance = balances[_tokenId][childContract][childId];\n\n                if (balance > 0) {\n                    _remove1155Child(_tokenId, childContract, childId, balance);\n                    IERC1155(childContract).safeTransferFrom(address(this), _receiver, childId, balance, \"\");\n                    emit Transfer1155Child(_tokenId, _receiver, childContract, childId, balance);\n                } else {\n                    _removeChild(_tokenId, childContract, childId);\n\n                    try IERC721(childContract).safeTransferFrom(address(this), _receiver, childId) {\n                        // solhint-disable-previous-line no-empty-blocks\n                    } catch {\n                        _oldNFTsTransfer(_receiver, childContract, childId);\n                    }\n                    emit TransferChild(_tokenId, _receiver, childContract, childId);\n                }\n            }\n        }\n\n        // In each iteration all contracts children are removed, so eventually all contracts are removed\n        while (erc20ChildContracts[_tokenId].length() > 0) {\n            address erc20Contract = erc20ChildContracts[_tokenId].at(0);\n            uint256 balance = erc20Balances[_tokenId][erc20Contract];\n\n            _removeERC20(_tokenId, erc20Contract, balance);\n            IERC20(erc20Contract).safeTransfer(_receiver, balance);\n            emit TransferERC20(_tokenId, _receiver, erc20Contract, balance);\n        }\n    }\n\n    /**\n     * @dev Update the state to receive a ERC721 child\n     * Overrides the implementation to check if the asset is permitted\n     * @param _from The owner of the child token\n     * @param _tokenId The token receiving the child\n     * @param _childContract The ERC721 contract of the child token\n     * @param _childTokenId The token that is being transferred to the parent\n     */\n    function _receiveChild(\n        address _from,\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _childTokenId\n    ) internal virtual override {\n        require(permittedAsset(_childContract), \"erc721 not permitted\");\n        super._receiveChild(_from, _tokenId, _childContract, _childTokenId);\n    }\n\n    /**\n     * @dev Updates the state to receive a ERC1155 child\n     * Overrides the implementation to check if the asset is permitted\n     * @param _tokenId The token receiving the child\n     * @param _childContract The ERC1155 contract of the child token\n     * @param _childTokenId The token id that is being transferred to the parent\n     * @param _amount The amount of the token that is being transferred\n     */\n    function _receive1155Child(\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _childTokenId,\n        uint256 _amount\n    ) internal virtual override {\n        require(permittedAsset(_childContract), \"erc1155 not permitted\");\n        super._receive1155Child(_tokenId, _childContract, _childTokenId, _amount);\n    }\n\n    /**\n     * @notice Store data for the received ERC20\n     * @param _from The current owner address of the ERC20 tokens that are being transferred.\n     * @param _tokenId The token to transfer the ERC20 tokens to.\n     * @param _erc20Contract The ERC20 token contract\n     * @param _value The number of ERC20 tokens to transfer\n     */\n    function _receiveErc20Child(\n        address _from,\n        uint256 _tokenId,\n        address _erc20Contract,\n        uint256 _value\n    ) internal virtual override {\n        require(permittedErc20Asset(_erc20Contract), \"erc20 not permitted\");\n        super._receiveErc20Child(_from, _tokenId, _erc20Contract, _value);\n    }\n}\n"
    },
    "contracts/composable/ERC9981155Extension.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"./ERC998TopDown.sol\";\nimport \"../interfaces/IERC998ERC1155TopDown.sol\";\n\n/**\n * @title ERC9981155Extension\n * @author NFTfi\n * @dev ERC998TopDown extension to support ERC1155 children\n */\nabstract contract ERC9981155Extension is ERC998TopDown, IERC998ERC1155TopDown, IERC1155Receiver {\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // tokenId => (child address => (child tokenId => balance))\n    mapping(uint256 => mapping(address => mapping(uint256 => uint256))) internal balances;\n\n    /**\n     * @dev Gives child balance for a specific child contract and child id\n     * @param _childContract The ERC1155 contract of the child token\n     * @param _childTokenId The tokenId of the child token\n     */\n    function childBalance(\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _childTokenId\n    ) external view override returns (uint256) {\n        return balances[_tokenId][_childContract][_childTokenId];\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 _interfaceId)\n        public\n        view\n        virtual\n        override(ERC998TopDown, IERC165)\n        returns (bool)\n    {\n        return\n            _interfaceId == type(IERC998ERC1155TopDown).interfaceId ||\n            _interfaceId == type(IERC1155Receiver).interfaceId ||\n            super.supportsInterface(_interfaceId);\n    }\n\n    /**\n     * @notice Transfer a ERC1155 child token from top-down composable to address or other top-down composable\n     * @param _tokenId The owning token to transfer from\n     * @param _to The address that receives the child token\n     * @param _childContract The ERC1155 contract of the child token\n     * @param _childTokenId The tokenId of the token that is being transferred\n     * @param _amount The amount of the token that is being transferred\n     * @param _data Additional data with no specified format\n     */\n    function safeTransferChild(\n        uint256 _tokenId,\n        address _to,\n        address _childContract,\n        uint256 _childTokenId,\n        uint256 _amount,\n        bytes memory _data\n    ) external override nonReentrant {\n        _validateReceiver(_to);\n        _validate1155ChildTransfer(_tokenId);\n        _remove1155Child(_tokenId, _childContract, _childTokenId, _amount);\n        if (_to == address(this)) {\n            _validateAndReceive1155Child(msg.sender, _childContract, _childTokenId, _amount, _data);\n        } else {\n            IERC1155(_childContract).safeTransferFrom(address(this), _to, _childTokenId, _amount, _data);\n            emit Transfer1155Child(_tokenId, _to, _childContract, _childTokenId, _amount);\n        }\n    }\n\n    /**\n     * @notice Transfer batch of ERC1155 child token from top-down composable to address or other top-down composable\n     * @param _tokenId The owning token to transfer from\n     * @param _to The address that receives the child token\n     * @param _childContract The ERC1155 contract of the child token\n     * @param _childTokenIds The list of tokenId of the token that is being transferred\n     * @param _amounts The list of amount of the token that is being transferred\n     * @param _data Additional data with no specified format\n     */\n    function safeBatchTransferChild(\n        uint256 _tokenId,\n        address _to,\n        address _childContract,\n        uint256[] memory _childTokenIds,\n        uint256[] memory _amounts,\n        bytes memory _data\n    ) external override nonReentrant {\n        require(_childTokenIds.length == _amounts.length, \"ids and amounts length mismatch\");\n        _validateReceiver(_to);\n\n        _validate1155ChildTransfer(_tokenId);\n        for (uint256 i = 0; i < _childTokenIds.length; ++i) {\n            uint256 childTokenId = _childTokenIds[i];\n            uint256 amount = _amounts[i];\n\n            _remove1155Child(_tokenId, _childContract, childTokenId, amount);\n            if (_to == address(this)) {\n                _validateAndReceive1155Child(msg.sender, _childContract, childTokenId, amount, _data);\n            }\n        }\n\n        if (_to != address(this)) {\n            IERC1155(_childContract).safeBatchTransferFrom(address(this), _to, _childTokenIds, _amounts, _data);\n            emit Transfer1155BatchChild(_tokenId, _to, _childContract, _childTokenIds, _amounts);\n        }\n    }\n\n    /**\n     * @notice A token receives a child token\n     */\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) external virtual override returns (bytes4) {\n        revert(\"external calls restricted\");\n    }\n\n    /**\n     * @notice A token receives a batch of child tokens\n     * param The address that caused the transfer\n     * @param _from The owner of the child token\n     * @param _ids The list of token id that is being transferred to the parent\n     * @param _values The list of amounts of the tokens that is being transferred\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId\n     * @return the selector of this method\n     */\n    function onERC1155BatchReceived(\n        address,\n        address _from,\n        uint256[] memory _ids,\n        uint256[] memory _values,\n        bytes memory _data\n    ) external virtual override nonReentrant returns (bytes4) {\n        require(_data.length == 32, \"data must contain tokenId to transfer the child token to\");\n        uint256 _receiverTokenId = _parseTokenId(_data);\n\n        for (uint256 i = 0; i < _ids.length; i++) {\n            _receive1155Child(_receiverTokenId, msg.sender, _ids[i], _values[i]);\n            emit Received1155Child(_from, _receiverTokenId, msg.sender, _ids[i], _values[i]);\n        }\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev Validates the data of the child token and receives it\n     * @param _from The owner of the child token\n     * @param _childContract The ERC1155 contract of the child token\n     * @param _id The token id that is being transferred to the parent\n     * @param _amount The amount of the token that is being transferred\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId\n     */\n    function _validateAndReceive1155Child(\n        address _from,\n        address _childContract,\n        uint256 _id,\n        uint256 _amount,\n        bytes memory _data\n    ) internal virtual {\n        require(_data.length == 32, \"data must contain tokenId to transfer the child token to\");\n\n        uint256 _receiverTokenId = _parseTokenId(_data);\n        _receive1155Child(_receiverTokenId, _childContract, _id, _amount);\n        emit Received1155Child(_from, _receiverTokenId, _childContract, _id, _amount);\n    }\n\n    /**\n     * @dev Updates the state to receive a child\n     * @param _tokenId The token receiving the child\n     * @param _childContract The ERC1155 contract of the child token\n     * @param _childTokenId The token id that is being transferred to the parent\n     * @param _amount The amount of the token that is being transferred\n     */\n    function _receive1155Child(\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _childTokenId,\n        uint256 _amount\n    ) internal virtual {\n        require(_exists(_tokenId), \"bundle tokenId does not exist\");\n        uint256 childTokensLength = childTokens[_tokenId][_childContract].length();\n        if (childTokensLength == 0) {\n            childContracts[_tokenId].add(_childContract);\n        }\n        childTokens[_tokenId][_childContract].add(_childTokenId);\n        balances[_tokenId][_childContract][_childTokenId] += _amount;\n    }\n\n    /**\n     * @notice Validates the transfer of a 1155 child\n     * @param _fromTokenId The owning token to transfer from\n     */\n    function _validate1155ChildTransfer(uint256 _fromTokenId) internal virtual {\n        _validateTransferSender(_fromTokenId);\n    }\n\n    /**\n     * @notice Updates the state to remove a ERC1155 child\n     * @param _tokenId The owning token to transfer from\n     * @param _childContract The ERC1155 contract of the child token\n     * @param _childTokenId The tokenId of the token that is being transferred\n     * @param _amount The amount of the token that is being transferred\n     */\n    function _remove1155Child(\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _childTokenId,\n        uint256 _amount\n    ) internal virtual {\n        require(\n            _amount != 0 && balances[_tokenId][_childContract][_childTokenId] >= _amount,\n            \"insufficient child balance for transfer\"\n        );\n        balances[_tokenId][_childContract][_childTokenId] -= _amount;\n\n        if (balances[_tokenId][_childContract][_childTokenId] == 0) {\n            // remove child token\n            childTokens[_tokenId][_childContract].remove(_childTokenId);\n\n            // remove contract\n            if (childTokens[_tokenId][_childContract].length() == 0) {\n                childContracts[_tokenId].remove(_childContract);\n            }\n        }\n    }\n}\n"
    },
    "contracts/composable/ERC998ERC20Extension.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"./ERC998TopDown.sol\";\nimport \"../interfaces/IERC998ERC20TopDown.sol\";\nimport \"../interfaces/IERC998ERC20TopDownEnumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\n\n/**\n * @title ERC998ERC20Extension\n * @author NFTfi\n * @dev ERC998TopDown extension to support ERC20 children\n */\nabstract contract ERC998ERC20Extension is ERC998TopDown, IERC998ERC20TopDown, IERC998ERC20TopDownEnumerable {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // tokenId => ERC20 child contract\n    mapping(uint256 => EnumerableSet.AddressSet) internal erc20ChildContracts;\n\n    // tokenId => (token contract => balance)\n    mapping(uint256 => mapping(address => uint256)) internal erc20Balances;\n\n    /**\n     * @dev Look up the balance of ERC20 tokens for a specific token and ERC20 contract\n     * @param _tokenId The token that owns the ERC20 tokens\n     * @param _erc20Contract The ERC20 contract\n     * @return The number of ERC20 tokens owned by a token\n     */\n    function balanceOfERC20(uint256 _tokenId, address _erc20Contract) external view virtual override returns (uint256) {\n        return erc20Balances[_tokenId][_erc20Contract];\n    }\n\n    /**\n     * @notice Get ERC20 contract by tokenId and index\n     * @param _tokenId The parent token of ERC20 tokens\n     * @param _index The index position of the child contract\n     * @return childContract The contract found at the tokenId and index\n     */\n    function erc20ContractByIndex(uint256 _tokenId, uint256 _index) external view virtual override returns (address) {\n        return erc20ChildContracts[_tokenId].at(_index);\n    }\n\n    /**\n     * @notice Get the total number of ERC20 tokens owned by tokenId\n     * @param _tokenId The parent token of ERC20 tokens\n     * @return uint256 The total number of ERC20 tokens\n     */\n    function totalERC20Contracts(uint256 _tokenId) external view virtual override returns (uint256) {\n        return erc20ChildContracts[_tokenId].length();\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC998TopDown) returns (bool) {\n        return\n            _interfaceId == type(IERC998ERC20TopDown).interfaceId ||\n            _interfaceId == type(IERC998ERC20TopDownEnumerable).interfaceId ||\n            super.supportsInterface(_interfaceId);\n    }\n\n    /**\n     * @notice Transfer ERC20 tokens to address\n     * @param _tokenId The token to transfer from\n     * @param _to The address to send the ERC20 tokens to\n     * @param _erc20Contract The ERC20 contract\n     * @param _value The number of ERC20 tokens to transfer\n     */\n    function transferERC20(\n        uint256 _tokenId,\n        address _to,\n        address _erc20Contract,\n        uint256 _value\n    ) external virtual override {\n        _validateERC20Value(_value);\n        _validateReceiver(_to);\n        _validateERC20Transfer(_tokenId);\n        _removeERC20(_tokenId, _erc20Contract, _value);\n\n        IERC20(_erc20Contract).safeTransfer(_to, _value);\n        emit TransferERC20(_tokenId, _to, _erc20Contract, _value);\n    }\n\n    /**\n     * @notice Get ERC20 tokens from ERC20 contract.\n     * @dev This contract has to be approved first by _erc20Contract\n     */\n    function getERC20(\n        address,\n        uint256,\n        address,\n        uint256\n    ) external pure override {\n        revert(\"external calls restricted\");\n    }\n\n    /**\n     * @notice NOT SUPPORTED\n     * Intended to transfer ERC223 tokens. ERC223 tokens can be transferred as regular ERC20\n     */\n    function transferERC223(\n        uint256,\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external virtual override {\n        revert(\"TRANSFER_ERC223_NOT_SUPPORTED\");\n    }\n\n    /**\n     * @notice NOT SUPPORTED\n     * Intended to receive ERC223 tokens. ERC223 tokens can be deposited as regular ERC20\n     */\n    function tokenFallback(\n        address,\n        uint256,\n        bytes calldata\n    ) external virtual override {\n        revert(\"TOKEN_FALLBACK_ERC223_NOT_SUPPORTED\");\n    }\n\n    /**\n     * @notice Get ERC20 tokens from ERC20 contract.\n     * @dev This contract has to be approved first by _erc20Contract\n     * @param _from The current owner address of the ERC20 tokens that are being transferred.\n     * @param _tokenId The token to transfer the ERC20 tokens to.\n     * @param _erc20Contract The ERC20 token contract\n     * @param _value The number of ERC20 tokens to transfer\n     */\n    function _getERC20(\n        address _from,\n        uint256 _tokenId,\n        address _erc20Contract,\n        uint256 _value\n    ) internal {\n        _validateERC20Value(_value);\n        _receiveErc20Child(_from, _tokenId, _erc20Contract, _value);\n        IERC20(_erc20Contract).safeTransferFrom(_from, address(this), _value);\n    }\n\n    /**\n     * @notice Validates the value of a ERC20 transfer\n     * @param _value The number of ERC20 tokens to transfer\n     */\n    function _validateERC20Value(uint256 _value) internal virtual {\n        require(_value > 0, \"zero amount\");\n    }\n\n    /**\n     * @notice Validates the transfer of a ERC20\n     * @param _fromTokenId The owning token to transfer from\n     */\n    function _validateERC20Transfer(uint256 _fromTokenId) internal virtual {\n        _validateTransferSender(_fromTokenId);\n    }\n\n    /**\n     * @notice Store data for the received ERC20\n     * @param _from The current owner address of the ERC20 tokens that are being transferred.\n     * @param _tokenId The token to transfer the ERC20 tokens to.\n     * @param _erc20Contract The ERC20 token contract\n     * @param _value The number of ERC20 tokens to transfer\n     */\n    function _receiveErc20Child(\n        address _from,\n        uint256 _tokenId,\n        address _erc20Contract,\n        uint256 _value\n    ) internal virtual {\n        require(_exists(_tokenId), \"bundle tokenId does not exist\");\n        uint256 erc20Balance = erc20Balances[_tokenId][_erc20Contract];\n        if (erc20Balance == 0) {\n            erc20ChildContracts[_tokenId].add(_erc20Contract);\n        }\n        erc20Balances[_tokenId][_erc20Contract] += _value;\n        emit ReceivedERC20(_from, _tokenId, _erc20Contract, _value);\n    }\n\n    /**\n     * @notice Updates the state to remove ERC20 tokens\n     * @param _tokenId The token to transfer from\n     * @param _erc20Contract The ERC20 contract\n     * @param _value The number of ERC20 tokens to transfer\n     */\n    function _removeERC20(\n        uint256 _tokenId,\n        address _erc20Contract,\n        uint256 _value\n    ) internal virtual {\n        uint256 erc20Balance = erc20Balances[_tokenId][_erc20Contract];\n        require(erc20Balance >= _value, \"not enough token available to transfer\");\n        uint256 newERC20Balance = erc20Balance - _value;\n        erc20Balances[_tokenId][_erc20Contract] = newERC20Balance;\n        if (newERC20Balance == 0) {\n            erc20ChildContracts[_tokenId].remove(_erc20Contract);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/INftfiBundler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./IERC998ERC721TopDown.sol\";\n\ninterface INftfiBundler is IERC721 {\n    function safeMint(address _to) external returns (uint256);\n\n    function decomposeBundle(uint256 _tokenId, address _receiver) external;\n}\n"
    },
    "contracts/composable/ERC998TopDown.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../interfaces/IERC998ERC721TopDown.sol\";\nimport \"../interfaces/IERC998ERC721TopDownEnumerable.sol\";\n\n/**\n * @title ERC998TopDown\n * @author NFTfi\n * @dev ERC998ERC721 Top-Down Composable Non-Fungible Token.\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-998.md\n * This implementation does not support children to be nested bundles, erc20 nor bottom-up\n */\nabstract contract ERC998TopDown is\n    ERC721Enumerable,\n    IERC998ERC721TopDown,\n    IERC998ERC721TopDownEnumerable,\n    ReentrancyGuard\n{\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // return this.rootOwnerOf.selector ^ this.rootOwnerOfChild.selector ^\n    //   this.tokenOwnerOf.selector ^ this.ownerOfChild.selector;\n    bytes32 public constant ERC998_MAGIC_VALUE = 0xcd740db500000000000000000000000000000000000000000000000000000000;\n    bytes32 internal constant ERC998_MAGIC_MASK = 0xffffffff00000000000000000000000000000000000000000000000000000000;\n\n    uint256 public tokenCount = 0;\n\n    // tokenId => child contract\n    mapping(uint256 => EnumerableSet.AddressSet) internal childContracts;\n\n    // tokenId => (child address => array of child tokens)\n    mapping(uint256 => mapping(address => EnumerableSet.UintSet)) internal childTokens;\n\n    // child address => childId => tokenId\n    // this is used for ERC721 type tokens\n    mapping(address => mapping(uint256 => uint256)) internal childTokenOwner;\n\n    /**\n     * @notice Tells whether the ERC721 type child exists or not\n     * @param _childContract The contract address of the child token\n     * @param _childTokenId The tokenId of the child\n     * @return True if the child exists, false otherwise\n     */\n    function childExists(address _childContract, uint256 _childTokenId) external view virtual returns (bool) {\n        uint256 tokenId = childTokenOwner[_childContract][_childTokenId];\n        return tokenId != 0;\n    }\n\n    /**\n     * @notice Get the total number of child contracts with tokens that are owned by _tokenId\n     * @param _tokenId The parent token of child tokens in child contracts\n     * @return uint256 The total number of child contracts with tokens owned by _tokenId\n     */\n    function totalChildContracts(uint256 _tokenId) external view virtual override returns (uint256) {\n        return childContracts[_tokenId].length();\n    }\n\n    /**\n     * @notice Get child contract by tokenId and index\n     * @param _tokenId The parent token of child tokens in child contract\n     * @param _index The index position of the child contract\n     * @return childContract The contract found at the _tokenId and index\n     */\n    function childContractByIndex(uint256 _tokenId, uint256 _index)\n        external\n        view\n        virtual\n        override\n        returns (address childContract)\n    {\n        return childContracts[_tokenId].at(_index);\n    }\n\n    /**\n     * @notice Get the total number of child tokens owned by tokenId that exist in a child contract\n     * @param _tokenId The parent token of child tokens\n     * @param _childContract The child contract containing the child tokens\n     * @return uint256 The total number of child tokens found in child contract that are owned by _tokenId\n     */\n    function totalChildTokens(uint256 _tokenId, address _childContract) external view override returns (uint256) {\n        return childTokens[_tokenId][_childContract].length();\n    }\n\n    /**\n     * @notice Get child token owned by _tokenId, in child contract, at index position\n     * @param _tokenId The parent token of the child token\n     * @param _childContract The child contract of the child token\n     * @param _index The index position of the child token\n     * @return childTokenId The child tokenId for the parent token, child token and index\n     */\n    function childTokenByIndex(\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _index\n    ) external view virtual override returns (uint256 childTokenId) {\n        return childTokens[_tokenId][_childContract].at(_index);\n    }\n\n    /**\n     * @notice Get the parent tokenId and its owner of a ERC721 child token\n     * @param _childContract The contract address of the child token\n     * @param _childTokenId The tokenId of the child\n     * @return parentTokenOwner The parent address of the parent token and ERC998 magic value\n     * @return parentTokenId The parent tokenId of _childTokenId\n     */\n    function ownerOfChild(address _childContract, uint256 _childTokenId)\n        external\n        view\n        virtual\n        override\n        returns (bytes32 parentTokenOwner, uint256 parentTokenId)\n    {\n        parentTokenId = childTokenOwner[_childContract][_childTokenId];\n        require(parentTokenId != 0, \"owner of child not found\");\n        address parentTokenOwnerAddress = ownerOf(parentTokenId);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            parentTokenOwner := or(ERC998_MAGIC_VALUE, parentTokenOwnerAddress)\n        }\n    }\n\n    /**\n     * @notice Get the root owner of tokenId\n     * @param _tokenId The token to query for a root owner address\n     * @return rootOwner The root owner at the top of tree of tokens and ERC998 magic value.\n     */\n    function rootOwnerOf(uint256 _tokenId) public view virtual override returns (bytes32 rootOwner) {\n        return rootOwnerOfChild(address(0), _tokenId);\n    }\n\n    /**\n     * @notice Get the root owner of a child token\n     * @dev Returns the owner at the top of the tree of composables\n     * Use Cases handled:\n     * - Case 1: Token owner is this contract and token.\n     * - Case 2: Token owner is other external top-down composable\n     * - Case 3: Token owner is other contract\n     * - Case 4: Token owner is user\n     * @param _childContract The contract address of the child token\n     * @param _childTokenId The tokenId of the child\n     * @return rootOwner The root owner at the top of tree of tokens and ERC998 magic value\n     */\n    function rootOwnerOfChild(address _childContract, uint256 _childTokenId)\n        public\n        view\n        virtual\n        override\n        returns (bytes32 rootOwner)\n    {\n        address rootOwnerAddress;\n        if (_childContract != address(0)) {\n            (rootOwnerAddress, _childTokenId) = _ownerOfChild(_childContract, _childTokenId);\n        } else {\n            rootOwnerAddress = ownerOf(_childTokenId);\n        }\n\n        if (rootOwnerAddress.isContract()) {\n            try IERC998ERC721TopDown(rootOwnerAddress).rootOwnerOfChild(address(this), _childTokenId) returns (\n                bytes32 returnedRootOwner\n            ) {\n                // Case 2: Token owner is other external top-down composable\n                if (returnedRootOwner & ERC998_MAGIC_MASK == ERC998_MAGIC_VALUE) {\n                    return returnedRootOwner;\n                }\n            } catch {\n                // solhint-disable-previous-line no-empty-blocks\n            }\n        }\n\n        // Case 3: Token owner is other contract\n        // Or\n        // Case 4: Token owner is user\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            rootOwner := or(ERC998_MAGIC_VALUE, rootOwnerAddress)\n        }\n        return rootOwner;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     * The interface id 0x1efdf36a is added. The spec claims it to be the interface id of IERC998ERC721TopDown.\n     * But it is not.\n     * It is added anyway in case some contract checks it being compliant with the spec.\n     */\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC721Enumerable) returns (bool) {\n        return\n            _interfaceId == type(IERC998ERC721TopDown).interfaceId ||\n            _interfaceId == type(IERC998ERC721TopDownEnumerable).interfaceId ||\n            _interfaceId == 0x1efdf36a ||\n            super.supportsInterface(_interfaceId);\n    }\n\n    /**\n     * @notice Mints a new bundle\n     * @param _to The address that owns the new bundle\n     * @return The id of the new bundle\n     */\n    function _safeMint(address _to) internal returns (uint256) {\n        uint256 id = ++tokenCount;\n        _safeMint(_to, id);\n\n        return id;\n    }\n\n    /**\n     * @notice Transfer child token from top-down composable to address\n     * @param _fromTokenId The owning token to transfer from\n     * @param _to The address that receives the child token\n     * @param _childContract The ERC721 contract of the child token\n     * @param _childTokenId The tokenId of the token that is being transferred\n     */\n    function safeTransferChild(\n        uint256 _fromTokenId,\n        address _to,\n        address _childContract,\n        uint256 _childTokenId\n    ) external virtual override nonReentrant {\n        _transferChild(_fromTokenId, _to, _childContract, _childTokenId);\n        IERC721(_childContract).safeTransferFrom(address(this), _to, _childTokenId);\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\n    }\n\n    /**\n     * @notice Transfer child token from top-down composable to address or other top-down composable\n     * @param _fromTokenId The owning token to transfer from\n     * @param _to The address that receives the child token\n     * @param _childContract The ERC721 contract of the child token\n     * @param _childTokenId The tokenId of the token that is being transferred\n     * @param _data Additional data with no specified format\n     */\n    function safeTransferChild(\n        uint256 _fromTokenId,\n        address _to,\n        address _childContract,\n        uint256 _childTokenId,\n        bytes memory _data\n    ) external virtual override nonReentrant {\n        _transferChild(_fromTokenId, _to, _childContract, _childTokenId);\n        if (_to == address(this)) {\n            _validateAndReceiveChild(msg.sender, _childContract, _childTokenId, _data);\n        } else {\n            IERC721(_childContract).safeTransferFrom(address(this), _to, _childTokenId, _data);\n            emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\n        }\n    }\n\n    /**\n     * @dev Transfer child token from top-down composable to address\n     * @param _fromTokenId The owning token to transfer from\n     * @param _to The address that receives the child token\n     * @param _childContract The ERC721 contract of the child token\n     * @param _childTokenId The tokenId of the token that is being transferred\n     */\n    function transferChild(\n        uint256 _fromTokenId,\n        address _to,\n        address _childContract,\n        uint256 _childTokenId\n    ) external virtual override nonReentrant {\n        _transferChild(_fromTokenId, _to, _childContract, _childTokenId);\n        _oldNFTsTransfer(_to, _childContract, _childTokenId);\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\n    }\n\n    /**\n     * @notice NOT SUPPORTED\n     * Intended to transfer bottom-up composable child token from top-down composable to other ERC721 token.\n     */\n    function transferChildToParent(\n        uint256,\n        address,\n        uint256,\n        address,\n        uint256,\n        bytes memory\n    ) external pure override {\n        revert(\"BOTTOM_UP_CHILD_NOT_SUPPORTED\");\n    }\n\n    /**\n     * @notice Transfer a child token from an ERC721 contract to a composable. Used for old tokens that does not\n     * have a safeTransferFrom method like cryptokitties\n     */\n    function getChild(\n        address,\n        uint256,\n        address,\n        uint256\n    ) external pure override {\n        revert(\"external calls restricted\");\n    }\n\n    /**\n     * @notice Transfer a child token from an ERC721 contract to a composable. Used for old tokens that does not\n     * have a safeTransferFrom method like cryptokitties\n     * @dev This contract has to be approved first in _childContract\n     * @param _from The address that owns the child token.\n     * @param _tokenId The token that becomes the parent owner\n     * @param _childContract The ERC721 contract of the child token\n     * @param _childTokenId The tokenId of the child token\n     */\n    function _getChild(\n        address _from,\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _childTokenId\n    ) internal virtual nonReentrant {\n        _receiveChild(_from, _tokenId, _childContract, _childTokenId);\n        IERC721(_childContract).transferFrom(_from, address(this), _childTokenId);\n    }\n\n    /**\n     * @notice A token receives a child token\n     * param The address that caused the transfer\n     * @param _from The owner of the child token\n     * @param _childTokenId The token that is being transferred to the parent\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId\n     * @return the selector of this method\n     */\n    function onERC721Received(\n        address,\n        address _from,\n        uint256 _childTokenId,\n        bytes calldata _data\n    ) external virtual override nonReentrant returns (bytes4) {\n        _validateAndReceiveChild(_from, msg.sender, _childTokenId, _data);\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev ERC721 implementation hook that is called before any token transfer. Prevents nested bundles\n     * @param _from address of the current owner of the token\n     * @param _to destination address\n     * @param _tokenId id of the token to transfer\n     */\n    function _beforeTokenTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) internal virtual override {\n        require(_to != address(this), \"nested bundles not allowed\");\n        super._beforeTokenTransfer(_from, _to, _tokenId);\n    }\n\n    /**\n     * @dev Validates the child transfer parameters and remove the child from the bundle\n     * @param _fromTokenId The owning token to transfer from\n     * @param _to The address that receives the child token\n     * @param _childContract The ERC721 contract of the child token\n     * @param _childTokenId The tokenId of the token that is being transferred\n     */\n    function _transferChild(\n        uint256 _fromTokenId,\n        address _to,\n        address _childContract,\n        uint256 _childTokenId\n    ) internal virtual {\n        _validateReceiver(_to);\n        _validateChildTransfer(_fromTokenId, _childContract, _childTokenId);\n        _removeChild(_fromTokenId, _childContract, _childTokenId);\n    }\n\n    /**\n     * @dev Validates the child transfer parameters\n     * @param _fromTokenId The owning token to transfer from\n     * @param _childContract The ERC721 contract of the child token\n     * @param _childTokenId The tokenId of the token that is being transferred\n     */\n    function _validateChildTransfer(\n        uint256 _fromTokenId,\n        address _childContract,\n        uint256 _childTokenId\n    ) internal virtual {\n        uint256 tokenId = childTokenOwner[_childContract][_childTokenId];\n        require(tokenId != 0, \"_transferChild _childContract _childTokenId not found\");\n        require(tokenId == _fromTokenId, \"ComposableTopDown: _transferChild wrong tokenId found\");\n        _validateTransferSender(tokenId);\n    }\n\n    /**\n     * @dev Validates the receiver of a child transfer\n     * @param _to The address that receives the child token\n     */\n    function _validateReceiver(address _to) internal virtual {\n        require(_to != address(0), \"child transfer to zero address\");\n    }\n\n    /**\n     * @dev Updates the state to remove a child\n     * @param _tokenId The owning token to transfer from\n     * @param _childContract The ERC721 contract of the child token\n     * @param _childTokenId The tokenId of the token that is being transferred\n     */\n    function _removeChild(\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _childTokenId\n    ) internal virtual {\n        // remove child token\n        childTokens[_tokenId][_childContract].remove(_childTokenId);\n        delete childTokenOwner[_childContract][_childTokenId];\n\n        // remove contract\n        if (childTokens[_tokenId][_childContract].length() == 0) {\n            childContracts[_tokenId].remove(_childContract);\n        }\n    }\n\n    /**\n     * @dev Validates the data from a child transfer and receives it\n     * @param _from The owner of the child token\n     * @param _childContract The ERC721 contract of the child token\n     * @param _childTokenId The token that is being transferred to the parent\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId\n     */\n    function _validateAndReceiveChild(\n        address _from,\n        address _childContract,\n        uint256 _childTokenId,\n        bytes memory _data\n    ) internal virtual {\n        require(_data.length > 0, \"data must contain tokenId to transfer the child token to\");\n        // convert up to 32 bytes of _data to uint256, owner nft tokenId passed as uint in bytes\n        uint256 tokenId = _parseTokenId(_data);\n        _receiveChild(_from, tokenId, _childContract, _childTokenId);\n    }\n\n    /**\n     * @dev Update the state to receive a child\n     * @param _from The owner of the child token\n     * @param _tokenId The token receiving the child\n     * @param _childContract The ERC721 contract of the child token\n     * @param _childTokenId The token that is being transferred to the parent\n     */\n    function _receiveChild(\n        address _from,\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _childTokenId\n    ) internal virtual {\n        require(_exists(_tokenId), \"bundle tokenId does not exist\");\n        uint256 childTokensLength = childTokens[_tokenId][_childContract].length();\n        if (childTokensLength == 0) {\n            childContracts[_tokenId].add(_childContract);\n        }\n        childTokens[_tokenId][_childContract].add(_childTokenId);\n        childTokenOwner[_childContract][_childTokenId] = _tokenId;\n        emit ReceivedChild(_from, _tokenId, _childContract, _childTokenId);\n    }\n\n    /**\n     * @dev Returns the owner of a child\n     * @param _childContract The contract address of the child token\n     * @param _childTokenId The tokenId of the child\n     * @return parentTokenOwner The parent address of the parent token and ERC998 magic value\n     * @return parentTokenId The parent tokenId of _childTokenId\n     */\n    function _ownerOfChild(address _childContract, uint256 _childTokenId)\n        internal\n        view\n        virtual\n        returns (address parentTokenOwner, uint256 parentTokenId)\n    {\n        parentTokenId = childTokenOwner[_childContract][_childTokenId];\n        require(parentTokenId != 0, \"owner of child not found\");\n        return (ownerOf(parentTokenId), parentTokenId);\n    }\n\n    /**\n     * @dev Convert up to 32 bytes of_data to uint256, owner nft tokenId passed as uint in bytes\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId\n     * @return tokenId the token Id encoded in the data\n     */\n    function _parseTokenId(bytes memory _data) internal pure virtual returns (uint256 tokenId) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            tokenId := mload(add(_data, 0x20))\n        }\n    }\n\n    /**\n     * @dev Transfers the NFT using method compatible with old token contracts\n     * @param _to address of the receiver of the children\n     * @param _childContract The contract address of the child token\n     * @param _childTokenId The tokenId of the child\n     */\n    function _oldNFTsTransfer(\n        address _to,\n        address _childContract,\n        uint256 _childTokenId\n    ) internal {\n        // This is here to be compatible with cryptokitties and other old contracts that require being owner and\n        // approved before transferring.\n        // Does not work with current standard which does not allow approving self, so we must let it fail in that case.\n        try IERC721(_childContract).approve(address(this), _childTokenId) {\n            // solhint-disable-previous-line no-empty-blocks\n        } catch {\n            // solhint-disable-previous-line no-empty-blocks\n        }\n\n        IERC721(_childContract).transferFrom(address(this), _to, _childTokenId);\n    }\n\n    /**\n     * @notice Validates that the sender is authorized to perform a child transfer\n     * @param _fromTokenId The owning token to transfer from\n     */\n    function _validateTransferSender(uint256 _fromTokenId) internal virtual {\n        address rootOwner = address(uint160(uint256(rootOwnerOf(_fromTokenId))));\n        require(\n            rootOwner == msg.sender ||\n                getApproved(_fromTokenId) == msg.sender ||\n                isApprovedForAll(rootOwner, msg.sender),\n            \"transferChild msg.sender not eligible\"\n        );\n    }\n}\n"
    },
    "contracts/interfaces/IERC998ERC1155TopDown.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\ninterface IERC998ERC1155TopDown {\n    event Received1155Child(\n        address indexed from,\n        uint256 indexed toTokenId,\n        address indexed childContract,\n        uint256 childTokenId,\n        uint256 amount\n    );\n    event Transfer1155Child(\n        uint256 indexed fromTokenId,\n        address indexed to,\n        address indexed childContract,\n        uint256 childTokenId,\n        uint256 amount\n    );\n    event Transfer1155BatchChild(\n        uint256 indexed fromTokenId,\n        address indexed to,\n        address indexed childContract,\n        uint256[] childTokenIds,\n        uint256[] amounts\n    );\n\n    function safeTransferChild(\n        uint256 fromTokenId,\n        address to,\n        address childContract,\n        uint256 childTokenId,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    function safeBatchTransferChild(\n        uint256 fromTokenId,\n        address to,\n        address childContract,\n        uint256[] calldata childTokenIds,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n\n    function childBalance(\n        uint256 tokenId,\n        address childContract,\n        uint256 childTokenId\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IERC998ERC721TopDown.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\ninterface IERC998ERC721TopDown {\n    event ReceivedChild(\n        address indexed _from,\n        uint256 indexed _tokenId,\n        address indexed _childContract,\n        uint256 _childTokenId\n    );\n    event TransferChild(\n        uint256 indexed tokenId,\n        address indexed _to,\n        address indexed _childContract,\n        uint256 _childTokenId\n    );\n\n    function onERC721Received(\n        address _operator,\n        address _from,\n        uint256 _childTokenId,\n        bytes calldata _data\n    ) external returns (bytes4);\n\n    function transferChild(\n        uint256 _fromTokenId,\n        address _to,\n        address _childContract,\n        uint256 _childTokenId\n    ) external;\n\n    function safeTransferChild(\n        uint256 _fromTokenId,\n        address _to,\n        address _childContract,\n        uint256 _childTokenId\n    ) external;\n\n    function safeTransferChild(\n        uint256 _fromTokenId,\n        address _to,\n        address _childContract,\n        uint256 _childTokenId,\n        bytes memory _data\n    ) external;\n\n    function transferChildToParent(\n        uint256 _fromTokenId,\n        address _toContract,\n        uint256 _toTokenId,\n        address _childContract,\n        uint256 _childTokenId,\n        bytes memory _data\n    ) external;\n\n    // getChild function enables older contracts like cryptokitties to be transferred into a composable\n    // The _childContract must approve this contract. Then getChild can be called.\n    function getChild(\n        address _from,\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _childTokenId\n    ) external;\n\n    function rootOwnerOf(uint256 _tokenId) external view returns (bytes32 rootOwner);\n\n    function rootOwnerOfChild(address _childContract, uint256 _childTokenId) external view returns (bytes32 rootOwner);\n\n    function ownerOfChild(address _childContract, uint256 _childTokenId)\n        external\n        view\n        returns (bytes32 parentTokenOwner, uint256 parentTokenId);\n}\n"
    },
    "contracts/interfaces/IERC998ERC721TopDownEnumerable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\ninterface IERC998ERC721TopDownEnumerable {\n    function totalChildContracts(uint256 _tokenId) external view returns (uint256);\n\n    function childContractByIndex(uint256 _tokenId, uint256 _index) external view returns (address childContract);\n\n    function totalChildTokens(uint256 _tokenId, address _childContract) external view returns (uint256);\n\n    function childTokenByIndex(\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _index\n    ) external view returns (uint256 childTokenId);\n}\n"
    },
    "contracts/interfaces/IERC998ERC20TopDown.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\ninterface IERC998ERC20TopDown {\n    event ReceivedERC20(\n        address indexed _from,\n        uint256 indexed _tokenId,\n        address indexed _erc20Contract,\n        uint256 _value\n    );\n    event TransferERC20(uint256 indexed _tokenId, address indexed _to, address indexed _erc20Contract, uint256 _value);\n\n    function balanceOfERC20(uint256 _tokenId, address __erc20Contract) external view returns (uint256);\n\n    function tokenFallback(\n        address _from,\n        uint256 _value,\n        bytes calldata _data\n    ) external;\n\n    function transferERC20(\n        uint256 _tokenId,\n        address _to,\n        address _erc20Contract,\n        uint256 _value\n    ) external;\n\n    function transferERC223(\n        uint256 _tokenId,\n        address _to,\n        address _erc223Contract,\n        uint256 _value,\n        bytes calldata _data\n    ) external;\n\n    function getERC20(\n        address _from,\n        uint256 _tokenId,\n        address _erc20Contract,\n        uint256 _value\n    ) external;\n}\n"
    },
    "contracts/interfaces/IERC998ERC20TopDownEnumerable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\ninterface IERC998ERC20TopDownEnumerable {\n    function totalERC20Contracts(uint256 _tokenId) external view returns (uint256);\n\n    function erc20ContractByIndex(uint256 _tokenId, uint256 _index) external view returns (address);\n}\n"
    },
    "contracts/test/TestERC721.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract TestERC721 is ERC721 {\n    constructor() ERC721(\"TestERC721\", \"T721\") {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function mint(address _to, uint256 _tokenId) public {\n        _safeMint(_to, _tokenId);\n    }\n\n    function mintToSender(uint256 _tokenId) public {\n        _safeMint(msg.sender, _tokenId);\n    }\n}\n"
    },
    "contracts/test/TestAirdropSnapshot.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ncontract TestAirdropSnapshot is ERC721 {\n    address public snapshotedOwner;\n\n    constructor() ERC721(\"\", \"\") {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function snapshotCurrentOwner(address tokenContract, uint256 tokenId) external {\n        snapshotedOwner = IERC721(tokenContract).ownerOf(tokenId);\n    }\n\n    // 0x57e4be9a\n    function allowedMint(uint256 tokenId) external {\n        _safeMint(snapshotedOwner, tokenId);\n    }\n}\n"
    },
    "contracts/test/TestAirdrop.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract TestAirdrop is ERC721 {\n    constructor() ERC721(\"\", \"\") {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    // 0x57e4be9a\n    function allowedMint(uint256 tokenId) external {\n        _safeMint(msg.sender, tokenId);\n    }\n\n    // 0x80d2f826\n    function notAllowedMint(uint256 tokenId) external {\n        _safeMint(msg.sender, tokenId);\n    }\n\n    function mint(address _to, uint256 _tokenId) public {\n        _safeMint(_to, _tokenId);\n    }\n}\n"
    },
    "contracts/test/TestAirdropSender.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"./TestAirdrop.sol\";\n\ncontract TestAirdropSender {\n    TestAirdrop public airdrop;\n\n    constructor(address _airdrop) {\n        airdrop = TestAirdrop(_airdrop);\n    }\n\n    function doAirdrop(uint256 tokenId) external {\n        airdrop.mint(msg.sender, tokenId);\n    }\n}\n"
    },
    "contracts/smartNft/SmartNft.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"../utils/ContractKeys.sol\";\nimport \"../interfaces/INftfiHub.sol\";\n\n/**\n * @title SmartNft\n * @author NFTfi\n * @dev An ERC721 token which represents a very basic implementation of the NFTfi V2 SmartNFT.\n */\ncontract SmartNft is ERC721, AccessControl {\n    using Address for address;\n    using Strings for uint256;\n\n    /**\n     * @dev This struct contains data needed to find the loan linked to a SmartNft.\n     */\n    struct Loan {\n        address loanCoordinator;\n        uint256 loanId;\n    }\n\n    /* ******* */\n    /* STORAGE */\n    /* ******* */\n\n    bytes32 public constant LOAN_COORDINATOR_ROLE = keccak256(\"LOAN_COORDINATOR_ROLE\");\n    bytes32 public constant BASE_URI_ROLE = keccak256(\"BASE_URI_ROLE\");\n\n    INftfiHub public immutable hub;\n\n    // smartNftId => Loan\n    mapping(uint256 => Loan) public loans;\n\n    string public baseURI;\n\n    /**\n     * @dev Grants the contract the default admin role to `_admin`.\n     * Grants LOAN_COORDINATOR_ROLE to `_loanCoordinator`.\n     *\n     * @param _admin - Account to set as the admin of roles\n     * @param _nftfiHub - Address of the NftfiHub contract\n     * @param _loanCoordinator - Initial loan coordinator\n     * @param _name - Name for the SmarNFT\n     * @param _symbol - Symbol for the SmarNFT\n     * @param _customBaseURI - Base URI for the SmarNFT\n     */\n    constructor(\n        address _admin,\n        address _nftfiHub,\n        address _loanCoordinator,\n        string memory _name,\n        string memory _symbol,\n        string memory _customBaseURI\n    ) ERC721(_name, _symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\n        _setupRole(BASE_URI_ROLE, _admin);\n        _setupRole(LOAN_COORDINATOR_ROLE, _loanCoordinator);\n        _setBaseURI(_customBaseURI);\n        hub = INftfiHub(_nftfiHub);\n    }\n\n    /**\n     * @dev Grants LOAN_COORDINATOR_ROLE to `_account`.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function setLoanCoordinator(address _account) external {\n        grantRole(LOAN_COORDINATOR_ROLE, _account);\n    }\n\n    /**\n     * @dev Mints a new token with `_tokenId` and assigne to `_to`.\n     *\n     * Requirements:\n     *\n     * - the caller must have `LOAN_COORDINATOR_ROLE` role.\n     *\n     * @param _to The address reciving the SmartNft\n     * @param _tokenId The id of the new SmartNft\n     * @param _data Up to the first 32 bytes contains an integer which represents the loanId linked to the SmartNft\n     */\n    function mint(\n        address _to,\n        uint256 _tokenId,\n        bytes calldata _data\n    ) external onlyRole(LOAN_COORDINATOR_ROLE) {\n        require(_data.length > 0, \"data must contain loanId\");\n        uint256 loanId = abi.decode(_data, (uint256));\n        loans[_tokenId] = Loan({loanCoordinator: msg.sender, loanId: loanId});\n        _safeMint(_to, _tokenId, _data);\n    }\n\n    /**\n     * @dev Burns `_tokenId` token.\n     *\n     * Requirements:\n     *\n     * - the caller must have `LOAN_COORDINATOR_ROLE` role.\n     */\n    function burn(uint256 _tokenId) external onlyRole(LOAN_COORDINATOR_ROLE) {\n        delete loans[_tokenId];\n        _burn(_tokenId);\n    }\n\n    /**\n     * @dev Sets baseURI.\n     * @param _customBaseURI - Base URI for the SmarNFT\n     */\n    function setBaseURI(string memory _customBaseURI) external onlyRole(BASE_URI_ROLE) {\n        _setBaseURI(_customBaseURI);\n    }\n\n    function exists(uint256 _tokenId) external view returns (bool) {\n        return _exists(_tokenId);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC721, AccessControl) returns (bool) {\n        return super.supportsInterface(_interfaceId);\n    }\n\n    /**\n     * @dev Sets baseURI.\n     */\n    function _setBaseURI(string memory _customBaseURI) internal virtual {\n        baseURI = bytes(_customBaseURI).length > 0\n            ? string(abi.encodePacked(_customBaseURI, _getChainID().toString(), \"/\"))\n            : \"\";\n    }\n\n    /** @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`.\n     */\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseURI;\n    }\n\n    /**\n     * @dev This function gets the current chain ID.\n     */\n    function _getChainID() internal view returns (uint256) {\n        uint256 id;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n}\n"
    },
    "contracts/loans/direct/DirectLoanCoordinator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"../../smartNft/SmartNft.sol\";\nimport \"../../interfaces/IDirectLoanCoordinator.sol\";\nimport \"../../interfaces/INftfiHub.sol\";\nimport \"../../utils/Ownable.sol\";\nimport \"../../utils/ContractKeys.sol\";\n\n/**\n * @title  DirectLoanCoordinator\n * @author NFTfi\n * @notice This contract is in charge of coordinating the creation, disctubution and desctruction of the SmartNfts\n * related to a loan, the Promossory Note and Obligaiton Receipt.\n */\ncontract DirectLoanCoordinator is IDirectLoanCoordinator, Ownable {\n    /* ******* */\n    /* STORAGE */\n    /* ******* */\n\n    INftfiHub public immutable hub;\n\n    /**\n     * @dev For each loan type, records the address of the contract that implements the type\n     */\n    mapping(bytes32 => address) private typeContracts;\n    /**\n     * @dev reverse mapping of loanTypes - for each contract address, records the associated loan type\n     */\n    mapping(address => bytes32) private contractTypes;\n\n    /**\n     * @notice A continuously increasing counter that simultaneously allows every loan to have a unique ID and provides\n     * a running count of how many loans have been started by this contract.\n     */\n    uint32 public totalNumLoans = 0;\n\n    // The address that deployed this contract\n    address private immutable _deployer;\n    bool private _initialized = false;\n\n    mapping(uint32 => Loan) private loans;\n\n    address public override promissoryNoteToken;\n    address public override obligationReceiptToken;\n\n    /* ****** */\n    /* EVENTS */\n    /* ****** */\n\n    event UpdateStatus(\n        uint32 indexed loanId,\n        uint64 indexed smartNftId,\n        address indexed loanContract,\n        StatusType newStatus\n    );\n\n    /**\n     * @notice This event is fired whenever the admins register a loan type.\n     *\n     * @param loanType - Loan type represented by keccak256('loan type').\n     * @param loanContract - Address of the loan type contract.\n     */\n    event TypeUpdated(bytes32 indexed loanType, address indexed loanContract);\n\n    /**\n     * @dev Function using this modifier can only be executed after this contract is initialized\n     *\n     */\n    modifier onlyInitialized() {\n        require(_initialized, \"not initialized\");\n\n        _;\n    }\n\n    /* *********** */\n    /* CONSTRUCTOR */\n    /* *********** */\n\n    /**\n     * @notice Sets the admin of the contract.\n     * Initializes `contractTypes` with a batch of loan types. Sets `NftfiHub`.\n     *\n     * @param  _nftfiHub - Address of the NftfiHub contract\n     * @param _admin - Initial admin of this contract.\n     * @param _loanTypes - Loan types represented by keccak256('loan type').\n     * @param _loanContracts - The addresses of each wrapper contract that implements the loan type's behaviour.\n     */\n    constructor(\n        address _nftfiHub,\n        address _admin,\n        string[] memory _loanTypes,\n        address[] memory _loanContracts\n    ) Ownable(_admin) {\n        hub = INftfiHub(_nftfiHub);\n        _deployer = msg.sender;\n        _registerLoanTypes(_loanTypes, _loanContracts);\n    }\n\n    /**\n     * @dev Sets `promissoryNoteToken` and `obligationReceiptToken`.\n     * It can be executed once by the deployer.\n     *\n     * @param  _promissoryNoteToken - Promissory Note Token address\n     * @param  _obligationReceiptToken - Obligaiton Recipt Token address\n     */\n    function initialize(address _promissoryNoteToken, address _obligationReceiptToken) external {\n        require(msg.sender == _deployer, \"only deployer\");\n        require(!_initialized, \"already initialized\");\n        require(_promissoryNoteToken != address(0), \"promissoryNoteToken is zero\");\n        require(_obligationReceiptToken != address(0), \"obligationReceiptToken is zero\");\n\n        _initialized = true;\n        promissoryNoteToken = _promissoryNoteToken;\n        obligationReceiptToken = _obligationReceiptToken;\n    }\n\n    /**\n     * @dev This is called by the LoanType beginning the new loan.\n     * It initialize the new loan data, mints both PromissoryNote and ObligationReceipt SmartNft's and returns the\n     * new loan id.\n     *\n     * @param _lender - Address of the lender\n     * @param _loanType - The type of the loan\n     */\n    function registerLoan(address _lender, bytes32 _loanType) external override onlyInitialized returns (uint32) {\n        address loanContract = msg.sender;\n\n        require(getContractFromType(_loanType) == loanContract, \"Caller must be registered for loan type\");\n\n        // (loanIds start at 1)\n        totalNumLoans += 1;\n\n        uint64 smartNftId = uint64(uint256(keccak256(abi.encodePacked(address(this), totalNumLoans))));\n\n        Loan memory newLoan = Loan({status: StatusType.NEW, loanContract: loanContract, smartNftId: smartNftId});\n\n        // Issue an ERC721 promissory note to the lender that gives them the\n        // right to either the principal-plus-interest or the collateral.\n        SmartNft(promissoryNoteToken).mint(_lender, smartNftId, abi.encode(totalNumLoans));\n\n        loans[totalNumLoans] = newLoan;\n\n        emit UpdateStatus(totalNumLoans, smartNftId, loanContract, StatusType.NEW);\n\n        return totalNumLoans;\n    }\n\n    function mintObligationReceipt(uint32 _loanId, address _borrower) external override onlyInitialized {\n        address loanContract = msg.sender;\n\n        require(getTypeFromContract(loanContract) != bytes32(0), \"Caller must a be registered loan type\");\n\n        uint64 smartNftId = loans[_loanId].smartNftId;\n        // nedded?\n        require(smartNftId != 0, \"loan doesn't exist\");\n        // nedded?\n        require(SmartNft(promissoryNoteToken).exists(smartNftId), \"Promissory note should exist\");\n        // nedded?\n        require(!SmartNft(obligationReceiptToken).exists(smartNftId), \"Obligation r shouldn't exist\");\n\n        // Issue an ERC721 obligation receipt to the borrower that gives them the\n        // right to pay back the loan and get the collateral back.\n        SmartNft(obligationReceiptToken).mint(_borrower, smartNftId, abi.encode(_loanId));\n    }\n\n    /**\n     * @dev This is called by the LoanType who created the loan, when a loan is resolved whether by paying back or\n     * liquidating the loan.\n     * It sets the loan as `RESOLVED` and burns both PromossoryNote and ObligationReceipt SmartNft's.\n     *\n     * @param _loanId - Id of the loan\n     */\n    function resolveLoan(uint32 _loanId) external override onlyInitialized {\n        Loan storage loan = loans[_loanId];\n        require(loan.status == StatusType.NEW, \"Loan status must be New\");\n        require(loan.loanContract == msg.sender, \"Not the same Contract that registered Loan\");\n\n        loan.status = StatusType.RESOLVED;\n\n        SmartNft(promissoryNoteToken).burn(loan.smartNftId);\n        if (SmartNft(obligationReceiptToken).exists(loan.smartNftId)) {\n            SmartNft(obligationReceiptToken).burn(loan.smartNftId);\n        }\n\n        emit UpdateStatus(_loanId, loan.smartNftId, msg.sender, StatusType.RESOLVED);\n    }\n\n    /**\n     * @dev Returns loan's data for a given id.\n     *\n     * @param _loanId - Id of the loan\n     */\n    function getLoanData(uint32 _loanId) external view override returns (Loan memory) {\n        return loans[_loanId];\n    }\n\n    /**\n     * @dev checks if the given id is valid for the given loan contract address\n     * @param _loanId - Id of the loan\n     * @param _loanContract - address og the loan contract\n     */\n    function isValidLoanId(uint32 _loanId, address _loanContract) external view override returns (bool validity) {\n        validity = loans[_loanId].loanContract == _loanContract;\n    }\n\n    /**\n     * @notice  Set or update the contract address that implements the given Loan Type.\n     * Set address(0) for a loan type for un-register such type.\n     *\n     * @param _loanType - Loan type represented by 'loan type'.\n     * @param _loanContract - The address of the wrapper contract that implements the loan type's behaviour.\n     */\n    function registerLoanType(string memory _loanType, address _loanContract) external onlyOwner {\n        _registerLoanType(_loanType, _loanContract);\n    }\n\n    /**\n     * @notice  Batch set or update the contract addresses that implement the given batch Loan Type.\n     * Set address(0) for a loan type for un-register such type.\n     *\n     * @param _loanTypes - Loan types represented by 'loan type'.\n     * @param _loanContracts - The addresses of each wrapper contract that implements the loan type's behaviour.\n     */\n    function registerLoanTypes(string[] memory _loanTypes, address[] memory _loanContracts) external onlyOwner {\n        _registerLoanTypes(_loanTypes, _loanContracts);\n    }\n\n    /**\n     * @notice This function can be called by anyone to get the contract address that implements the given loan type.\n     *\n     * @param  _loanType - The loan type, e.g. bytes32(\"DIRECT_LOAN_FIXED\"), or bytes32(\"DIRECT_LOAN_PRO_RATED\").\n     */\n    function getContractFromType(bytes32 _loanType) public view returns (address) {\n        return typeContracts[_loanType];\n    }\n\n    /**\n     * @notice This function can be called by anyone to get the loan type of the given contract address.\n     *\n     * @param  _loanContract - The loan contract\n     */\n    function getTypeFromContract(address _loanContract) public view returns (bytes32) {\n        return contractTypes[_loanContract];\n    }\n\n    /**\n     * @notice  Set or update the contract address that implements the given Loan Type.\n     * Set address(0) for a loan type for un-register such type.\n     *\n     * @param _loanType - Loan type represented by 'loan type').\n     * @param _loanContract - The address of the wrapper contract that implements the loan type's behaviour.\n     */\n    function _registerLoanType(string memory _loanType, address _loanContract) internal {\n        require(bytes(_loanType).length != 0, \"loanType is empty\");\n        bytes32 loanTypeKey = ContractKeys.getIdFromStringKey(_loanType);\n\n        typeContracts[loanTypeKey] = _loanContract;\n        contractTypes[_loanContract] = loanTypeKey;\n\n        emit TypeUpdated(loanTypeKey, _loanContract);\n    }\n\n    /**\n     * @notice  Batch set or update the contract addresses that implement the given batch Loan Type.\n     * Set address(0) for a loan type for un-register such type.\n     *\n     * @param _loanTypes - Loan types represented by keccak256('loan type').\n     * @param _loanContracts - The addresses of each wrapper contract that implements the loan type's behaviour.\n     */\n    function _registerLoanTypes(string[] memory _loanTypes, address[] memory _loanContracts) internal {\n        require(_loanTypes.length == _loanContracts.length, \"function information arity mismatch\");\n\n        for (uint256 i = 0; i < _loanTypes.length; i++) {\n            _registerLoanType(_loanTypes[i], _loanContracts[i]);\n        }\n    }\n}\n"
    },
    "contracts/nftTypeRegistry/nftTypes/ERC1155Wrapper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"../../interfaces/INftWrapper.sol\";\n\n/**\n * @title ERC1155Wrapper\n * @dev Provides logic to transfer ERC1155 tokens\n */\ncontract ERC1155Wrapper is INftWrapper {\n    /**\n     * @dev Transfer the nft to the `recipient`\n     *\n     * @param _sender Address of the current owner of the nft\n     * @param _recipient Address that will receive the nft\n     * @param _nftContract Address of the nft contract\n     * @param _nftId Id of the nft\n     *\n     * @return true if successfully transferred, false otherwise\n     */\n    function transferNFT(\n        address _sender,\n        address _recipient,\n        address _nftContract,\n        uint256 _nftId\n    ) external override returns (bool) {\n        // Warning:\n        // Since we permit ERC1155s in their entirety, the given nftId may represent a fungible token (amount > 1),\n        // in which case they are treated as non-fungible by hard coding the amount to 1.\n        IERC1155(_nftContract).safeTransferFrom(_sender, _recipient, _nftId, 1, \"\");\n        return true;\n    }\n\n    function isOwner(\n        address _owner,\n        address _nftContract,\n        uint256 _tokenId\n    ) external view override returns (bool) {\n        return IERC1155(_nftContract).balanceOf(_owner, _tokenId) > 0;\n    }\n\n    function wrapAirdropReceiver(\n        address _recipient,\n        address _nftContract,\n        uint256 _nftId,\n        address _beneficiary\n    ) external override returns (bool) {\n        IERC1155(_nftContract).safeTransferFrom(address(this), _recipient, _nftId, 1, abi.encode(_beneficiary));\n\n        return true;\n    }\n}\n"
    },
    "contracts/test/TestBaseLoan.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.4;\n\nimport \"../loans/BaseLoan.sol\";\n\ncontract TestBaseLoan is BaseLoan {\n    constructor(address _admin) BaseLoan(_admin) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n"
    },
    "contracts/permittedLists/PermittedAirdrops.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"../interfaces/IPermittedAirdrops.sol\";\nimport \"../utils/Ownable.sol\";\n\n/**\n * @title  PermittedAirdrops\n * @author NFTfi\n * @dev Registry for airdropa supported by NFTfi. Each Airdrop is associated with a boolean permit.\n */\ncontract PermittedAirdrops is Ownable, IPermittedAirdrops {\n    /* ******* */\n    /* STORAGE */\n    /* ******* */\n\n    /**\n     * @notice A mapping from an airdrop to whether that airdrop\n     * is permitted to be used by NFTfi.\n     */\n    mapping(bytes => bool) private airdropPermits;\n\n    /* ****** */\n    /* EVENTS */\n    /* ****** */\n\n    /**\n     * @notice This event is fired whenever the admin sets a ERC20 permit.\n     *\n     * @param airdropContract - Address of the airdrop contract.\n     * @param selector - The selector of the permitted function in the `airdropContract`.\n     * @param isPermitted - Signals airdrop permit.\n     */\n    event AirdropPermit(address indexed airdropContract, bytes4 indexed selector, bool isPermitted);\n\n    /* *********** */\n    /* CONSTRUCTOR */\n    /* *********** */\n\n    /**\n     * @notice Initialize `airdropPermits` with a batch of permitted airdops\n     *\n     * @param _admin - Initial admin of this contract.\n     * @param _airdopContracts - The batch of airdrop contract addresses initially permitted.\n     * @param _selectors - The batch of selector of the permitted functions for each `_airdopContracts`.\n     */\n    constructor(\n        address _admin,\n        address[] memory _airdopContracts,\n        bytes4[] memory _selectors\n    ) Ownable(_admin) {\n        require(_airdopContracts.length == _selectors.length, \"function information arity mismatch\");\n        for (uint256 i = 0; i < _airdopContracts.length; i++) {\n            _setAirdroptPermit(_airdopContracts[i], _selectors[i], true);\n        }\n    }\n\n    /* ********* */\n    /* FUNCTIONS */\n    /* ********* */\n\n    /**\n     * @notice This function can be called by admins to change the permitted status of an airdrop. This includes\n     * both adding an airdrop to the permitted list and removing it.\n     *\n     * @param _airdropContract - The address of airdrop contract whose permit list status changed.\n     * @param _selector - The selector of the permitted function whose permit list status changed.\n     * @param _permit - The new status of whether the airdrop is permitted or not.\n     */\n    function setAirdroptPermit(\n        address _airdropContract,\n        bytes4 _selector,\n        bool _permit\n    ) external onlyOwner {\n        _setAirdroptPermit(_airdropContract, _selector, _permit);\n    }\n\n    /**\n     * @notice This function can be called by admins to change the permitted status of a batch of airdrops. This\n     * includes both adding an airdop to the permitted list and removing it.\n     *\n     * @param _airdropContracts - The addresses of the airdrop contracts whose permit list status changed.\n     * @param _selectors - the selector of the permitted functions for each airdop whose permit list status changed.\n     * @param _permits - The new statuses of whether the airdrop is permitted or not.\n     */\n    function setAirdroptPermits(\n        address[] memory _airdropContracts,\n        bytes4[] memory _selectors,\n        bool[] memory _permits\n    ) external onlyOwner {\n        require(\n            _airdropContracts.length == _selectors.length,\n            \"setAirdroptPermits function information arity mismatch\"\n        );\n        require(_selectors.length == _permits.length, \"setAirdroptPermits function information arity mismatch\");\n\n        for (uint256 i = 0; i < _airdropContracts.length; i++) {\n            _setAirdroptPermit(_airdropContracts[i], _selectors[i], _permits[i]);\n        }\n    }\n\n    /**\n     * @notice This function can be called by anyone to get the permit associated with the airdrop.\n     *\n     * @param _addressSel - The address of the airdrop contract + function selector.\n     *\n     * @return Returns whether the airdrop is permitted\n     */\n    function isValidAirdrop(bytes memory _addressSel) external view override returns (bool) {\n        return airdropPermits[_addressSel];\n    }\n\n    /**\n     * @notice This function can be called by admins to change the permitted status of an airdrop. This includes\n     * both adding an airdrop to the permitted list and removing it.\n     *\n     * @param _airdropContract - The address of airdrop contract whose permit list status changed.\n     * @param _selector - The selector of the permitted function whose permit list status changed.\n     * @param _permit - The new status of whether the airdrop is permitted or not.\n     */\n    function _setAirdroptPermit(\n        address _airdropContract,\n        bytes4 _selector,\n        bool _permit\n    ) internal {\n        require(_airdropContract != address(0), \"airdropContract is zero address\");\n        require(_selector != bytes4(0), \"selector is empty\");\n\n        airdropPermits[abi.encode(_airdropContract, _selector)] = _permit;\n\n        emit AirdropPermit(_airdropContract, _selector, _permit);\n    }\n}\n"
    },
    "contracts/governance/votingImplementations/MultisigVoting.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"../../governance/IVoting.sol\";\nimport \"../../governance/IProposals.sol\";\nimport \"../../utils/Ownable.sol\";\n\n/**\n * @author NFTfi and Compound finance\n * @title MultisigVoting\n * @notice Multisig voting strategy implementing the IVoting interface to be used in the Proposals contract\n */\ncontract MultisigVoting is IVoting, Ownable {\n    // --------------------------------------------------------------------------\n    // STATE VARIABLES\n    // --------------------------------------------------------------------------\n\n    struct ProposalVotes {\n        // Current number of votes in favor of this proposal\n        uint256 forVotes;\n        // Current number of votes in opposition to this proposal\n        uint256 againstVotes;\n        // Receipts of ballots for the entire set of voters\n        mapping(address => Receipt) receipts;\n    }\n    // Ballot receipt record for a voter, main utility is to prevent double voting\n    struct Receipt {\n        // Whether or not a vote has been cast\n        bool hasVoted;\n        // Whether or not the voter supports the proposal\n        bool support;\n    }\n    // The number of votes in support of a proposal required in order for a vote to succeed\n    uint256 public voteThreshold;\n    // The number of voters registered in the multisig\n    uint256 public voterNumber;\n    // The addresses that can vote\n    mapping(address => bool) public voters;\n    // The addresses that can propose\n    mapping(address => bool) public proposers;\n    // The official record of all proposals ever proposed\n    mapping(uint256 => ProposalVotes) public proposalVotes;\n    // The proposals contract thats proposals this voting strategy votes on\n    IProposals public override proposalsContract;\n\n    // --------------------------------------------------------------------------\n    // EVENTS\n    // --------------------------------------------------------------------------\n\n    //An event emitted when a vote has been cast on a proposal\n    event VoteCast(address voter, uint256 proposalId, bool support);\n\n    // --------------------------------------------------------------------------\n    // CONSTRUCTOR\n    // --------------------------------------------------------------------------\n\n    /**\n     * @param _admin - Initial admin of this contract.\n     * @param _proposalsContract Address of the proposals contract\n     * @param _voters List of addresses of the voters\n     * @param _proposers List of addresses of the proposers\n     * @param _voteThreshold The number of votes in support of a proposal required in order for a vote to succeed\n     */\n    constructor(\n        address _admin,\n        address _proposalsContract,\n        address[] memory _voters,\n        address[] memory _proposers,\n        uint256 _voteThreshold\n    ) Ownable(_admin) {\n        proposalsContract = IProposals(_proposalsContract);\n        addVoters(_voters);\n        setProposers(_proposers, true);\n        setVoteThreshold(_voteThreshold);\n    }\n\n    // --------------------------------------------------------------------------\n    // NON-STATE MODIFYING EXTERNAL FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @param _proposer Address to be checked\n     * @return Has proposing rights or not\n     * @notice Returns if an address has proposing rights\n     */\n    function canPropose(address _proposer) external view override returns (bool) {\n        return proposers[_proposer];\n    }\n\n    /**\n     * @param _proposalId Local id of the proposal\n     * @return Result of the vote (true if above threshold and more for than against)\n     * @notice Retunrs the result of the vote, the Proposals contract will query on decision of a proposal\n     */\n    function getMajorityResult(uint256 _proposalId) external view override returns (bool) {\n        ProposalVotes storage proposalVote = proposalVotes[_proposalId];\n        // negation of\n        // https://github.com/withtally/Tutorial-Deploy-Governance/blob/main/contracts/GovernorAlpha.sol#L239\n        return proposalVote.forVotes > proposalVote.againstVotes && proposalVote.forVotes >= voteThreshold;\n    }\n\n    // --------------------------------------------------------------------------\n    // STATE MODIFYING PUBLIC FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @param _proposalId Local id of the proposal\n     * @param _support If the voter supprost the given proposal or not\n     * @notice Function for the voters to vote for a given porposal\n     */\n    function castVote(uint256 _proposalId, bool _support) public {\n        require(proposalsContract.state(_proposalId) == IProposals.ProposalState.Active, \"_castVote: voting is closed\");\n        ProposalVotes storage proposalVote = proposalVotes[_proposalId];\n        Receipt storage receipt = proposalVote.receipts[msg.sender];\n        require(receipt.hasVoted == false, \"_castVote: voter already voted\");\n\n        if (_support) {\n            proposalVote.forVotes += 1;\n        } else {\n            proposalVote.againstVotes += 1;\n        }\n\n        receipt.hasVoted = true;\n        receipt.support = _support;\n\n        emit VoteCast(msg.sender, _proposalId, _support);\n    }\n\n    /**\n     * @param _voters List of addresses of the voters to be added\n     * @notice Adds multiple voters to the contract at a time\n     */\n    function addVoters(address[] memory _voters) public onlyOwner {\n        for (uint256 i = 0; i < _voters.length; i++) {\n            addVoter(_voters[i]);\n        }\n    }\n\n    /**\n     * @param _voter Address of the voter to be added\n     * @notice Adds a new voter address to the contract\n     */\n    function addVoter(address _voter) public onlyOwner {\n        require(voters[_voter] == false, \"addVoter: Address is already a voter.\");\n        voters[_voter] = true;\n        voterNumber += 1;\n    }\n\n    /**\n     * @param _voter address of the voter to be removed\n     * @notice  Removes a voter address from the contract\n     */\n    function removeVoter(address _voter) public onlyOwner {\n        require(voters[_voter] == true, \"setProposer: Address isn't a voter.\");\n        voters[_voter] = false;\n        voterNumber -= 1;\n    }\n\n    /**\n     * @param _proposers List of proposer addresses to be set\n     * @param _canPropose Flag, if the given address list can or cannot propose\n     * @notice  Enables or disables a list of voter addresses to propose\n     */\n    function setProposers(address[] memory _proposers, bool _canPropose) public onlyOwner {\n        for (uint256 i = 0; i < _proposers.length; i++) {\n            setProposer(_proposers[i], _canPropose);\n        }\n    }\n\n    /**\n     * @param _proposer Proposer address to be set\n     * @param _canPropose Flag, if the given address list can or cannot propose\n     * @notice  Enables or disables a voter address to propose\n     */\n    function setProposer(address _proposer, bool _canPropose) public onlyOwner {\n        require(voters[_proposer] == true, \"setProposer: Address isn't a voter.\");\n        proposers[_proposer] = _canPropose;\n    }\n\n    /**\n     * @param _voteThreshold The number of votes in support of a proposal required in order for a vote to succeed\n     * @notice  Sets number of votes needed for a vote to succeed\n     */\n    function setVoteThreshold(uint256 _voteThreshold) public onlyOwner {\n        require(_voteThreshold > 0 && _voteThreshold <= voterNumber, \"setVoteThreshold: Invalid threshold.\");\n        voteThreshold = _voteThreshold;\n    }\n\n    // --------------------------------------------------------------------------\n    // NON-STATE MODIFYING PUBLIC FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @param _proposalId Local id of the proposal\n     * @param _voter Address of the voter\n     * @return Voting receipt containing if voter has voted and their decision\n     * @notice Gets voting receipts stored on-chain\n     */\n    function getReceipt(uint256 _proposalId, address _voter) public view returns (Receipt memory) {\n        return proposalVotes[_proposalId].receipts[_voter];\n    }\n}\n"
    },
    "contracts/governance/IVoting.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"./IProposals.sol\";\n\n/**\n * @author NFTfi\n * @title IVoting\n * @notice Common interface for functions voting contracts have to implement to be used for the Proposals contract\n */\ninterface IVoting {\n    // --------------------------------------------------------------------------\n    // NON-STATE MODIFYING FUNCTIONS (view & pure)\n    // --------------------------------------------------------------------------\n\n    /**\n     * @return The proposals contract thats proposals this voting strategy votes on\n     */\n    function proposalsContract() external view returns (IProposals);\n\n    /**\n     * @param _proposer Address to be checked\n     * @return Has proposing rights or not\n     * @notice Returns if an address has proposing rights\n     */\n    function canPropose(address _proposer) external view returns (bool);\n\n    /**\n     * @param _proposalId Local id of the proposal\n     * @return Result of the vote (true if above threshold and more for than against)\n     * @notice Retunrs the result of the vote, the Proposals contract will query on decision of a proposal\n     */\n    function getMajorityResult(uint256 _proposalId) external view returns (bool);\n}\n"
    },
    "contracts/governance/IProposals.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"./IVoting.sol\";\nimport \"./ITimelock.sol\";\n\n/**\n * @author NFTfi\n * @title IProposals\n * @notice Interface for Proposals contract, handling the governance proposals\n */\ninterface IProposals {\n    // --------------------------------------------------------------------------\n    // STATE VARIABLES\n    // --------------------------------------------------------------------------\n    struct Proposal {\n        // Unique id for looking up a proposal\n        uint256 id;\n        // Creator of the proposal\n        address proposer;\n        // The timestamp that the proposal will be available for execution, set once the vote succeeds\n        uint256 eta;\n        // the ordered list of target addresses for calls to be made\n        address[] targets;\n        // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\n        uint256[] values;\n        // The ordered list of function signatures to be called, optional, can be omitted by passing empty string\n        string[] signatures;\n        // The ordered list of calldata to be passed to each call\n        /// if signature is present, it should be only the parameter data in hex\n        /// if signatures are omitted it should be the full calldata\n        bytes[] calldatas;\n        // The block at which voting begins: holders must delegate their votes prior to this block\n        uint256 startBlock;\n        // The block at which voting ends: votes must be cast prior to this block\n        uint256 endBlock;\n        // Flag marking whether the proposal has been canceled\n        bool canceled;\n        // Flag marking whether the proposal has been executed\n        bool executed;\n        // address of the voting implementation contract used\n        address voting;\n    }\n\n    // Possible states that a proposal may be in\n    enum ProposalState {\n        Pending,\n        Active,\n        Canceled,\n        Defeated,\n        Succeeded,\n        Queued,\n        Expired,\n        Executed\n    }\n\n    // --------------------------------------------------------------------------\n    // NON-STATE MODIFYING FUNCTIONS (view & pure)\n    // --------------------------------------------------------------------------\n\n    // DOCS copy across docs from proposal here\n    // The official record of all proposals ever proposed\n    function getProposals(uint256) external view returns (Proposal memory);\n\n    function state(uint256 _proposalId) external view returns (ProposalState);\n}\n"
    },
    "contracts/governance/ITimelock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\n/**\n * @author NFTfi\n * @title ITimelock\n * @notice Interface of the Timelock contract, which handles proposal delays and execution in practice\n */\ninterface ITimelock {\n    // --------------------------------------------------------------------------\n    // STATE MODIFYING EXTERNAL FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @notice Lets a new pending admin accept the admin rights\n     */\n    function acceptAdmin() external;\n\n    /**\n     * @param _target address of the contract the proposal is targeting\n     * @param _value ETH value sent with the proposal call\n     * @param _signature function signature to be called, optional, can be omitted by passing empty string\n     * @param _data calldata to be passed to the call\n     * if signature is present, it is only the parameter data in hex\n     * if signatures are omitted it is the full calldata\n     * @param _eta estimated time of arrival of a proposal, proposal cannot be executed before this timestamp\n     * @notice Queues a successfully voted proposal for execution, it stays queue-d until it is\n     * either executed after the delay or cancelled\n     */\n    function queueTransaction(\n        address _target,\n        uint256 _value,\n        string calldata _signature,\n        bytes calldata _data,\n        uint256 _eta\n    ) external returns (bytes32);\n\n    /**\n     * @param _target address of the contract the proposal is targeting\n     * @param _value ETH value sent with the proposal call\n     * @param _signature function signature to be called, optional, can be omitted by passing empty string\n     * @param _data calldata to be passed to the call\n     * if signature is present, it is only the parameter data in hex\n     * if signatures are omitted it is the full calldata\n     * @param _eta estimated time of arrival of a proposal, proposal cannot be executed before this timestamp\n     * @notice Cancels queued proposal\n     */\n    function cancelTransaction(\n        address _target,\n        uint256 _value,\n        string calldata _signature,\n        bytes calldata _data,\n        uint256 _eta\n    ) external;\n\n    /**\n     * @param _target address of the contract the proposal is targeting\n     * @param _value ETH value sent with the proposal call\n     * @param _signature function signature to be called, optional, can be omitted by passing empty string\n     * @param _data calldata to be passed to the call\n     * if signature is present, it is only the parameter data in hex\n     * if signatures are omitted it is the full calldata\n     * @param _eta estimated time of arrival of a proposal, proposal cannot be executed before this timestamp\n     * @notice Executes queued proposal\n     */\n    function executeTransaction(\n        address _target,\n        uint256 _value,\n        string calldata _signature,\n        bytes calldata _data,\n        uint256 _eta\n    ) external payable;\n\n    // --------------------------------------------------------------------------\n    // NON-STATE MODIFYING EXTERNAL FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @notice Minimum amount of time a tx has to stay in queue before it gets accepted (unix timestamp)\n     */\n    function delay() external view returns (uint256);\n\n    /**\n     * @notice Maximum amount of time a transaction can be queued without\n     * execution before it becomes stale and cannot be executed anymore\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function GRACE_PERIOD() external view returns (uint256);\n\n    /**\n     * tx hash key => is queued\n     */\n    function queuedTransactions(bytes32 hash) external view returns (bool);\n}\n"
    },
    "contracts/governance/votingImplementations/QuorumVoting.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"../../governance/IVoting.sol\";\nimport \"../../governance/IProposals.sol\";\n\n/**\n * @author Compound finance\n * @title TokenInterface\n * @notice Defines a one function interface for a quorum voting token\n */\ninterface TokenInterface {\n    /**\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     */\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\n}\n\n/**\n * @author NFTfi and Compound finance\n * @title QuorumVoting\n * @notice Quorum voting strategy implementing the IVoting interface to be used in the Proposals contract\n * Uses token balances to define voting rights\n */\ncontract QuorumVoting is IVoting {\n    // --------------------------------------------------------------------------\n    // STATE VARIABLES (and pure functions used as constant values in the original)\n    // --------------------------------------------------------------------------\n\n    // The name of this contract\n    string public constant name = \"Quorum Voting\";\n\n    // The number of votes in support of a proposal\n    // required in order for a quorum to be reached and for a vote to succeed\n    // 400,000 = 4% of Token\n    function quorumVotes() public pure returns (uint256) {\n        return 400000e18;\n    }\n\n    // The number of votes required in order for a voter to become a proposer\n    // 100,000 = 1% of Token\n    function proposalThreshold() public pure returns (uint256) {\n        return 100000e18;\n    }\n\n    // The address of the Tokenound governance token\n    // solhint-disable-next-line ordering\n    TokenInterface public token;\n\n    // The proposals contract thats proposals this voting strategy votes on\n    IProposals public override proposalsContract;\n\n    struct ProposalVotes {\n        // Current number of votes in favor of this proposal\n        uint256 forVotes;\n        // Current number of votes in opposition to this proposal\n        uint256 againstVotes;\n        // Receipts of ballots for the entire set of voters\n        mapping(address => Receipt) receipts;\n    }\n\n    // Ballot receipt record for a voter\n    struct Receipt {\n        // Whether or not a vote has been cast\n        bool hasVoted;\n        // Whether or not the voter supports the proposal\n        bool support;\n        // The number of votes the voter had, which were cast\n        uint96 votes;\n    }\n\n    // The official record of all proposals ever proposed\n    mapping(uint256 => ProposalVotes) public proposalVotes;\n\n    // The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH =\n        keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    // The EIP-712 typehash for the ballot struct used by the contract\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,bool support)\");\n\n    // --------------------------------------------------------------------------\n    // EVENTS\n    // --------------------------------------------------------------------------\n\n    // An event emitted when a vote has been cast on a proposal\n    event VoteCast(address voter, uint256 proposalId, bool support, uint256 votes);\n\n    // --------------------------------------------------------------------------\n    // CONSTRUCTOR\n    // --------------------------------------------------------------------------\n\n    /**\n     * @param _token Address of the token contract used for voting power\n     * @param _proposalsContract Address of the proposals contract\n     */\n    constructor(address _token, address _proposalsContract) {\n        token = TokenInterface(_token);\n        proposalsContract = IProposals(_proposalsContract);\n    }\n\n    // --------------------------------------------------------------------------\n    // NON-STATE MODIFYING EXTERNAL FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @param _proposer Address to be checked\n     * @return Has proposing power or not\n     * @notice Returns if an address has proposing power\n     */\n    function canPropose(address _proposer) external view override returns (bool) {\n        return token.getPriorVotes(_proposer, block.number - 1) > proposalThreshold();\n    }\n\n    /**\n     * @param _proposalId Local id of the proposal\n     * @return Result of the vote (true if above threshold and more for than against)\n     * @notice Retunrs the result of the vote, the Proposals contract will query on decision of a proposal\n     */\n    function getMajorityResult(uint256 _proposalId) external view override returns (bool) {\n        ProposalVotes storage proposalVote = proposalVotes[_proposalId];\n        // negation of\n        // https://github.com/withtally/Tutorial-Deploy-Governance/blob/main/contracts/GovernorAlpha.sol#L239\n        return proposalVote.forVotes > proposalVote.againstVotes && proposalVote.forVotes >= quorumVotes();\n    }\n\n    // --------------------------------------------------------------------------\n    // STATE MODIFYING PUBLIC FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @param _proposalId Local id of the proposal\n     * @param _support If the voter supprost the given proposal or not\n     * @notice Function for the voters to vote for a given porposal\n     */\n    function castVote(uint256 _proposalId, bool _support) public {\n        return _castVote(msg.sender, _proposalId, _support);\n    }\n\n    /**\n     * @param _proposalId Local id of the proposal\n     * @param _support If the voter supprost the given proposal or not\n     * @param _v ECDSA parameter v\n     * @param _r ECDSA parameter r\n     * @param _s ECDSA parameter s\n     * @notice Function for the voters to vote for a given porposal with an ECDSA signature\n     */\n    function castVoteBySig(\n        uint256 _proposalId,\n        bool _support,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) public {\n        bytes32 domainSeparator = keccak256(\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this))\n        );\n        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, _proposalId, _support));\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n        address signatory = ecrecover(digest, _v, _r, _s);\n        require(signatory != address(0), \"GovernorAlpha::castVoteBySig: invalid signature\");\n        return _castVote(signatory, _proposalId, _support);\n    }\n\n    // --------------------------------------------------------------------------\n    // NON-STATE MODIFYING PUBLIC FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @param _proposalId Local id of the proposal\n     * @param _voter Address of the voter\n     * @return Voting receipt containing if voter has voted and their decision\n     * @notice Gets voting receipts stored on-chain\n     */\n    function getReceipt(uint256 _proposalId, address _voter) public view returns (Receipt memory) {\n        return proposalVotes[_proposalId].receipts[_voter];\n    }\n\n    // --------------------------------------------------------------------------\n    // NON-STATE MODIFYING INTERNAL FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @param _voter voter address\n     * @param _proposalId Local id of the proposal\n     * @param _support If the voter supprost the given proposal or not\n     * @notice Internal function for the voters to vote for a given porposal\n     */\n    function _castVote(\n        address _voter,\n        uint256 _proposalId,\n        bool _support\n    ) internal {\n        require(\n            proposalsContract.state(_proposalId) == IProposals.ProposalState.Active,\n            \"GovernorAlpha::_castVote: voting is closed\"\n        );\n        ProposalVotes storage proposalVote = proposalVotes[_proposalId];\n        IProposals.Proposal memory proposal = proposalsContract.getProposals(_proposalId);\n        Receipt storage receipt = proposalVote.receipts[_voter];\n        require(receipt.hasVoted == false, \"GovernorAlpha::_castVote: voter already voted\");\n        uint96 votes = token.getPriorVotes(_voter, proposal.startBlock);\n\n        if (_support) {\n            proposalVote.forVotes += votes;\n        } else {\n            proposalVote.againstVotes += votes;\n        }\n\n        receipt.hasVoted = true;\n        receipt.support = _support;\n        receipt.votes = votes;\n\n        emit VoteCast(_voter, _proposalId, _support, votes);\n    }\n\n    // --------------------------------------------------------------------------\n    // STATE MODIFYING INTERNAL FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @notice Chain id for the ECDSA signature voting\n     */\n    function getChainId() internal view returns (uint256) {\n        uint256 chainId;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            chainId := chainid()\n        }\n        return chainId;\n    }\n}\n"
    },
    "contracts/governance/Proposals.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"./IProposals.sol\";\nimport \"./IVoting.sol\";\nimport \"./ITimelock.sol\";\nimport \"../utils/Ownable.sol\";\n\n/**\n * @author NFTfi and Compound finance\n * @title Proposals\n * @notice Contract to create handle the governance proposals\n */\ncontract Proposals is IProposals, Ownable {\n    // --------------------------------------------------------------------------\n    // STATE VARIABLES (and pure functions used as constant values in the original)\n    // --------------------------------------------------------------------------\n\n    // The maximum number of actions that can be included in a proposal\n    // 10 actions\n    function proposalMaxOperations() public pure returns (uint256) {\n        return 10;\n    }\n\n    // The delay before voting on a proposal may take place, once proposed\n    // 1 block\n    function votingDelay() public pure returns (uint256) {\n        return 1;\n    }\n\n    // The duration of voting on a proposal, in blocks\n    // 17280 = ~3 days in blocks (assuming 15s blocks)\n    function votingPeriod() public pure virtual returns (uint256) {\n        return 17280;\n    }\n\n    // The address of the Compound Protocol Timelock\n    // solhint-disable-next-line ordering\n    ITimelock public timelock;\n\n    // The total number of proposals\n    uint256 public proposalCount;\n\n    // The official record of all proposals ever proposed\n    mapping(uint256 => Proposal) private proposals;\n\n    // The latest proposal for each proposer\n    mapping(address => uint256) public latestProposalIds;\n\n    // stores voting implementations mapped to an owner defined id\n    mapping(bytes32 => address) public votingImplementations;\n\n    // structure: endpoint => (voting => bool)\n    mapping(address => mapping(bytes32 => bool)) public governanceEndpoints;\n\n    // --------------------------------------------------------------------------\n    // EVENTS\n    // --------------------------------------------------------------------------\n\n    // An event emitted when a new proposal is created\n    event ProposalCreated(\n        uint256 id,\n        address proposer,\n        address[] targets,\n        uint256[] values,\n        string[] signatures,\n        bytes[] calldatas,\n        uint256 startBlock,\n        uint256 endBlock,\n        string description\n    );\n\n    // An event emitted when a proposal has been canceled\n    event ProposalCanceled(uint256 id);\n\n    // An event emitted when a proposal has been queued in the Timelock\n    event ProposalQueued(uint256 id, uint256 eta);\n\n    // An event emitted when a proposal has been executed in the Timelock\n    event ProposalExecuted(uint256 id);\n\n    event NewVoting(bytes32 id, address voting);\n\n    event GovernableEndpointModified(address endpointAddress, bytes32 votingId, bool canGovern);\n\n    // --------------------------------------------------------------------------\n    // CONSTRUCTOR\n    // --------------------------------------------------------------------------\n\n    /**\n     * @param _admin - Initial admin of this contract.\n     * @param _timelock Address of the timelock contract\n     */\n    constructor(address _admin, address _timelock) Ownable(_admin) {\n        timelock = ITimelock(_timelock);\n    }\n\n    // --------------------------------------------------------------------------\n    // NON-STATE MODIFYING EXTERNAL FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @param _proposalId Unique id of the proposal\n     * @return proposal data\n     */\n    function getProposals(uint256 _proposalId) external view override returns (Proposal memory) {\n        return proposals[_proposalId];\n    }\n\n    // --------------------------------------------------------------------------\n    // STATE MODIFYING PUBLIC FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @param _signatures The ordered list of function signatures to\n     * be called, optional, can be omitted by passing empty string\n     * @param _calldatas The ordered list of calldata to be passed to each call\n     * if signature is present, it should be only the parameter data in hex\n     * if signatures are omitted it should be the full calldata\n     */\n    function propose(\n        address[] memory _targets,\n        uint256[] memory _values,\n        string[] memory _signatures,\n        bytes[] memory _calldatas,\n        bytes32 _votingId,\n        string memory _description\n    ) public returns (uint256) {\n        require(votingImplementations[_votingId] != address(0), \"propose: voting implementation not registered\");\n        for (uint256 i = 0; i < _targets.length; i++) {\n            require(governanceEndpoints[_targets[i]][_votingId], \"voting strategy not allowed for target\");\n        }\n        require(\n            IVoting(votingImplementations[_votingId]).canPropose(msg.sender),\n            \"propose: proposer has no proposing rights\"\n        );\n        require(_targets.length != 0, \"propose: must provide actions\");\n        require(_targets.length <= proposalMaxOperations(), \"propose: too many actions\");\n        require(\n            _targets.length == _values.length &&\n                _targets.length == _signatures.length &&\n                _targets.length == _calldatas.length,\n            \"propose: proposal function information arity mismatch\"\n        );\n        uint256 latestProposalId = latestProposalIds[msg.sender];\n        if (latestProposalId != 0) {\n            ProposalState proposersLatestProposalState = state(latestProposalId);\n            require(\n                proposersLatestProposalState != ProposalState.Active,\n                \"propose: one live proposal per proposer, found active proposal\"\n            );\n            require(\n                proposersLatestProposalState != ProposalState.Pending,\n                \"propose: one live proposal per proposer, found pending proposal\"\n            );\n        }\n\n        uint256 startBlock = block.number + votingDelay();\n        uint256 endBlock = startBlock + votingPeriod();\n\n        proposalCount++;\n        Proposal memory newProposal = Proposal({\n            id: proposalCount,\n            proposer: msg.sender,\n            eta: 0,\n            targets: _targets,\n            values: _values,\n            signatures: _signatures,\n            calldatas: _calldatas,\n            startBlock: startBlock,\n            endBlock: endBlock,\n            canceled: false,\n            executed: false,\n            voting: votingImplementations[_votingId]\n        });\n\n        proposals[newProposal.id] = newProposal;\n        latestProposalIds[newProposal.proposer] = newProposal.id;\n\n        emit ProposalCreated(\n            newProposal.id,\n            msg.sender,\n            _targets,\n            _values,\n            _signatures,\n            _calldatas,\n            startBlock,\n            endBlock,\n            _description\n        );\n        return newProposal.id;\n    }\n\n    /**\n     * @param _proposalId Unique id of the proposal\n     * @notice Queues a successfully voted proposal for execution, it stays queue-d until it is\n     * either executed after the delay or cancelled\n     */\n    function queue(uint256 _proposalId) public {\n        require(state(_proposalId) == ProposalState.Succeeded, \"queue: proposal can only be queued if it is succeeded\");\n        Proposal storage proposal = proposals[_proposalId];\n        uint256 eta = block.timestamp + timelock.delay();\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\n            _queueOrRevert(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta);\n        }\n        proposal.eta = eta;\n        emit ProposalQueued(_proposalId, eta);\n    }\n\n    /**\n     * @param _proposalId Unique id of the proposal\n     * @notice Initiation of proposal execution that actually will happen on the Timestamp contract\n     */\n    function execute(uint256 _proposalId) public payable {\n        require(state(_proposalId) == ProposalState.Queued, \"execute: proposal can only be executed if it is queued\");\n        Proposal storage proposal = proposals[_proposalId];\n        proposal.executed = true;\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\n            timelock.executeTransaction{value: proposal.values[i]}(\n                proposal.targets[i],\n                proposal.values[i],\n                proposal.signatures[i],\n                proposal.calldatas[i],\n                proposal.eta\n            );\n        }\n        emit ProposalExecuted(_proposalId);\n    }\n\n    /**\n     * @param _proposalId Unique id of the proposal\n     * @notice Can Cancel a proposal if it is not executed yet and the original poroposer has lost their proposing power\n     */\n    function cancel(uint256 _proposalId) public {\n        ProposalState proposalState = state(_proposalId);\n        require(proposalState != ProposalState.Executed, \"cancel: cannot cancel executed proposal\");\n\n        Proposal storage proposal = proposals[_proposalId];\n        require(!IVoting(proposal.voting).canPropose(proposal.proposer), \"cancel: proposer above threshold\");\n\n        proposal.canceled = true;\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\n            timelock.cancelTransaction(\n                proposal.targets[i],\n                proposal.values[i],\n                proposal.signatures[i],\n                proposal.calldatas[i],\n                proposal.eta\n            );\n        }\n\n        emit ProposalCanceled(_proposalId);\n    }\n\n    /**\n     * @param _id Unique id of the voting strategy\n     * @param _voting Address of the voting startegy contract implementing IVoting\n     * @notice Adds or removes a voting strategy, we can remove one by setting _voting to address(0)\n     */\n    function addVoting(bytes32 _id, address _voting) public onlyOwner {\n        if (_voting != address(0)) {\n            require(\n                address(IVoting(_voting).proposalsContract()) == address(this),\n                \"setVoting, voting contract has different proposals set\"\n            );\n        }\n        votingImplementations[_id] = _voting;\n        emit NewVoting(_id, _voting);\n    }\n\n    /**\n     * @param _endpointAddress Address of the governable endpoint\n     * @param _votingId Unique id of the voting strategy\n     * @param _canGovern Unique id of the voting strategy\n     * @notice Saves a flag for each governable endpoints by voting strategies to determine if the given\n     * strategy can be used to make a proposal to the endpoint\n     */\n    function setGovernableEndpoint(\n        address _endpointAddress,\n        bytes32 _votingId,\n        bool _canGovern\n    ) public onlyOwner {\n        require(_endpointAddress != address(0), \"endpoint cannot be 0 address\");\n        require(votingImplementations[_votingId] != address(0), \"voting id doesn't exist\");\n        governanceEndpoints[_endpointAddress][_votingId] = _canGovern;\n        emit GovernableEndpointModified(_endpointAddress, _votingId, _canGovern);\n    }\n\n    // RESEARCH why separate functions? Not just in an initialises\n    // answer: these are separate functions, so the Timelock admin capability can be initiated\n    // and later renounced in a manner, where this process is a timeock delayed (but non-voted) proposal\n\n    /**\n     * @notice used to initiate this contract as the timelock admin, after the timelock contract received\n     * a proposal for transferring (pending) admin rights to this contract from deployer\n     */\n    function __acceptTimelockAdmin() public onlyOwner {\n        timelock.acceptAdmin();\n    }\n\n    /**\n     * @param _newPendingAdmin new admin account (preferably another GovernorAlpha/Proposals\n     * contract if we want the goverance to work)\n     * @param _eta estimated time of arrival of a proposal, proposal cannot be executed before this timestamp\n     * @notice queues a proposal to renounce and transfer Timelock admin rights\n     */\n    function __queueSetTimelockPendingAdmin(address _newPendingAdmin, uint256 _eta) public onlyOwner {\n        timelock.queueTransaction(address(timelock), 0, \"setPendingAdmin(address)\", abi.encode(_newPendingAdmin), _eta);\n    }\n\n    /**\n     * @param _newPendingAdmin new admin account (preferably another GovernorAlpha/Proposals\n     * contract if we want the goverance to work)\n     * @param _eta estimated time of arrival of a proposal, proposal cannot be executed before this timestamp\n     * @notice executes a proposal to renounce and transfer Timelock admin rights\n     */\n    function __executeSetTimelockPendingAdmin(address _newPendingAdmin, uint256 _eta) public onlyOwner {\n        timelock.executeTransaction(\n            address(timelock),\n            0,\n            \"setPendingAdmin(address)\",\n            abi.encode(_newPendingAdmin),\n            _eta\n        );\n    }\n\n    // --------------------------------------------------------------------------\n    // NON-STATE MODIFYING PUBLIC FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @param _proposalId Unique id of the proposal\n     * @return voting result (passed/failed)\n     */\n    function getResult(uint256 _proposalId) public view returns (bool) {\n        return IVoting(proposals[_proposalId].voting).getMajorityResult(_proposalId);\n    }\n\n    /**\n     * @param _proposalId Unique id of the proposal\n     * @return targets - ordered list of addresses of the contract the proposal is targeting\n     * @return values - ordered list of ETH values sent with the proposal calls\n     * @return signatures - ordered list of function signatures to be called, optional,\n     * can be omitted by passing empty string\n     * @return calldatas - ordered list of calldatas to be passed to the calls\n     * if signature is present, it is only the parameter data in hex\n     * if signatures are omitted it is the full calldata\n     */\n    function getActions(uint256 _proposalId)\n        public\n        view\n        returns (\n            address[] memory targets,\n            uint256[] memory values,\n            string[] memory signatures,\n            bytes[] memory calldatas\n        )\n    {\n        Proposal storage p = proposals[_proposalId];\n        return (p.targets, p.values, p.signatures, p.calldatas);\n    }\n\n    /**\n     * @param _proposalId Unique id of the proposal\n     * @return state of the proposal expressed in the ProposalState enum\n     * @dev dynamically calculates proposal state based on the its state parameters\n     */\n    function state(uint256 _proposalId) public view override returns (ProposalState) {\n        require(proposalCount >= _proposalId && _proposalId > 0, \"state: invalid proposal id\");\n        Proposal storage proposal = proposals[_proposalId];\n        if (proposal.canceled) {\n            return ProposalState.Canceled;\n        } else if (block.number <= proposal.startBlock) {\n            return ProposalState.Pending;\n        } else if (block.number <= proposal.endBlock) {\n            return ProposalState.Active;\n        } else if (!getResult(_proposalId)) {\n            return ProposalState.Defeated;\n        } else if (proposal.eta == 0) {\n            return ProposalState.Succeeded;\n        } else if (proposal.executed) {\n            return ProposalState.Executed;\n        } else if (block.timestamp >= proposal.eta + timelock.GRACE_PERIOD()) {\n            return ProposalState.Expired;\n        } else {\n            return ProposalState.Queued;\n        }\n    }\n\n    // --------------------------------------------------------------------------\n    // STATE MODIFYING INTERNAL FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @param _target address of the contract the proposal is targeting\n     * @param _value ETH value sent with the proposal call\n     * @param _signature function signature to be called, optional, can be omitted by passing empty string\n     * @param _data calldata to be passed to the call\n     * if signature is present, it is only the parameter data in hex\n     * if signatures are omitted it is the full calldata\n     * @param _eta estimated time of arrival of a proposal, proposal cannot be executed before this timestamp\n     * @notice Queues a successfully voted proposal for execution, it stays queue-d until it is\n     * either executed after the delay or cancelled\n     */\n    function _queueOrRevert(\n        address _target,\n        uint256 _value,\n        string memory _signature,\n        bytes memory _data,\n        uint256 _eta\n    ) internal {\n        require(\n            !timelock.queuedTransactions(keccak256(abi.encode(_target, _value, _signature, _data, _eta))),\n            \"_queueOrRevert: proposal action already queued at eta\"\n        );\n        timelock.queueTransaction(_target, _value, _signature, _data, _eta);\n    }\n}\n"
    },
    "contracts/test/TestProposals.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../governance/Proposals.sol\";\n\ncontract TestProposals is Proposals {\n    constructor(address _admin, address _timelock)\n        Proposals(_admin, _timelock) // solhint-disable-next-line no-empty-blocks\n    {}\n\n    /// @notice The duration of voting on a proposal, in blocks\n    function votingPeriod() public pure override returns (uint256) {\n        return 10;\n    }\n}\n"
    },
    "contracts/governance/Timelock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"./ITimelock.sol\";\n\n/**\n * @author  Compound finance\n * @title   Timelock\n * @notice  Executes proposals after a delay\n */\ncontract Timelock is ITimelock {\n    // --------------------------------------------------------------------------\n    // STATE VARIABLES\n    // --------------------------------------------------------------------------\n\n    // Maximum amount of time a transaction can be queued without\n    // execution before it becomes stale and cannot be executed anymore\n    uint256 public constant override GRACE_PERIOD = 14 days;\n    // Minimum queue delay possible (unix timestamp)\n    uint256 public constant MINIMUM_DELAY = 2 days;\n    // Maximum queue delay possible (unix timestamp)\n    uint256 public constant MAXIMUM_DELAY = 30 days;\n    // Admin account: should be Proposals/GovernorAplha contract for a functionnal governance system\n    address public admin;\n    // Pending admin account to be accepted by the future admin\n    address public pendingAdmin;\n    // Minimum amount of time a tx has to stay in queue before it gets accepted (unix timestamp)\n    uint256 public override delay;\n    // tx hash key => is queued\n    mapping(bytes32 => bool) public override queuedTransactions;\n\n    // --------------------------------------------------------------------------\n    // EVENTS\n    // --------------------------------------------------------------------------\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n    event NewDelay(uint256 indexed newDelay);\n    event CancelTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event ExecuteTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event QueueTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n\n    // --------------------------------------------------------------------------\n    // MODIFIERS\n    // --------------------------------------------------------------------------\n\n    modifier onlyAdmin {\n        require(msg.sender == admin, \"Call must come from admin.\");\n        _;\n    }\n\n    modifier onlyTimelock {\n        require(msg.sender == address(this), \"Call must come from Timelock.\");\n        _;\n    }\n\n    // --------------------------------------------------------------------------\n    // CONSTRUCTOR\n    // --------------------------------------------------------------------------\n\n    /**\n     * @param _admin Admin account, generally should be set to deployer address (or other external)\n     * and the transferred to Proposals/GovernorAplha contract\n     * @param _delay Minimum amount of time a tx has to stay in queue before it gets accepted\n     */\n    constructor(address _admin, uint256 _delay) {\n        require(_admin != address(0), \"admin cannot be 0 address\");\n        require(_delay >= MINIMUM_DELAY, \"constructor: Delay must exceed minimum delay.\");\n        require(_delay <= MAXIMUM_DELAY, \"constructor: Delay must not exceed maximum delay.\");\n\n        admin = _admin;\n        delay = _delay;\n    }\n\n    // --------------------------------------------------------------------------\n    // STATE MODIFYING EXTERNAL FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @notice Receive function to handle plain Ether transfers\n     */\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    // --------------------------------------------------------------------------\n    // STATE MODIFYING PUBLIC FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @param _delay New minimum amount of time a tx has to stay in queue before it gets accepted (unix timestamp)\n     * @notice Enables setting delay trough proposal\n     */\n    function setDelay(uint256 _delay) public onlyTimelock {\n        require(_delay >= MINIMUM_DELAY, \"setDelay: Delay must exceed minimum delay.\");\n        require(_delay <= MAXIMUM_DELAY, \"setDelay: Delay must not exceed maximum delay.\");\n        delay = _delay;\n\n        emit NewDelay(delay);\n    }\n\n    /**\n     * @notice Lets a new pending admin accept the admin rights\n     */\n    function acceptAdmin() public override {\n        require(msg.sender == pendingAdmin, \"acceptAdmin: Call must come from pendingAdmin.\");\n        admin = msg.sender;\n        pendingAdmin = address(0);\n\n        emit NewAdmin(admin);\n    }\n\n    /**\n     * @param _pendingAdmin new admin address\n     * @notice Enables setting a new pending admin trough proposal\n     */\n    function setPendingAdmin(address _pendingAdmin) public onlyTimelock {\n        require(_pendingAdmin != address(0), \"admin cannot be 0 address\");\n        pendingAdmin = _pendingAdmin;\n\n        emit NewPendingAdmin(pendingAdmin);\n    }\n\n    /**\n     * @param _target address of the contract the proposal is targeting\n     * @param _value ETH value sent with the proposal call\n     * @param _signature function signature to be called, optional, can be omitted by passing empty string\n     * @param _data calldata to be passed to the call\n     * if signature is present, it is only the parameter data in hex\n     * if signatures are omitted it is the full calldata\n     * @param _eta estimated time of arrival of a proposal, proposal cannot be executed before this timestamp\n     * @notice Queues a successfully voted proposal for execution, it stays queue-d until it is\n     * either executed after the delay or cancelled\n     */\n    function queueTransaction(\n        address _target,\n        uint256 _value,\n        string memory _signature,\n        bytes memory _data,\n        uint256 _eta\n    ) public override onlyAdmin returns (bytes32) {\n        require(_eta >= getBlockTimestamp() + delay, \"queueTransaction: Estimated execution block must satisfy delay.\");\n\n        bytes32 txHash = keccak256(abi.encode(_target, _value, _signature, _data, _eta));\n        queuedTransactions[txHash] = true;\n\n        emit QueueTransaction(txHash, _target, _value, _signature, _data, _eta);\n        return txHash;\n    }\n\n    /**\n     * @param _target address of the contract the proposal is targeting\n     * @param _value ETH value sent with the proposal call\n     * @param _signature function signature to be called, optional, can be omitted by passing empty string\n     * @param _data calldata to be passed to the call\n     * if signature is present, it is only the parameter data in hex\n     * if signatures are omitted it is the full calldata\n     * @param _eta estimated time of arrival of a proposal, proposal cannot be executed before this timestamp\n     * @notice Cancels queued proposal\n     */\n    function cancelTransaction(\n        address _target,\n        uint256 _value,\n        string memory _signature,\n        bytes memory _data,\n        uint256 _eta\n    ) public override onlyAdmin {\n        bytes32 txHash = keccak256(abi.encode(_target, _value, _signature, _data, _eta));\n        queuedTransactions[txHash] = false;\n\n        emit CancelTransaction(txHash, _target, _value, _signature, _data, _eta);\n    }\n\n    /**\n     * @param _target address of the contract the proposal is targeting\n     * @param _value ETH value sent with the proposal call\n     * @param _signature function signature to be called, optional, can be omitted by passing empty string\n     * @param _data calldata to be passed to the call\n     * if signature is present, it is only the parameter data in hex\n     * if signatures are omitted it is the full calldata\n     * @param _eta estimated time of arrival of a proposal, proposal cannot be executed before this timestamp\n     * @notice Executes queued proposal\n     */\n    function executeTransaction(\n        address _target,\n        uint256 _value,\n        string memory _signature,\n        bytes memory _data,\n        uint256 _eta\n    ) public payable override onlyAdmin {\n        bytes32 txHash = keccak256(abi.encode(_target, _value, _signature, _data, _eta));\n        require(queuedTransactions[txHash], \"executeTransaction: Transaction hasn't been queued.\");\n        require(getBlockTimestamp() >= _eta, \"executeTransaction: Transaction hasn't surpassed time lock.\");\n        require(getBlockTimestamp() <= _eta + GRACE_PERIOD, \"executeTransaction: Transaction is stale.\");\n\n        queuedTransactions[txHash] = false;\n\n        bytes memory callData;\n\n        if (bytes(_signature).length == 0) {\n            callData = _data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(_signature))), _data);\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = _target.call{value: _value}(callData);\n        require(success, \"executeTransaction: Transaction execution reverted.\");\n\n        emit ExecuteTransaction(txHash, _target, _value, _signature, _data, _eta);\n    }\n\n    // --------------------------------------------------------------------------\n    // NON-STATE MODIFYING INTERNAL FUNCTIONS\n    // --------------------------------------------------------------------------\n\n    /**\n     * @notice Helper function to get timestamp\n     */\n    function getBlockTimestamp() internal view returns (uint256) {\n        return block.timestamp;\n    }\n}\n"
    },
    "contracts/test/TestGaspMasks.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol\";\n\ncontract TestGaspMasks is ERC721PresetMinterPauserAutoId {\n    constructor() ERC721PresetMinterPauserAutoId(\"GaspMasks\", \"WTF\", \"https://example.com/token/\") {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n"
    },
    "contracts/test/TestRealsies.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\n\ncontract TestRealsies is ERC20PresetMinterPauser, ERC20Permit {\n    constructor() ERC20PresetMinterPauser(\"Realsies\", \"RRR\") ERC20Permit(\"Realsies\") {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20PresetMinterPauser, ERC20) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "contracts/test/TestERC1155.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\n\ncontract TestERC1155 is ERC1155 {\n    constructor() ERC1155(\"\") {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function mint(\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) public {\n        _mint(to, id, value, data);\n    }\n\n    function mintToSender(\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) public {\n        _mint(msg.sender, id, value, data);\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}