{
  "address": "0x3d40fF88D532721D44594Ca4F062e94556b9Cc9B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "transferNFT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "wrapAirdropReceiver",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf27262f9b9ef491baa772d034688177f485fafeab5684ab555dccd16e838799d",
  "receipt": {
    "to": null,
    "from": "0x214a4bC7C7843918DDbeF45EE47EBEd1688B0ff2",
    "contractAddress": "0x3d40fF88D532721D44594Ca4F062e94556b9Cc9B",
    "transactionIndex": 50,
    "gasUsed": "254084",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9969293dfd6f78f5d0865c1decddea7ca60c141494b9f7017faeb162ea598f5a",
    "transactionHash": "0xf27262f9b9ef491baa772d034688177f485fafeab5684ab555dccd16e838799d",
    "logs": [],
    "blockNumber": 14443194,
    "cumulativeGasUsed": "2902383",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e960dbb71492b307ed8580de393cc147",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"transferNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"wrapAirdropReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides logic to transfer ERC1155 tokens\",\"kind\":\"dev\",\"methods\":{\"transferNFT(address,address,address,uint256)\":{\"details\":\"Transfer the nft to the `recipient`\",\"params\":{\"_nftContract\":\"Address of the nft contract\",\"_nftId\":\"Id of the nft\",\"_recipient\":\"Address that will receive the nft\",\"_sender\":\"Address of the current owner of the nft\"},\"returns\":{\"_0\":\"true if successfully transferred, false otherwise\"}}},\"title\":\"ERC1155Wrapper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nftTypeRegistry/nftTypes/ERC1155Wrapper.sol\":\"ERC1155Wrapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/INftWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title INftTypeRegistry\\n * @author NFTfi\\n * @dev Interface for NFT Wrappers.\\n */\\ninterface INftWrapper {\\n    function transferNFT(\\n        address from,\\n        address to,\\n        address nftContract,\\n        uint256 tokenId\\n    ) external returns (bool);\\n\\n    function isOwner(\\n        address owner,\\n        address nftContract,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n\\n    function wrapAirdropReceiver(\\n        address _recipient,\\n        address _nftContract,\\n        uint256 _nftId,\\n        address _beneficiary\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xab8d7d01ca2b8679af9bc02a2db44192b2153c369bf436185d69e56eb9696b5f\",\"license\":\"BUSL-1.1\"},\"contracts/nftTypeRegistry/nftTypes/ERC1155Wrapper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"../../interfaces/INftWrapper.sol\\\";\\n\\n/**\\n * @title ERC1155Wrapper\\n * @dev Provides logic to transfer ERC1155 tokens\\n */\\ncontract ERC1155Wrapper is INftWrapper {\\n    /**\\n     * @dev Transfer the nft to the `recipient`\\n     *\\n     * @param _sender Address of the current owner of the nft\\n     * @param _recipient Address that will receive the nft\\n     * @param _nftContract Address of the nft contract\\n     * @param _nftId Id of the nft\\n     *\\n     * @return true if successfully transferred, false otherwise\\n     */\\n    function transferNFT(\\n        address _sender,\\n        address _recipient,\\n        address _nftContract,\\n        uint256 _nftId\\n    ) external override returns (bool) {\\n        // Warning:\\n        // Since we permit ERC1155s in their entirety, the given nftId may represent a fungible token (amount > 1),\\n        // in which case they are treated as non-fungible by hard coding the amount to 1.\\n        IERC1155(_nftContract).safeTransferFrom(_sender, _recipient, _nftId, 1, \\\"\\\");\\n        return true;\\n    }\\n\\n    function isOwner(\\n        address _owner,\\n        address _nftContract,\\n        uint256 _tokenId\\n    ) external view override returns (bool) {\\n        return IERC1155(_nftContract).balanceOf(_owner, _tokenId) > 0;\\n    }\\n\\n    function wrapAirdropReceiver(\\n        address _recipient,\\n        address _nftContract,\\n        uint256 _nftId,\\n        address _beneficiary\\n    ) external override returns (bool) {\\n        IERC1155(_nftContract).safeTransferFrom(address(this), _recipient, _nftId, 1, abi.encode(_beneficiary));\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xdf0e8d6b9cffc11900b055582d266eb35529cb6e636c960ac37ce9d0bfd28a07\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506103a2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063b030667114610046578063c7783aaa1461006d578063f370e8c514610080575b600080fd5b61005961005436600461022f565b610093565b604051901515815260200160405180910390f35b61005961007b3660046102b4565b610122565b61005961008e366004610279565b610187565b604051637921219560e11b81526001600160a01b0385811660048301528481166024830152604482018390526001606483015260a06084830152600060a48301819052919084169063f242432a9060c4015b600060405180830381600087803b1580156100ff57600080fd5b505af1158015610113573d6000803e3d6000fd5b50600198975050505050505050565b6000836001600160a01b031663f242432a30878660018760405160200161015891906001600160a01b0391909116815260200190565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016100e5959493929190610318565b604051627eeac760e11b81526001600160a01b03848116600483015260248201839052600091829185169062fdd58e9060440160206040518083038186803b1580156101d257600080fd5b505afa1580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a9190610300565b11949350505050565b80356001600160a01b038116811461022a57600080fd5b919050565b60008060008060808587031215610244578384fd5b61024d85610213565b935061025b60208601610213565b925061026960408601610213565b9396929550929360600135925050565b60008060006060848603121561028d578283fd5b61029684610213565b92506102a460208501610213565b9150604084013590509250925092565b600080600080608085870312156102c9578384fd5b6102d285610213565b93506102e060208601610213565b9250604085013591506102f560608601610213565b905092959194509250565b600060208284031215610311578081fd5b5051919050565b600060018060a01b03808816835260208188168185015286604085015285606085015260a06080850152845191508160a0850152825b8281101561036a5785810182015185820160c00152810161034e565b8281111561037b578360c084870101525b5050601f01601f19169190910160c001969550505050505056fea164736f6c6343000804000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063b030667114610046578063c7783aaa1461006d578063f370e8c514610080575b600080fd5b61005961005436600461022f565b610093565b604051901515815260200160405180910390f35b61005961007b3660046102b4565b610122565b61005961008e366004610279565b610187565b604051637921219560e11b81526001600160a01b0385811660048301528481166024830152604482018390526001606483015260a06084830152600060a48301819052919084169063f242432a9060c4015b600060405180830381600087803b1580156100ff57600080fd5b505af1158015610113573d6000803e3d6000fd5b50600198975050505050505050565b6000836001600160a01b031663f242432a30878660018760405160200161015891906001600160a01b0391909116815260200190565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016100e5959493929190610318565b604051627eeac760e11b81526001600160a01b03848116600483015260248201839052600091829185169062fdd58e9060440160206040518083038186803b1580156101d257600080fd5b505afa1580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a9190610300565b11949350505050565b80356001600160a01b038116811461022a57600080fd5b919050565b60008060008060808587031215610244578384fd5b61024d85610213565b935061025b60208601610213565b925061026960408601610213565b9396929550929360600135925050565b60008060006060848603121561028d578283fd5b61029684610213565b92506102a460208501610213565b9150604084013590509250925092565b600080600080608085870312156102c9578384fd5b6102d285610213565b93506102e060208601610213565b9250604085013591506102f560608601610213565b905092959194509250565b600060208284031215610311578081fd5b5051919050565b600060018060a01b03808816835260208188168185015286604085015285606085015260a06080850152845191508160a0850152825b8281101561036a5785810182015185820160c00152810161034e565b8281111561037b578360c084870101525b5050601f01601f19169190910160c001969550505050505056fea164736f6c6343000804000a",
  "devdoc": {
    "details": "Provides logic to transfer ERC1155 tokens",
    "kind": "dev",
    "methods": {
      "transferNFT(address,address,address,uint256)": {
        "details": "Transfer the nft to the `recipient`",
        "params": {
          "_nftContract": "Address of the nft contract",
          "_nftId": "Id of the nft",
          "_recipient": "Address that will receive the nft",
          "_sender": "Address of the current owner of the nft"
        },
        "returns": {
          "_0": "true if successfully transferred, false otherwise"
        }
      }
    },
    "title": "ERC1155Wrapper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}