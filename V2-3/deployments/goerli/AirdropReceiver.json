{
  "address": "0x93501DbeDBfA2ff1A3EA08D0Ca621927974A8d8B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftfiHub",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftCollateralContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftCollateralId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NftUnwrapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftCollateralContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftCollateralId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NftWrapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "drainERC1155Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "drainERC20Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "drainERC721Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "contract INftfiHub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftTransferWrapper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "pullAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "unwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftCollateralContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftCollateralId",
          "type": "uint256"
        }
      ],
      "name": "wrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNft",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNftId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5aac2c80b8d0007ea29b3d473d1b4a9e15b3527880187a1a40b541863db770d0",
  "receipt": {
    "to": null,
    "from": "0x02e037F56728E947e92Af2c05baF7FeF387Ddd06",
    "contractAddress": "0x93501DbeDBfA2ff1A3EA08D0Ca621927974A8d8B",
    "transactionIndex": 28,
    "gasUsed": "3086416",
    "logsBloom": "0x
    "blockHash": "0x860575fbdd1daec96c4798c0286c696949ac05e72d0f3e30d4ae41ac370e52ab",
    "transactionHash": "0x5aac2c80b8d0007ea29b3d473d1b4a9e15b3527880187a1a40b541863db770d0",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 7721250,
        "transactionHash": "0x5aac2c80b8d0007ea29b3d473d1b4a9e15b3527880187a1a40b541863db770d0",
        "address": "0x93501DbeDBfA2ff1A3EA08D0Ca621927974A8d8B",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000002e037f56728e947e92af2c05baf7fef387ddd06",
          "0x6742a8b8f8161f96c7cd1374615e31296086482e6f00f595400eedf4a231bdb1"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0x860575fbdd1daec96c4798c0286c696949ac05e72d0f3e30d4ae41ac370e52ab"
      }
    ],
    "blockNumber": 7721250,
    "cumulativeGasUsed": "6486295",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAbbe8e4C7cd7428E667400114fdfDD8B26Ed5138"
  ],
  "numDeployments": 1,
  "solcInputHash": "32dd1857130027c4619df8c447073dac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftfiHub\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NftUnwrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NftWrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"drainERC1155Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"drainERC20Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"drainERC721Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract INftfiHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftTransferWrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"pullAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftCollateralContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftCollateralId\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNftId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"NFTfi\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"drainERC1155Airdrop(address,uint256,address)\":{\"params\":{\"receiver\":\"- receiver of the token\",\"tokenAddress\":\"- address of the token contract for the token to be sent out\",\"tokenId\":\"- id token to be sent out\"}},\"drainERC20Airdrop(address,address)\":{\"params\":{\"receiver\":\"- receiver of the token\",\"tokenAddress\":\"- address of the token contract for the token to be sent out\"}},\"drainERC721Airdrop(address,uint256,address)\":{\"params\":{\"receiver\":\"- receiver of the token\",\"tokenAddress\":\"- address of the token contract for the token to be sent out\",\"tokenId\":\"- id token to be sent out\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"AirdropReceiver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"drainERC1155Airdrop(address,uint256,address)\":{\"notice\":\"used by the owner account to be able to drain ERC1155 tokens received as airdrops for the locked  collateral NFT-s\"},\"drainERC20Airdrop(address,address)\":{\"notice\":\"used by the owner account to be able to drain ERC20 tokens received as airdrops for the locked  collateral NFT-s\"},\"drainERC721Airdrop(address,uint256,address)\":{\"notice\":\"used by the owner account to be able to drain ERC721 tokens received as airdrops for the locked  collateral NFT-s\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/airdrop/AirdropReceiver.sol\":\"AirdropReceiver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/airdrop/AirdropReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../interfaces/INftfiHub.sol\\\";\\nimport \\\"../interfaces/IPermittedNFTs.sol\\\";\\nimport \\\"../interfaces/IPermittedAirdrops.sol\\\";\\nimport \\\"../interfaces/INftWrapper.sol\\\";\\nimport \\\"../utils/ContractKeys.sol\\\";\\n\\n/**\\n * @title AirdropReceiver\\n * @author NFTfi\\n * @dev\\n */\\ncontract AirdropReceiver is ERC721Enumerable, ERC721Holder, ERC1155Holder, Initializable, ReentrancyGuard {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    INftfiHub public immutable hub;\\n\\n    // in the context of this contract the name of this is a bit confusing, this \\\"wrapper\\\" is the one that\\n    // knows how to transfer a type of nft\\n    address public nftTransferWrapper;\\n    address public beneficiary;\\n    address public wrappedNft;\\n    uint256 public wrappedNftId;\\n\\n    bool private wrapping_;\\n\\n    event Initialized(uint256 indexed tokenId);\\n\\n    event NftWrapped(\\n        address indexed nftCollateralContract,\\n        uint256 indexed nftCollateralId,\\n        address indexed from,\\n        address beneficiary,\\n        address owner\\n    );\\n    event NftUnwrapped(\\n        address indexed nftCollateralContract,\\n        uint256 indexed nftCollateralId,\\n        address indexed to,\\n        address owner\\n    );\\n\\n    modifier onlyOwner() {\\n        require(ownerOf(getTokenId()) == msg.sender, \\\"Only owner\\\");\\n\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrBeneficiary() {\\n        require(ownerOf(getTokenId()) == msg.sender || msg.sender == beneficiary, \\\"Only owner or beneficiary\\\");\\n\\n        _;\\n    }\\n\\n    constructor(address _nftfiHub) ERC721(\\\"\\\", \\\"\\\") {\\n        hub = INftfiHub(_nftfiHub);\\n\\n        // grant ownership of implementation to deployer, this blocks initialization of this implementation\\n        _safeMint(msg.sender, getTokenId());\\n    }\\n\\n    function getTokenId() public view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(address(this))));\\n    }\\n\\n    function initialize(address _to) external initializer nonReentrant returns (uint256) {\\n        uint256 tokenId = getTokenId();\\n        _safeMint(_to, tokenId);\\n\\n        emit Initialized(tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    function wrap(\\n        address _from,\\n        address _beneficiary,\\n        address _nftCollateralContract,\\n        uint256 _nftCollateralId\\n    ) external onlyOwner {\\n        require(wrappedNft == address(0), \\\"already wrapping\\\");\\n        require(_from != address(0), \\\"from is zero address\\\");\\n        require(_beneficiary != address(0), \\\"beneficiary is zero address\\\");\\n        require(_nftCollateralContract != address(0), \\\"nftCollateralContract is zero address\\\");\\n\\n        wrapping_ = true;\\n\\n        nftTransferWrapper = IPermittedNFTs(hub.getContract(ContractKeys.PERMITTED_NFTS)).getNFTWrapper(\\n            _nftCollateralContract\\n        );\\n\\n        _transferNFT(nftTransferWrapper, _from, address(this), _nftCollateralContract, _nftCollateralId);\\n\\n        beneficiary = _beneficiary;\\n        wrappedNft = _nftCollateralContract;\\n        wrappedNftId = _nftCollateralId;\\n\\n        emit NftWrapped(_nftCollateralContract, _nftCollateralId, _from, _beneficiary, msg.sender);\\n\\n        wrapping_ = false;\\n    }\\n\\n    function unwrap(address _receiver) external onlyOwner {\\n        require(wrappedNft != address(0), \\\"not wrapping\\\");\\n\\n        _transferNFT(nftTransferWrapper, address(this), _receiver, wrappedNft, wrappedNftId);\\n\\n        emit NftUnwrapped(wrappedNft, wrappedNftId, _receiver, msg.sender);\\n\\n        beneficiary = address(0);\\n        wrappedNft = address(0);\\n        wrappedNftId = 0;\\n        nftTransferWrapper = address(0);\\n    }\\n\\n    function pullAirdrop(address _target, bytes calldata _data) external nonReentrant onlyOwnerOrBeneficiary {\\n        require(\\n            IPermittedAirdrops(hub.getContract(ContractKeys.PERMITTED_AIRDROPS)).isValidAirdrop(\\n                abi.encode(_target, _getSelector(_data))\\n            ),\\n            \\\"Invalid Airdrop\\\"\\n        );\\n\\n        _target.functionCall(_data);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 _interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Enumerable, ERC1155Receiver)\\n        returns (bool)\\n    {\\n        return _interfaceId == type(IERC721Receiver).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC20 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param tokenAddress - address of the token contract for the token to be sent out\\n     * @param receiver - receiver of the token\\n     */\\n    function drainERC20Airdrop(address tokenAddress, address receiver) external onlyOwner {\\n        IERC20 tokenContract = IERC20(tokenAddress);\\n        uint256 amount = tokenContract.balanceOf(address(this));\\n        require(amount > 0, \\\"no tokens owned\\\");\\n        tokenContract.safeTransfer(receiver, amount);\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC721 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param tokenAddress - address of the token contract for the token to be sent out\\n     * @param tokenId - id token to be sent out\\n     * @param receiver - receiver of the token\\n     */\\n    function drainERC721Airdrop(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address receiver\\n    ) external onlyOwner {\\n        require(wrappedNft != tokenAddress && tokenId != wrappedNftId, \\\"token is wrapped\\\");\\n        IERC721 tokenContract = IERC721(tokenAddress);\\n        tokenContract.safeTransferFrom(address(this), receiver, tokenId);\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC1155 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param tokenAddress - address of the token contract for the token to be sent out\\n     * @param tokenId - id token to be sent out\\n     * @param receiver - receiver of the token\\n     */\\n    function drainERC1155Airdrop(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address receiver\\n    ) external onlyOwner {\\n        require(wrappedNft != tokenAddress && tokenId != wrappedNftId, \\\"token is wrapped\\\");\\n        IERC1155 tokenContract = IERC1155(tokenAddress);\\n        uint256 amount = tokenContract.balanceOf(address(this), tokenId);\\n        require(amount > 0, \\\"no nfts owned\\\");\\n        tokenContract.safeTransferFrom(address(this), receiver, tokenId, amount, \\\"\\\");\\n    }\\n\\n    function _transferNFT(\\n        address _nftTransferWrapper,\\n        address _sender,\\n        address _recipient,\\n        address _nftCollateralContract,\\n        uint256 _nftCollateralId\\n    ) internal {\\n        _nftTransferWrapper.functionDelegateCall(\\n            abi.encodeWithSelector(\\n                INftWrapper(_nftTransferWrapper).transferNFT.selector,\\n                _sender,\\n                _recipient,\\n                _nftCollateralContract,\\n                _nftCollateralId\\n            ),\\n            \\\"NFT was not successfully transferred\\\"\\n        );\\n    }\\n\\n    function _getSelector(bytes memory _data) internal pure returns (bytes4 selector) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            selector := mload(add(_data, 32))\\n        }\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) public virtual override returns (bytes4) {\\n        // owner can only send with the intention of wrapping\\n        if (ownerOf(getTokenId()) == _from && !wrapping_) {\\n            require(wrappedNft == address(0), \\\"already wrapping\\\");\\n\\n            address _beneficiary = abi.decode(_data, (address));\\n            require(_beneficiary != address(0), \\\"beneficiary is zero address\\\");\\n\\n            // sender is the nftCollateral contract\\n            _receiveAndWrap(_from, _beneficiary, msg.sender, _tokenId);\\n        }\\n        // otherwise it is considered an airdrop\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address _from,\\n        uint256 _id,\\n        uint256,\\n        bytes calldata _data\\n    ) public virtual override returns (bytes4) {\\n        // owner can only send with the intention of wrapping\\n        if (ownerOf(getTokenId()) == _from && !wrapping_) {\\n            require(wrappedNft == address(0), \\\"already wrapping\\\");\\n\\n            address _beneficiary = abi.decode(_data, (address));\\n            require(_beneficiary != address(0), \\\"beneficiary is zero address\\\");\\n\\n            // sender is the nftCollateral contract\\n            _receiveAndWrap(_from, _beneficiary, msg.sender, _id);\\n        }\\n        // otherwise it is considered an airdrop\\n\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata,\\n        bytes calldata _data\\n    ) public virtual override returns (bytes4) {\\n        // owner can only send with the intention of wrapping\\n        if (ownerOf(getTokenId()) == _from && !wrapping_) {\\n            require(wrappedNft == address(0), \\\"already wrapping\\\");\\n            require(_ids.length > 1, \\\"only 0 allowed\\\");\\n\\n            address _beneficiary = abi.decode(_data, (address));\\n            require(_beneficiary != address(0), \\\"beneficiary is zero address\\\");\\n\\n            // sender is the nftCollateral contract\\n            _receiveAndWrap(_from, _beneficiary, msg.sender, _ids[0]);\\n        }\\n        // otherwise it is considered an airdrop\\n\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    function _receiveAndWrap(\\n        address _from,\\n        address _beneficiary,\\n        address _nftCollateralContract,\\n        uint256 _nftCollateralId\\n    ) internal {\\n        nftTransferWrapper = IPermittedNFTs(hub.getContract(ContractKeys.PERMITTED_NFTS)).getNFTWrapper(\\n            _nftCollateralContract\\n        );\\n\\n        require(nftTransferWrapper != address(0), \\\"bft not permitted\\\");\\n\\n        beneficiary = _beneficiary;\\n        wrappedNft = _nftCollateralContract;\\n        wrappedNftId = _nftCollateralId;\\n\\n        emit NftWrapped(_nftCollateralContract, _nftCollateralId, _from, _beneficiary, _from);\\n    }\\n}\\n\",\"keccak256\":\"0xd90450a3ad7833a9f72f56d64160234fb7365e51f9549ecac32ee50bcbe66528\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INftWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title INftTypeRegistry\\n * @author NFTfi\\n * @dev Interface for NFT Wrappers.\\n */\\ninterface INftWrapper {\\n    function transferNFT(\\n        address from,\\n        address to,\\n        address nftContract,\\n        uint256 tokenId\\n    ) external returns (bool);\\n\\n    function isOwner(\\n        address owner,\\n        address nftContract,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n\\n    function wrapAirdropReceiver(\\n        address _recipient,\\n        address _nftContract,\\n        uint256 _nftId,\\n        address _beneficiary\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xab8d7d01ca2b8679af9bc02a2db44192b2153c369bf436185d69e56eb9696b5f\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INftfiHub.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title INftfiHub\\n * @author NFTfi\\n * @dev NftfiHub interface\\n */\\ninterface INftfiHub {\\n    function setContract(string calldata _contractKey, address _contractAddress) external;\\n\\n    function getContract(bytes32 _contractKey) external view returns (address);\\n}\\n\",\"keccak256\":\"0x80259ebf45729166a8524b313741b6ea2acfe8ac9dc15243f018a08cc2b14240\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPermittedAirdrops.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IPermittedAirdrops {\\n    function isValidAirdrop(bytes memory _addressSig) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab18ea6bdec12305dde6390fbbae53013120d4ebed01194eef5c5ce1fe832741\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPermittedNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IPermittedNFTs {\\n    function setNFTPermit(address _nftContract, string memory _nftType) external;\\n\\n    function getNFTPermit(address _nftContract) external view returns (bytes32);\\n\\n    function getNFTWrapper(address _nftContract) external view returns (address);\\n}\\n\",\"keccak256\":\"0x84b4cf35a3ea9b4ffb1711d4268f5554c310d13788d88a7093991b5a74e68a50\",\"license\":\"BUSL-1.1\"},\"contracts/utils/ContractKeys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ContractKeys\\n * @author NFTfi\\n * @dev Common library for contract keys\\n */\\nlibrary ContractKeys {\\n    bytes32 public constant PERMITTED_ERC20S = bytes32(\\\"PERMITTED_ERC20S\\\");\\n    bytes32 public constant PERMITTED_NFTS = bytes32(\\\"PERMITTED_NFTS\\\");\\n    bytes32 public constant PERMITTED_PARTNERS = bytes32(\\\"PERMITTED_PARTNERS\\\");\\n    bytes32 public constant NFT_TYPE_REGISTRY = bytes32(\\\"NFT_TYPE_REGISTRY\\\");\\n    bytes32 public constant LOAN_REGISTRY = bytes32(\\\"LOAN_REGISTRY\\\");\\n    bytes32 public constant PERMITTED_SNFT_RECEIVER = bytes32(\\\"PERMITTED_SNFT_RECEIVER\\\");\\n    bytes32 public constant PERMITTED_BUNDLE_ERC20S = bytes32(\\\"PERMITTED_BUNDLE_ERC20S\\\");\\n    bytes32 public constant PERMITTED_AIRDROPS = bytes32(\\\"PERMITTED_AIRDROPS\\\");\\n    bytes32 public constant AIRDROP_RECEIVER = bytes32(\\\"AIRDROP_RECEIVER\\\");\\n    bytes32 public constant AIRDROP_FACTORY = bytes32(\\\"AIRDROP_FACTORY\\\");\\n    bytes32 public constant AIRDROP_FLASH_LOAN = bytes32(\\\"AIRDROP_FLASH_LOAN\\\");\\n    bytes32 public constant NFTFI_BUNDLER = bytes32(\\\"NFTFI_BUNDLER\\\");\\n\\n    string public constant AIRDROP_WRAPPER_STRING = \\\"AirdropWrapper\\\";\\n\\n    /**\\n     * @notice Returns the bytes32 representation of a string\\n     * @param _key the string key\\n     * @return id bytes32 representation\\n     */\\n    function getIdFromStringKey(string memory _key) external pure returns (bytes32 id) {\\n        require(bytes(_key).length <= 32, \\\"invalid key\\\");\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := mload(add(_key, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2fa7e704ddc4095a739ac5dca2cd49cb261f7b881778038398e9e7d5063c1a25\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162003d7138038062003d7183398101604081905262000034916200083a565b604080516020808201808452600080845284519283019094528382528251929391926200006392919062000794565b5080516200007990600190602084019062000794565b50506001600b55506001600160601b0319606082901b16608052620000dc33620000d66040516001600160601b03193060601b1660208201526000906034016040516020818303038152906040528051906020012060001c905090565b620000e3565b5062000995565b620001058282604051806020016040528060008152506200010960201b60201c565b5050565b62000115838362000185565b620001246000848484620002db565b620001805760405162461bcd60e51b8152602060048201526032602482015260008051602062003d5183398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084015b60405180910390fd5b505050565b6001600160a01b038216620001dd5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640162000177565b6000818152600260205260409020546001600160a01b031615620002445760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640162000177565b620002526000838362000444565b6001600160a01b03821660009081526003602052604081208054600192906200027d9084906200090d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000620002fc846001600160a01b03166200052060201b620019141760201c565b156200043857604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906200033690339089908890889060040162000894565b602060405180830381600087803b1580156200035157600080fd5b505af192505050801562000384575060408051601f3d908101601f1916820190925262000381918101906200086a565b60015b6200041d573d808015620003b5576040519150601f19603f3d011682016040523d82523d6000602084013e620003ba565b606091505b508051620004155760405162461bcd60e51b8152602060048201526032602482015260008051602062003d5183398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606482015260840162000177565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506200043c565b5060015b949350505050565b6200045c8383836200018060201b620007f81760201c565b6001600160a01b038316620004ba57620004b481600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b620004e0565b816001600160a01b0316836001600160a01b031614620004e057620004e083826200052f565b6001600160a01b038216620004fa576200018081620005dc565b826001600160a01b0316826001600160a01b0316146200018057620001808282620006ba565b6001600160a01b03163b151590565b6000600162000549846200070b60201b62000e541760201c565b62000555919062000928565b600083815260076020526040902054909150808214620005a9576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090620005f09060019062000928565b600083815260096020526040812054600880549394509092849081106200062757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600883815481106200065757634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806200069e57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000620006d2836200070b60201b62000e541760201c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60006001600160a01b038216620007785760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840162000177565b506001600160a01b031660009081526003602052604090205490565b828054620007a29062000942565b90600052602060002090601f016020900481019282620007c6576000855562000811565b82601f10620007e157805160ff191683800117855562000811565b8280016001018555821562000811579182015b8281111562000811578251825591602001919060010190620007f4565b506200081f92915062000823565b5090565b5b808211156200081f576000815560010162000824565b6000602082840312156200084c578081fd5b81516001600160a01b038116811462000863578182fd5b9392505050565b6000602082840312156200087c578081fd5b81516001600160e01b03198116811462000863578182fd5b600060018060a01b0380871683526020818716818501528560408501526080606085015284519150816080850152825b82811015620008e25785810182015185820160a001528101620008c4565b82811115620008f4578360a084870101525b5050601f01601f19169190910160a00195945050505050565b600082198211156200092357620009236200097f565b500190565b6000828210156200093d576200093d6200097f565b500390565b600181811c908216806200095757607f821691505b602082108114156200097957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60805160601c613388620009c9600039600081816102d8015281816108c20152818161116f0152611a9401526133886000f3fe608060405234801561001057600080fd5b50600436106101af5760003560e01c80635163a1c3116100ef578063ac4e35ea11610092578063ac4e35ea146103b6578063b88d4fde146103c9578063bb7132a4146103dc578063bc197c81146103ef578063c4d66de814610402578063c87b56dd14610415578063e985e9c514610428578063f23a6e611461043b57600080fd5b80635163a1c3146103335780636352211e1461034657806370a082311461035957806375f26e631461036c5780637afe6e311461037f57806395d89b4114610388578063a1571a5714610390578063a22cb465146103a357600080fd5b8063150b7a0211610157578063150b7a021461027957806318160ddd146102a557806323b872dd146102ad5780632f745c59146102c0578063365a86fc146102d357806338af3eed146102fa57806342842e0e1461030d5780634f6ccce71461032057600080fd5b8062f73663146101b4578063010a38f5146101dd57806301ffc9a7146101f357806305b406cf1461021657806306fdde031461022b578063081812fc14610240578063095ea7b31461025357806312fc775814610266575b600080fd5b600e546101c7906001600160a01b031681565b6040516101d49190613023565b60405180910390f35b6101e561044e565b6040519081526020016101d4565b610206610201366004612f44565b61048d565b60405190151581526020016101d4565b610229610224366004612afa565b6104b8565b005b6102336105d2565b6040516101d4919061306a565b6101c761024e366004612f7c565b610664565b610229610261366004612ebc565b6106ec565b610229610274366004612e6a565b6107fd565b61028c610287366004612c7c565b610ac7565b6040516001600160e01b031990911681526020016101d4565b6008546101e5565b6102296102bb366004612c3c565b610b7b565b6101e56102ce366004612ebc565b610bac565b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b600d546101c7906001600160a01b031681565b61022961031b366004612c3c565b610c42565b6101e561032e366004612f7c565b610c5d565b610229610341366004612ee7565b610cfe565b6101c7610354366004612f7c565b610ddd565b6101e5610367366004612ac2565b610e54565b61022961037a366004612ac2565b610edb565b6101e5600f5481565b610233610ff3565b61022961039e366004612b32565b611002565b6102296103b1366004612e3d565b611311565b6102296103c4366004612ee7565b611320565b6102296103d7366004612cec565b6114d5565b600c546101c7906001600160a01b031681565b61028c6103fd366004612b82565b611507565b6101e5610410366004612ac2565b611626565b610233610423366004612f7c565b611759565b610206610436366004612afa565b611831565b61028c610449366004612dc4565b61185f565b6040516bffffffffffffffffffffffff193060601b1660208201526000906034016040516020818303038152906040528051906020012060001c905090565b60006001600160e01b03198216630a85bd0160e11b14806104b257506104b282611923565b92915050565b336104c461035461044e565b6001600160a01b0316146104f35760405162461bcd60e51b81526004016104ea9061307d565b60405180910390fd5b6040516370a0823160e01b815282906000906001600160a01b038316906370a0823190610524903090600401613023565b60206040518083038186803b15801561053c57600080fd5b505afa158015610550573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105749190612f94565b9050600081116105b85760405162461bcd60e51b815260206004820152600f60248201526e1b9bc81d1bdad95b9cc81bdddb9959608a1b60448201526064016104ea565b6105cc6001600160a01b0383168483611948565b50505050565b6060600080546105e190613275565b80601f016020809104026020016040519081016040528092919081815260200182805461060d90613275565b801561065a5780601f1061062f5761010080835404028352916020019161065a565b820191906000526020600020905b81548152906001019060200180831161063d57829003601f168201915b5050505050905090565b600061066f8261199a565b6106d05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104ea565b506000908152600460205260409020546001600160a01b031690565b60006106f782610ddd565b9050806001600160a01b0316836001600160a01b031614156107655760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104ea565b336001600160a01b038216148061078157506107818133611831565b6107ee5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016104ea565b6107f883836119b7565b505050565b6002600b5414156108205760405162461bcd60e51b81526004016104ea906131cf565b6002600b553361083161035461044e565b6001600160a01b031614806108505750600d546001600160a01b031633145b6108985760405162461bcd60e51b81526020600482015260196024820152784f6e6c79206f776e6572206f722062656e656669636961727960381b60448201526064016104ea565b604051631c2d8fb360e31b8152715045524d49545445445f41495244524f505360701b60048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d989060240160206040518083038186803b15801561090c57600080fd5b505afa158015610920573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109449190612ade565b6001600160a01b031663bcef622e8461099285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a2592505050565b604080516001600160a01b0390931660208401526001600160e01b0319909116908201526060016040516020818303038152906040526040518263ffffffff1660e01b81526004016109e4919061306a565b60206040518083038186803b1580156109fc57600080fd5b505afa158015610a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a349190612f28565b610a725760405162461bcd60e51b815260206004820152600f60248201526e0496e76616c69642041697264726f7608c1b60448201526064016104ea565b610abc82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506001600160a01b03871692915050611a2c565b50506001600b555050565b6000846001600160a01b0316610ade61035461044e565b6001600160a01b0316148015610af7575060105460ff16155b15610b6957600e546001600160a01b031615610b255760405162461bcd60e51b81526004016104ea90613154565b6000610b3383850185612ac2565b90506001600160a01b038116610b5b5760405162461bcd60e51b81526004016104ea906130f3565b610b6786823388611a6e565b505b50630a85bd0160e11b95945050505050565b610b853382611c68565b610ba15760405162461bcd60e51b81526004016104ea9061317e565b6107f8838383611d32565b6000610bb783610e54565b8210610c195760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016104ea565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6107f8838383604051806020016040528060008152506114d5565b6000610c6860085490565b8210610ccb5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016104ea565b60088281548110610cec57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b33610d0a61035461044e565b6001600160a01b031614610d305760405162461bcd60e51b81526004016104ea9061307d565b600e546001600160a01b03848116911614801590610d505750600f548214155b610d6c5760405162461bcd60e51b81526004016104ea9061312a565b604051632142170760e11b81523060048201526001600160a01b038281166024830152604482018490528491908216906342842e0e90606401600060405180830381600087803b158015610dbf57600080fd5b505af1158015610dd3573d6000803e3d6000fd5b5050505050505050565b6000818152600260205260408120546001600160a01b0316806104b25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016104ea565b60006001600160a01b038216610ebf5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016104ea565b506001600160a01b031660009081526003602052604090205490565b33610ee761035461044e565b6001600160a01b031614610f0d5760405162461bcd60e51b81526004016104ea9061307d565b600e546001600160a01b0316610f545760405162461bcd60e51b815260206004820152600c60248201526b6e6f74207772617070696e6760a01b60448201526064016104ea565b600c54600e54600f54610f7a926001600160a01b03908116923092869290911690611ed9565b600f54600e546040516001600160a01b03808516939216907fec4b1d2db955afdfa12c9cb9146cdcc2d05d33b366922acf6551273caf8e441890610fbf903390613023565b60405180910390a450600d80546001600160a01b0319908116909155600e8054821690556000600f55600c80549091169055565b6060600180546105e190613275565b3361100e61035461044e565b6001600160a01b0316146110345760405162461bcd60e51b81526004016104ea9061307d565b600e546001600160a01b03161561105d5760405162461bcd60e51b81526004016104ea90613154565b6001600160a01b0384166110aa5760405162461bcd60e51b815260206004820152601460248201527366726f6d206973207a65726f206164647265737360601b60448201526064016104ea565b6001600160a01b0383166110d05760405162461bcd60e51b81526004016104ea906130f3565b6001600160a01b0382166111345760405162461bcd60e51b815260206004820152602560248201527f6e6674436f6c6c61746572616c436f6e7472616374206973207a65726f206164604482015264647265737360d81b60648201526084016104ea565b6010805460ff19166001179055604051631c2d8fb360e31b81526d5045524d49545445445f4e46545360901b60048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e16c7d989060240160206040518083038186803b1580156111b157600080fd5b505afa1580156111c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e99190612ade565b6001600160a01b031663b8c8aff8836040518263ffffffff1660e01b81526004016112149190613023565b60206040518083038186803b15801561122c57600080fd5b505afa158015611240573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112649190612ade565b600c80546001600160a01b0319166001600160a01b039290921691821790556112909085308585611ed9565b600d80546001600160a01b038581166001600160a01b03199283168117909355600e8054868316931683179055600f84905560408051938452336020850152908716928492917fe3b36666ca4efda9647687b0c5638041770ba18816524b621b4e8995da29e1e4910160405180910390a450506010805460ff191690555050565b61131c338383611f67565b5050565b3361132c61035461044e565b6001600160a01b0316146113525760405162461bcd60e51b81526004016104ea9061307d565b600e546001600160a01b038481169116148015906113725750600f548214155b61138e5760405162461bcd60e51b81526004016104ea9061312a565b604051627eeac760e11b81523060048201526024810183905283906000906001600160a01b0383169062fdd58e9060440160206040518083038186803b1580156113d757600080fd5b505afa1580156113eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140f9190612f94565b9050600081116114515760405162461bcd60e51b815260206004820152600d60248201526c1b9bc81b999d1cc81bdddb9959609a1b60448201526064016104ea565b604051637921219560e11b81523060048201526001600160a01b038481166024830152604482018690526064820183905260a06084830152600060a483015283169063f242432a9060c401600060405180830381600087803b1580156114b657600080fd5b505af11580156114ca573d6000803e3d6000fd5b505050505050505050565b6114df3383611c68565b6114fb5760405162461bcd60e51b81526004016104ea9061317e565b6105cc84848484612032565b6000876001600160a01b031661151e61035461044e565b6001600160a01b0316148015611537575060105460ff16155b1561161157600e546001600160a01b0316156115655760405162461bcd60e51b81526004016104ea90613154565b600186116115a65760405162461bcd60e51b815260206004820152600e60248201526d1bdb9b1e480c08185b1b1bddd95960921b60448201526064016104ea565b60006115b483850185612ac2565b90506001600160a01b0381166115dc5760405162461bcd60e51b81526004016104ea906130f3565b61160f8982338b8b600081811061160357634e487b7160e01b600052603260045260246000fd5b90506020020135611a6e565b505b5063bc197c8160e01b98975050505050505050565b600a54600090610100900460ff1661164457600a5460ff161561164c565b61164c612065565b6116af5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104ea565b600a54610100900460ff161580156116d157600a805461ffff19166101011790555b6002600b5414156116f45760405162461bcd60e51b81526004016104ea906131cf565b6002600b55600061170361044e565b905061170f8482612076565b60405181907fbe9b076dc5b65990cca9dd9d7366682482e7817a6f6bc7f4faf4dc32af497f3290600090a291506001600b55801561175357600a805461ff00191690555b50919050565b60606117648261199a565b6117c85760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016104ea565b60006117df60408051602081019091526000815290565b905060008151116117ff576040518060200160405280600081525061182a565b8061180984612090565b60405160200161181a929190612ff4565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000856001600160a01b031661187661035461044e565b6001600160a01b031614801561188f575060105460ff16155b1561190157600e546001600160a01b0316156118bd5760405162461bcd60e51b81526004016104ea90613154565b60006118cb83850185612ac2565b90506001600160a01b0381166118f35760405162461bcd60e51b81526004016104ea906130f3565b6118ff87823389611a6e565b505b5063f23a6e6160e01b9695505050505050565b6001600160a01b03163b151590565b60006001600160e01b03198216630271189760e51b14806104b257506104b2826121a9565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526107f89084906121ce565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119ec82610ddd565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6020015190565b606061182a83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506122a0565b604051631c2d8fb360e31b81526d5045524d49545445445f4e46545360901b60048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d989060240160206040518083038186803b158015611ade57600080fd5b505afa158015611af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b169190612ade565b6001600160a01b031663b8c8aff8836040518263ffffffff1660e01b8152600401611b419190613023565b60206040518083038186803b158015611b5957600080fd5b505afa158015611b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b919190612ade565b600c80546001600160a01b0319166001600160a01b03929092169182179055611bf05760405162461bcd60e51b815260206004820152601160248201527018999d081b9bdd081c195c9b5a5d1d1959607a1b60448201526064016104ea565b600d80546001600160a01b038581166001600160a01b03199283168117909355600e8054868316931683179055600f8490556040805193845290871660208401819052928492917fe3b36666ca4efda9647687b0c5638041770ba18816524b621b4e8995da29e1e4910160405180910390a450505050565b6000611c738261199a565b611cd45760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104ea565b6000611cdf83610ddd565b9050806001600160a01b0316846001600160a01b03161480611d1a5750836001600160a01b0316611d0f84610664565b6001600160a01b0316145b80611d2a5750611d2a8185611831565b949350505050565b826001600160a01b0316611d4582610ddd565b6001600160a01b031614611da95760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016104ea565b6001600160a01b038216611e0b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104ea565b611e168383836122af565b611e216000826119b7565b6001600160a01b0383166000908152600360205260408120805460019290611e4a908490613232565b90915550506001600160a01b0382166000908152600360205260408120805460019290611e78908490613206565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b604080516001600160a01b038681166024808401919091528682166044840152908516606483015260848083018590528351808403909101815260a49092018352602080830180516001600160e01b031663b030667160e01b179052835160608101909452818452611f5f939190613358908301396001600160a01b0388169190612367565b505050505050565b816001600160a01b0316836001600160a01b03161415611fc55760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016104ea565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61203d848484611d32565b61204984848484612442565b6105cc5760405162461bcd60e51b81526004016104ea906130a1565b600061207030611914565b15905090565b61131c828260405180602001604052806000815250612556565b6060816120b45750506040805180820190915260018152600360fc1b602082015290565b8160005b81156120de57806120c8816132aa565b91506120d79050600a8361321e565b91506120b8565b6000816001600160401b0381111561210657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612130576020820181803683370190505b5090505b8415611d2a57612145600183613232565b9150612152600a866132c5565b61215d906030613206565b60f81b81838151811061218057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506121a2600a8661321e565b9450612134565b60006001600160e01b0319821663780e9d6360e01b14806104b257506104b282612589565b6000612223826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122a09092919063ffffffff16565b8051909150156107f857808060200190518101906122419190612f28565b6107f85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104ea565b6060611d2a84846000856125d9565b6001600160a01b03831661230a5761230581600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61232d565b816001600160a01b0316836001600160a01b03161461232d5761232d8382612708565b6001600160a01b038216612344576107f8816127a5565b826001600160a01b0316826001600160a01b0316146107f8576107f8828261287e565b606061237284611914565b6123cd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016104ea565b600080856001600160a01b0316856040516123e89190612fd8565b600060405180830381855af49150503d8060008114612423576040519150601f19603f3d011682016040523d82523d6000602084013e612428565b606091505b50915091506124388282866128c2565b9695505050505050565b6000612456846001600160a01b0316611914565b1561254b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061248d903390899088908890600401613037565b602060405180830381600087803b1580156124a757600080fd5b505af19250505080156124d7575060408051601f3d908101601f191682019092526124d491810190612f60565b60015b612531573d808015612505576040519150601f19603f3d011682016040523d82523d6000602084013e61250a565b606091505b5080516125295760405162461bcd60e51b81526004016104ea906130a1565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d2a565b506001949350505050565b61256083836128fb565b61256d6000848484612442565b6107f85760405162461bcd60e51b81526004016104ea906130a1565b60006001600160e01b031982166380ac58cd60e01b14806125ba57506001600160e01b03198216635b5e139f60e01b145b806104b257506301ffc9a760e01b6001600160e01b03198316146104b2565b60608247101561263a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104ea565b61264385611914565b61268f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104ea565b600080866001600160a01b031685876040516126ab9190612fd8565b60006040518083038185875af1925050503d80600081146126e8576040519150601f19603f3d011682016040523d82523d6000602084013e6126ed565b606091505b50915091506126fd8282866128c2565b979650505050505050565b6000600161271584610e54565b61271f9190613232565b600083815260076020526040902054909150808214612772576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906127b790600190613232565b600083815260096020526040812054600880549394509092849081106127ed57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061281c57634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061286257634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061288983610e54565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b606083156128d157508161182a565b8251156128e15782518084602001fd5b8160405162461bcd60e51b81526004016104ea919061306a565b6001600160a01b0382166129515760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104ea565b61295a8161199a565b156129a75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104ea565b6129b3600083836122af565b6001600160a01b03821660009081526003602052604081208054600192906129dc908490613206565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008083601f840112612a4b578182fd5b5081356001600160401b03811115612a61578182fd5b6020830191508360208260051b8501011115612a7c57600080fd5b9250929050565b60008083601f840112612a94578182fd5b5081356001600160401b03811115612aaa578182fd5b602083019150836020828501011115612a7c57600080fd5b600060208284031215612ad3578081fd5b813561182a8161331b565b600060208284031215612aef578081fd5b815161182a8161331b565b60008060408385031215612b0c578081fd5b8235612b178161331b565b91506020830135612b278161331b565b809150509250929050565b60008060008060808587031215612b47578182fd5b8435612b528161331b565b93506020850135612b628161331b565b92506040850135612b728161331b565b9396929550929360600135925050565b60008060008060008060008060a0898b031215612b9d578384fd5b8835612ba88161331b565b97506020890135612bb88161331b565b965060408901356001600160401b0380821115612bd3578586fd5b612bdf8c838d01612a3a565b909850965060608b0135915080821115612bf7578586fd5b612c038c838d01612a3a565b909650945060808b0135915080821115612c1b578384fd5b50612c288b828c01612a83565b999c989b5096995094979396929594505050565b600080600060608486031215612c50578283fd5b8335612c5b8161331b565b92506020840135612c6b8161331b565b929592945050506040919091013590565b600080600080600060808688031215612c93578081fd5b8535612c9e8161331b565b94506020860135612cae8161331b565b93506040860135925060608601356001600160401b03811115612ccf578182fd5b612cdb88828901612a83565b969995985093965092949392505050565b60008060008060808587031215612d01578384fd5b8435612d0c8161331b565b93506020850135612d1c8161331b565b92506040850135915060608501356001600160401b0380821115612d3e578283fd5b818701915087601f830112612d51578283fd5b813581811115612d6357612d63613305565b604051601f8201601f19908116603f01168101908382118183101715612d8b57612d8b613305565b816040528281528a6020848701011115612da3578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060008060008060a08789031215612ddc578384fd5b8635612de78161331b565b95506020870135612df78161331b565b9450604087013593506060870135925060808701356001600160401b03811115612e1f578283fd5b612e2b89828a01612a83565b979a9699509497509295939492505050565b60008060408385031215612e4f578182fd5b8235612e5a8161331b565b91506020830135612b2781613333565b600080600060408486031215612e7e578081fd5b8335612e898161331b565b925060208401356001600160401b03811115612ea3578182fd5b612eaf86828701612a83565b9497909650939450505050565b60008060408385031215612ece578182fd5b8235612ed98161331b565b946020939093013593505050565b600080600060608486031215612efb578081fd5b8335612f068161331b565b9250602084013591506040840135612f1d8161331b565b809150509250925092565b600060208284031215612f39578081fd5b815161182a81613333565b600060208284031215612f55578081fd5b813561182a81613341565b600060208284031215612f71578081fd5b815161182a81613341565b600060208284031215612f8d578081fd5b5035919050565b600060208284031215612fa5578081fd5b5051919050565b60008151808452612fc4816020860160208601613249565b601f01601f19169290920160200192915050565b60008251612fea818460208701613249565b9190910192915050565b60008351613006818460208801613249565b83519083019061301a818360208801613249565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061243890830184612fac565b60208152600061182a6020830184612fac565b6020808252600a908201526927b7363c9037bbb732b960b11b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601b908201527f62656e6566696369617279206973207a65726f20616464726573730000000000604082015260600190565b60208082526010908201526f1d1bdad95b881a5cc81ddc985c1c195960821b604082015260600190565b60208082526010908201526f616c7265616479207772617070696e6760801b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115613219576132196132d9565b500190565b60008261322d5761322d6132ef565b500490565b600082821015613244576132446132d9565b500390565b60005b8381101561326457818101518382015260200161324c565b838111156105cc5750506000910152565b600181811c9082168061328957607f821691505b6020821081141561175357634e487b7160e01b600052602260045260246000fd5b60006000198214156132be576132be6132d9565b5060010190565b6000826132d4576132d46132ef565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461333057600080fd5b50565b801515811461333057600080fd5b6001600160e01b03198116811461333057600080fdfe4e465420776173206e6f74207375636365737366756c6c79207472616e73666572726564a164736f6c6343000804000a4552433732313a207472616e7366657220746f206e6f6e204552433732315265",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101af5760003560e01c80635163a1c3116100ef578063ac4e35ea11610092578063ac4e35ea146103b6578063b88d4fde146103c9578063bb7132a4146103dc578063bc197c81146103ef578063c4d66de814610402578063c87b56dd14610415578063e985e9c514610428578063f23a6e611461043b57600080fd5b80635163a1c3146103335780636352211e1461034657806370a082311461035957806375f26e631461036c5780637afe6e311461037f57806395d89b4114610388578063a1571a5714610390578063a22cb465146103a357600080fd5b8063150b7a0211610157578063150b7a021461027957806318160ddd146102a557806323b872dd146102ad5780632f745c59146102c0578063365a86fc146102d357806338af3eed146102fa57806342842e0e1461030d5780634f6ccce71461032057600080fd5b8062f73663146101b4578063010a38f5146101dd57806301ffc9a7146101f357806305b406cf1461021657806306fdde031461022b578063081812fc14610240578063095ea7b31461025357806312fc775814610266575b600080fd5b600e546101c7906001600160a01b031681565b6040516101d49190613023565b60405180910390f35b6101e561044e565b6040519081526020016101d4565b610206610201366004612f44565b61048d565b60405190151581526020016101d4565b610229610224366004612afa565b6104b8565b005b6102336105d2565b6040516101d4919061306a565b6101c761024e366004612f7c565b610664565b610229610261366004612ebc565b6106ec565b610229610274366004612e6a565b6107fd565b61028c610287366004612c7c565b610ac7565b6040516001600160e01b031990911681526020016101d4565b6008546101e5565b6102296102bb366004612c3c565b610b7b565b6101e56102ce366004612ebc565b610bac565b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b600d546101c7906001600160a01b031681565b61022961031b366004612c3c565b610c42565b6101e561032e366004612f7c565b610c5d565b610229610341366004612ee7565b610cfe565b6101c7610354366004612f7c565b610ddd565b6101e5610367366004612ac2565b610e54565b61022961037a366004612ac2565b610edb565b6101e5600f5481565b610233610ff3565b61022961039e366004612b32565b611002565b6102296103b1366004612e3d565b611311565b6102296103c4366004612ee7565b611320565b6102296103d7366004612cec565b6114d5565b600c546101c7906001600160a01b031681565b61028c6103fd366004612b82565b611507565b6101e5610410366004612ac2565b611626565b610233610423366004612f7c565b611759565b610206610436366004612afa565b611831565b61028c610449366004612dc4565b61185f565b6040516bffffffffffffffffffffffff193060601b1660208201526000906034016040516020818303038152906040528051906020012060001c905090565b60006001600160e01b03198216630a85bd0160e11b14806104b257506104b282611923565b92915050565b336104c461035461044e565b6001600160a01b0316146104f35760405162461bcd60e51b81526004016104ea9061307d565b60405180910390fd5b6040516370a0823160e01b815282906000906001600160a01b038316906370a0823190610524903090600401613023565b60206040518083038186803b15801561053c57600080fd5b505afa158015610550573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105749190612f94565b9050600081116105b85760405162461bcd60e51b815260206004820152600f60248201526e1b9bc81d1bdad95b9cc81bdddb9959608a1b60448201526064016104ea565b6105cc6001600160a01b0383168483611948565b50505050565b6060600080546105e190613275565b80601f016020809104026020016040519081016040528092919081815260200182805461060d90613275565b801561065a5780601f1061062f5761010080835404028352916020019161065a565b820191906000526020600020905b81548152906001019060200180831161063d57829003601f168201915b5050505050905090565b600061066f8261199a565b6106d05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104ea565b506000908152600460205260409020546001600160a01b031690565b60006106f782610ddd565b9050806001600160a01b0316836001600160a01b031614156107655760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104ea565b336001600160a01b038216148061078157506107818133611831565b6107ee5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016104ea565b6107f883836119b7565b505050565b6002600b5414156108205760405162461bcd60e51b81526004016104ea906131cf565b6002600b553361083161035461044e565b6001600160a01b031614806108505750600d546001600160a01b031633145b6108985760405162461bcd60e51b81526020600482015260196024820152784f6e6c79206f776e6572206f722062656e656669636961727960381b60448201526064016104ea565b604051631c2d8fb360e31b8152715045524d49545445445f41495244524f505360701b60048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d989060240160206040518083038186803b15801561090c57600080fd5b505afa158015610920573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109449190612ade565b6001600160a01b031663bcef622e8461099285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a2592505050565b604080516001600160a01b0390931660208401526001600160e01b0319909116908201526060016040516020818303038152906040526040518263ffffffff1660e01b81526004016109e4919061306a565b60206040518083038186803b1580156109fc57600080fd5b505afa158015610a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a349190612f28565b610a725760405162461bcd60e51b815260206004820152600f60248201526e0496e76616c69642041697264726f7608c1b60448201526064016104ea565b610abc82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506001600160a01b03871692915050611a2c565b50506001600b555050565b6000846001600160a01b0316610ade61035461044e565b6001600160a01b0316148015610af7575060105460ff16155b15610b6957600e546001600160a01b031615610b255760405162461bcd60e51b81526004016104ea90613154565b6000610b3383850185612ac2565b90506001600160a01b038116610b5b5760405162461bcd60e51b81526004016104ea906130f3565b610b6786823388611a6e565b505b50630a85bd0160e11b95945050505050565b610b853382611c68565b610ba15760405162461bcd60e51b81526004016104ea9061317e565b6107f8838383611d32565b6000610bb783610e54565b8210610c195760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016104ea565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6107f8838383604051806020016040528060008152506114d5565b6000610c6860085490565b8210610ccb5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016104ea565b60088281548110610cec57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b33610d0a61035461044e565b6001600160a01b031614610d305760405162461bcd60e51b81526004016104ea9061307d565b600e546001600160a01b03848116911614801590610d505750600f548214155b610d6c5760405162461bcd60e51b81526004016104ea9061312a565b604051632142170760e11b81523060048201526001600160a01b038281166024830152604482018490528491908216906342842e0e90606401600060405180830381600087803b158015610dbf57600080fd5b505af1158015610dd3573d6000803e3d6000fd5b5050505050505050565b6000818152600260205260408120546001600160a01b0316806104b25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016104ea565b60006001600160a01b038216610ebf5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016104ea565b506001600160a01b031660009081526003602052604090205490565b33610ee761035461044e565b6001600160a01b031614610f0d5760405162461bcd60e51b81526004016104ea9061307d565b600e546001600160a01b0316610f545760405162461bcd60e51b815260206004820152600c60248201526b6e6f74207772617070696e6760a01b60448201526064016104ea565b600c54600e54600f54610f7a926001600160a01b03908116923092869290911690611ed9565b600f54600e546040516001600160a01b03808516939216907fec4b1d2db955afdfa12c9cb9146cdcc2d05d33b366922acf6551273caf8e441890610fbf903390613023565b60405180910390a450600d80546001600160a01b0319908116909155600e8054821690556000600f55600c80549091169055565b6060600180546105e190613275565b3361100e61035461044e565b6001600160a01b0316146110345760405162461bcd60e51b81526004016104ea9061307d565b600e546001600160a01b03161561105d5760405162461bcd60e51b81526004016104ea90613154565b6001600160a01b0384166110aa5760405162461bcd60e51b815260206004820152601460248201527366726f6d206973207a65726f206164647265737360601b60448201526064016104ea565b6001600160a01b0383166110d05760405162461bcd60e51b81526004016104ea906130f3565b6001600160a01b0382166111345760405162461bcd60e51b815260206004820152602560248201527f6e6674436f6c6c61746572616c436f6e7472616374206973207a65726f206164604482015264647265737360d81b60648201526084016104ea565b6010805460ff19166001179055604051631c2d8fb360e31b81526d5045524d49545445445f4e46545360901b60048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e16c7d989060240160206040518083038186803b1580156111b157600080fd5b505afa1580156111c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e99190612ade565b6001600160a01b031663b8c8aff8836040518263ffffffff1660e01b81526004016112149190613023565b60206040518083038186803b15801561122c57600080fd5b505afa158015611240573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112649190612ade565b600c80546001600160a01b0319166001600160a01b039290921691821790556112909085308585611ed9565b600d80546001600160a01b038581166001600160a01b03199283168117909355600e8054868316931683179055600f84905560408051938452336020850152908716928492917fe3b36666ca4efda9647687b0c5638041770ba18816524b621b4e8995da29e1e4910160405180910390a450506010805460ff191690555050565b61131c338383611f67565b5050565b3361132c61035461044e565b6001600160a01b0316146113525760405162461bcd60e51b81526004016104ea9061307d565b600e546001600160a01b038481169116148015906113725750600f548214155b61138e5760405162461bcd60e51b81526004016104ea9061312a565b604051627eeac760e11b81523060048201526024810183905283906000906001600160a01b0383169062fdd58e9060440160206040518083038186803b1580156113d757600080fd5b505afa1580156113eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140f9190612f94565b9050600081116114515760405162461bcd60e51b815260206004820152600d60248201526c1b9bc81b999d1cc81bdddb9959609a1b60448201526064016104ea565b604051637921219560e11b81523060048201526001600160a01b038481166024830152604482018690526064820183905260a06084830152600060a483015283169063f242432a9060c401600060405180830381600087803b1580156114b657600080fd5b505af11580156114ca573d6000803e3d6000fd5b505050505050505050565b6114df3383611c68565b6114fb5760405162461bcd60e51b81526004016104ea9061317e565b6105cc84848484612032565b6000876001600160a01b031661151e61035461044e565b6001600160a01b0316148015611537575060105460ff16155b1561161157600e546001600160a01b0316156115655760405162461bcd60e51b81526004016104ea90613154565b600186116115a65760405162461bcd60e51b815260206004820152600e60248201526d1bdb9b1e480c08185b1b1bddd95960921b60448201526064016104ea565b60006115b483850185612ac2565b90506001600160a01b0381166115dc5760405162461bcd60e51b81526004016104ea906130f3565b61160f8982338b8b600081811061160357634e487b7160e01b600052603260045260246000fd5b90506020020135611a6e565b505b5063bc197c8160e01b98975050505050505050565b600a54600090610100900460ff1661164457600a5460ff161561164c565b61164c612065565b6116af5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104ea565b600a54610100900460ff161580156116d157600a805461ffff19166101011790555b6002600b5414156116f45760405162461bcd60e51b81526004016104ea906131cf565b6002600b55600061170361044e565b905061170f8482612076565b60405181907fbe9b076dc5b65990cca9dd9d7366682482e7817a6f6bc7f4faf4dc32af497f3290600090a291506001600b55801561175357600a805461ff00191690555b50919050565b60606117648261199a565b6117c85760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016104ea565b60006117df60408051602081019091526000815290565b905060008151116117ff576040518060200160405280600081525061182a565b8061180984612090565b60405160200161181a929190612ff4565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000856001600160a01b031661187661035461044e565b6001600160a01b031614801561188f575060105460ff16155b1561190157600e546001600160a01b0316156118bd5760405162461bcd60e51b81526004016104ea90613154565b60006118cb83850185612ac2565b90506001600160a01b0381166118f35760405162461bcd60e51b81526004016104ea906130f3565b6118ff87823389611a6e565b505b5063f23a6e6160e01b9695505050505050565b6001600160a01b03163b151590565b60006001600160e01b03198216630271189760e51b14806104b257506104b2826121a9565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526107f89084906121ce565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119ec82610ddd565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6020015190565b606061182a83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506122a0565b604051631c2d8fb360e31b81526d5045524d49545445445f4e46545360901b60048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d989060240160206040518083038186803b158015611ade57600080fd5b505afa158015611af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b169190612ade565b6001600160a01b031663b8c8aff8836040518263ffffffff1660e01b8152600401611b419190613023565b60206040518083038186803b158015611b5957600080fd5b505afa158015611b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b919190612ade565b600c80546001600160a01b0319166001600160a01b03929092169182179055611bf05760405162461bcd60e51b815260206004820152601160248201527018999d081b9bdd081c195c9b5a5d1d1959607a1b60448201526064016104ea565b600d80546001600160a01b038581166001600160a01b03199283168117909355600e8054868316931683179055600f8490556040805193845290871660208401819052928492917fe3b36666ca4efda9647687b0c5638041770ba18816524b621b4e8995da29e1e4910160405180910390a450505050565b6000611c738261199a565b611cd45760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104ea565b6000611cdf83610ddd565b9050806001600160a01b0316846001600160a01b03161480611d1a5750836001600160a01b0316611d0f84610664565b6001600160a01b0316145b80611d2a5750611d2a8185611831565b949350505050565b826001600160a01b0316611d4582610ddd565b6001600160a01b031614611da95760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016104ea565b6001600160a01b038216611e0b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104ea565b611e168383836122af565b611e216000826119b7565b6001600160a01b0383166000908152600360205260408120805460019290611e4a908490613232565b90915550506001600160a01b0382166000908152600360205260408120805460019290611e78908490613206565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b604080516001600160a01b038681166024808401919091528682166044840152908516606483015260848083018590528351808403909101815260a49092018352602080830180516001600160e01b031663b030667160e01b179052835160608101909452818452611f5f939190613358908301396001600160a01b0388169190612367565b505050505050565b816001600160a01b0316836001600160a01b03161415611fc55760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016104ea565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61203d848484611d32565b61204984848484612442565b6105cc5760405162461bcd60e51b81526004016104ea906130a1565b600061207030611914565b15905090565b61131c828260405180602001604052806000815250612556565b6060816120b45750506040805180820190915260018152600360fc1b602082015290565b8160005b81156120de57806120c8816132aa565b91506120d79050600a8361321e565b91506120b8565b6000816001600160401b0381111561210657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612130576020820181803683370190505b5090505b8415611d2a57612145600183613232565b9150612152600a866132c5565b61215d906030613206565b60f81b81838151811061218057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506121a2600a8661321e565b9450612134565b60006001600160e01b0319821663780e9d6360e01b14806104b257506104b282612589565b6000612223826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122a09092919063ffffffff16565b8051909150156107f857808060200190518101906122419190612f28565b6107f85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104ea565b6060611d2a84846000856125d9565b6001600160a01b03831661230a5761230581600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61232d565b816001600160a01b0316836001600160a01b03161461232d5761232d8382612708565b6001600160a01b038216612344576107f8816127a5565b826001600160a01b0316826001600160a01b0316146107f8576107f8828261287e565b606061237284611914565b6123cd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016104ea565b600080856001600160a01b0316856040516123e89190612fd8565b600060405180830381855af49150503d8060008114612423576040519150601f19603f3d011682016040523d82523d6000602084013e612428565b606091505b50915091506124388282866128c2565b9695505050505050565b6000612456846001600160a01b0316611914565b1561254b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061248d903390899088908890600401613037565b602060405180830381600087803b1580156124a757600080fd5b505af19250505080156124d7575060408051601f3d908101601f191682019092526124d491810190612f60565b60015b612531573d808015612505576040519150601f19603f3d011682016040523d82523d6000602084013e61250a565b606091505b5080516125295760405162461bcd60e51b81526004016104ea906130a1565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d2a565b506001949350505050565b61256083836128fb565b61256d6000848484612442565b6107f85760405162461bcd60e51b81526004016104ea906130a1565b60006001600160e01b031982166380ac58cd60e01b14806125ba57506001600160e01b03198216635b5e139f60e01b145b806104b257506301ffc9a760e01b6001600160e01b03198316146104b2565b60608247101561263a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104ea565b61264385611914565b61268f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104ea565b600080866001600160a01b031685876040516126ab9190612fd8565b60006040518083038185875af1925050503d80600081146126e8576040519150601f19603f3d011682016040523d82523d6000602084013e6126ed565b606091505b50915091506126fd8282866128c2565b979650505050505050565b6000600161271584610e54565b61271f9190613232565b600083815260076020526040902054909150808214612772576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906127b790600190613232565b600083815260096020526040812054600880549394509092849081106127ed57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061281c57634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061286257634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061288983610e54565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b606083156128d157508161182a565b8251156128e15782518084602001fd5b8160405162461bcd60e51b81526004016104ea919061306a565b6001600160a01b0382166129515760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104ea565b61295a8161199a565b156129a75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104ea565b6129b3600083836122af565b6001600160a01b03821660009081526003602052604081208054600192906129dc908490613206565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008083601f840112612a4b578182fd5b5081356001600160401b03811115612a61578182fd5b6020830191508360208260051b8501011115612a7c57600080fd5b9250929050565b60008083601f840112612a94578182fd5b5081356001600160401b03811115612aaa578182fd5b602083019150836020828501011115612a7c57600080fd5b600060208284031215612ad3578081fd5b813561182a8161331b565b600060208284031215612aef578081fd5b815161182a8161331b565b60008060408385031215612b0c578081fd5b8235612b178161331b565b91506020830135612b278161331b565b809150509250929050565b60008060008060808587031215612b47578182fd5b8435612b528161331b565b93506020850135612b628161331b565b92506040850135612b728161331b565b9396929550929360600135925050565b60008060008060008060008060a0898b031215612b9d578384fd5b8835612ba88161331b565b97506020890135612bb88161331b565b965060408901356001600160401b0380821115612bd3578586fd5b612bdf8c838d01612a3a565b909850965060608b0135915080821115612bf7578586fd5b612c038c838d01612a3a565b909650945060808b0135915080821115612c1b578384fd5b50612c288b828c01612a83565b999c989b5096995094979396929594505050565b600080600060608486031215612c50578283fd5b8335612c5b8161331b565b92506020840135612c6b8161331b565b929592945050506040919091013590565b600080600080600060808688031215612c93578081fd5b8535612c9e8161331b565b94506020860135612cae8161331b565b93506040860135925060608601356001600160401b03811115612ccf578182fd5b612cdb88828901612a83565b969995985093965092949392505050565b60008060008060808587031215612d01578384fd5b8435612d0c8161331b565b93506020850135612d1c8161331b565b92506040850135915060608501356001600160401b0380821115612d3e578283fd5b818701915087601f830112612d51578283fd5b813581811115612d6357612d63613305565b604051601f8201601f19908116603f01168101908382118183101715612d8b57612d8b613305565b816040528281528a6020848701011115612da3578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060008060008060a08789031215612ddc578384fd5b8635612de78161331b565b95506020870135612df78161331b565b9450604087013593506060870135925060808701356001600160401b03811115612e1f578283fd5b612e2b89828a01612a83565b979a9699509497509295939492505050565b60008060408385031215612e4f578182fd5b8235612e5a8161331b565b91506020830135612b2781613333565b600080600060408486031215612e7e578081fd5b8335612e898161331b565b925060208401356001600160401b03811115612ea3578182fd5b612eaf86828701612a83565b9497909650939450505050565b60008060408385031215612ece578182fd5b8235612ed98161331b565b946020939093013593505050565b600080600060608486031215612efb578081fd5b8335612f068161331b565b9250602084013591506040840135612f1d8161331b565b809150509250925092565b600060208284031215612f39578081fd5b815161182a81613333565b600060208284031215612f55578081fd5b813561182a81613341565b600060208284031215612f71578081fd5b815161182a81613341565b600060208284031215612f8d578081fd5b5035919050565b600060208284031215612fa5578081fd5b5051919050565b60008151808452612fc4816020860160208601613249565b601f01601f19169290920160200192915050565b60008251612fea818460208701613249565b9190910192915050565b60008351613006818460208801613249565b83519083019061301a818360208801613249565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061243890830184612fac565b60208152600061182a6020830184612fac565b6020808252600a908201526927b7363c9037bbb732b960b11b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601b908201527f62656e6566696369617279206973207a65726f20616464726573730000000000604082015260600190565b60208082526010908201526f1d1bdad95b881a5cc81ddc985c1c195960821b604082015260600190565b60208082526010908201526f616c7265616479207772617070696e6760801b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115613219576132196132d9565b500190565b60008261322d5761322d6132ef565b500490565b600082821015613244576132446132d9565b500390565b60005b8381101561326457818101518382015260200161324c565b838111156105cc5750506000910152565b600181811c9082168061328957607f821691505b6020821081141561175357634e487b7160e01b600052602260045260246000fd5b60006000198214156132be576132be6132d9565b5060010190565b6000826132d4576132d46132ef565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461333057600080fd5b50565b801515811461333057600080fd5b6001600160e01b03198116811461333057600080fdfe4e465420776173206e6f74207375636365737366756c6c79207472616e73666572726564a164736f6c6343000804000a",
  "devdoc": {
    "author": "NFTfi",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "drainERC1155Airdrop(address,uint256,address)": {
        "params": {
          "receiver": "- receiver of the token",
          "tokenAddress": "- address of the token contract for the token to be sent out",
          "tokenId": "- id token to be sent out"
        }
      },
      "drainERC20Airdrop(address,address)": {
        "params": {
          "receiver": "- receiver of the token",
          "tokenAddress": "- address of the token contract for the token to be sent out"
        }
      },
      "drainERC721Airdrop(address,uint256,address)": {
        "params": {
          "receiver": "- receiver of the token",
          "tokenAddress": "- address of the token contract for the token to be sent out",
          "tokenId": "- id token to be sent out"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "title": "AirdropReceiver",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "drainERC1155Airdrop(address,uint256,address)": {
        "notice": "used by the owner account to be able to drain ERC1155 tokens received as airdrops for the locked  collateral NFT-s"
      },
      "drainERC20Airdrop(address,address)": {
        "notice": "used by the owner account to be able to drain ERC20 tokens received as airdrops for the locked  collateral NFT-s"
      },
      "drainERC721Airdrop(address,uint256,address)": {
        "notice": "used by the owner account to be able to drain ERC721 tokens received as airdrops for the locked  collateral NFT-s"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3553,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3555,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3559,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3563,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3567,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3573,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4572,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4576,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4579,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4583,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 632,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "_initialized",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 635,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "_initializing",
        "offset": 1,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 802,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 7501,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "nftTransferWrapper",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 7503,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "beneficiary",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 7505,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "wrappedNft",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 7507,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "wrappedNftId",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 7509,
        "contract": "contracts/airdrop/AirdropReceiver.sol:AirdropReceiver",
        "label": "wrapping_",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}