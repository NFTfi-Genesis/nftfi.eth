{
  "address": "0x889d2b579d356cAe709422F3DDC7D2e61902917e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftfiHub",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_permittedErc20s",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AdminFeeChanged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BasisPointsTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CurrencyDenominationNotPermitted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FunctionInformationArityMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLenderSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LoanAlreadyRepaidOrLiquidated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LoanDurationCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LoanDurationExceedsMaximum",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LoanDurationOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LoanNotOverdueYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTCollateralContractNotPermitted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTNotOwned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NegativeInterestRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoNFTsOwned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoTokensInEscrow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoTokensOwned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLenderCanLiquidate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RenegotiationSignatureInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderNotBorrower",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenIsCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokensInEscrow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newAdminFee",
          "type": "uint16"
        }
      ],
      "name": "AdminFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "erc20Contract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPermitted",
          "type": "bool"
        }
      ],
      "name": "ERC20Permit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "loanId",
          "type": "uint32"
        }
      ],
      "name": "EscrowRepay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "loanId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanPrincipalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftCollateralId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanMaturityDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanLiquidationDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftCollateralContract",
          "type": "address"
        }
      ],
      "name": "LoanLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "loanId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newLoanDuration",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaximumRepaymentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "renegotiationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "renegotiationAdminFee",
          "type": "uint256"
        }
      ],
      "name": "LoanRenegotiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "loanId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanPrincipalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftCollateralId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaidToLender",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adminFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revenueShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "revenueSharePartner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftCollateralContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "loanERC20Denomination",
          "type": "address"
        }
      ],
      "name": "LoanRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "loanId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "loanPrincipalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maximumRepaymentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftCollateralId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "loanERC20Denomination",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "loanDuration",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "loanInterestRateForDurationInBasisPoints",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "loanAdminFeeInBasisPoints",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "nftCollateralWrapper",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "loanStartTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "nftCollateralContract",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct LoanData.LoanTerms",
          "name": "loanTerms",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "revenueSharePartner",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "revenueShareInBasisPoints",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "referralFeeInBasisPoints",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct LoanData.LoanExtras",
          "name": "loanExtras",
          "type": "tuple"
        }
      ],
      "name": "LoanStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaximumLoanDuration",
          "type": "uint256"
        }
      ],
      "name": "MaximumLoanDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOAN_COORDINATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOAN_TYPE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "loanPrincipalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maximumRepaymentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftCollateralId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftCollateralContract",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "loanDuration",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "loanAdminFeeInBasisPoints",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "loanERC20Denomination",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            }
          ],
          "internalType": "struct LoanData.Offer",
          "name": "_offer",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct LoanData.Signature",
          "name": "_signature",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "revenueSharePartner",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "referralFeeInBasisPoints",
              "type": "uint16"
            }
          ],
          "internalType": "struct LoanData.BorrowerSettings",
          "name": "_borrowerSettings",
          "type": "tuple"
        }
      ],
      "name": "acceptOffer",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminFeeInBasisPoints",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "cancelLoanCommitmentBeforeLoanHasBegun",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "drainERC1155Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "drainERC20Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "drainERC721Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20",
          "type": "address"
        }
      ],
      "name": "getERC20Permit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getEscrowedPayBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        }
      ],
      "name": "getPayoffAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "getWhetherNonceHasBeenUsedForUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "contract INftfiHub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        }
      ],
      "name": "liquidateOverdueLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "loanIdToLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanPrincipalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximumRepaymentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftCollateralId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "loanERC20Denomination",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "loanDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "loanInterestRateForDurationInBasisPoints",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "loanAdminFeeInBasisPoints",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "nftCollateralWrapper",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "loanStartTime",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "nftCollateralContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "loanIdToLoanExtras",
      "outputs": [
        {
          "internalType": "address",
          "name": "revenueSharePartner",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "revenueShareInBasisPoints",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "referralFeeInBasisPoints",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "loanRepaidOrLiquidated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximumLoanDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        }
      ],
      "name": "mintObligationReceipt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        }
      ],
      "name": "payBackLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        }
      ],
      "name": "payBackLoanSafe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_nftAirdrop",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftAirdropId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_is1155",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_nftAirdropAmount",
          "type": "uint256"
        }
      ],
      "name": "pullAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "pullAirdropReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_newLoanDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_newMaximumRepaymentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_renegotiationFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lenderNonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_lenderSignature",
          "type": "bytes"
        }
      ],
      "name": "renegotiateLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_permit",
          "type": "bool"
        }
      ],
      "name": "setERC20Permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_erc20s",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_permits",
          "type": "bool[]"
        }
      ],
      "name": "setERC20Permits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newAdminFeeInBasisPoints",
          "type": "uint16"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaximumLoanDuration",
          "type": "uint256"
        }
      ],
      "name": "updateMaximumLoanDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        }
      ],
      "name": "wrapCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x223002ee86a9c8214a2f01215af055638dc1f880ebd49d50b9c483e819a1b2de",
  "receipt": {
    "to": null,
    "from": "0x02e037F56728E947e92Af2c05baF7FeF387Ddd06",
    "contractAddress": "0x889d2b579d356cAe709422F3DDC7D2e61902917e",
    "transactionIndex": 13,
    "gasUsed": "4589364",
    "logsBloom": "0x
    "blockHash": "0xe3644ff81a1111d625fe0a84e4241d864e3b5652ce3ed3046c8d81b5d5a5c27e",
    "transactionHash": "0x223002ee86a9c8214a2f01215af055638dc1f880ebd49d50b9c483e819a1b2de",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 9337969,
        "transactionHash": "0x223002ee86a9c8214a2f01215af055638dc1f880ebd49d50b9c483e819a1b2de",
        "address": "0x889d2b579d356cAe709422F3DDC7D2e61902917e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000002e037f56728e947e92af2c05baf7fef387ddd06"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0xe3644ff81a1111d625fe0a84e4241d864e3b5652ce3ed3046c8d81b5d5a5c27e"
      }
    ],
    "blockNumber": 9337969,
    "cumulativeGasUsed": "8809412",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x02e037F56728E947e92Af2c05baF7FeF387Ddd06",
    "0xBD2cc314A2FCB8C0313641120Faf027d30DE5eA2",
    []
  ],
  "numDeployments": 1,
  "solcInputHash": "54de0b2a48f04d02d32721198484cdf8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftfiHub\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_permittedErc20s\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AdminFeeChanged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BasisPointsTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurrencyDenominationNotPermitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunctionInformationArityMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLenderSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LoanAlreadyRepaidOrLiquidated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LoanDurationCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LoanDurationExceedsMaximum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LoanDurationOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LoanNotOverdueYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTCollateralContractNotPermitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTNotOwned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NegativeInterestRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoNFTsOwned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensInEscrow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensOwned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLenderCanLiquidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RenegotiationSignatureInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotBorrower\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIsCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensInEscrow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newAdminFee\",\"type\":\"uint16\"}],\"name\":\"AdminFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPermitted\",\"type\":\"bool\"}],\"name\":\"ERC20Permit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"loanId\",\"type\":\"uint32\"}],\"name\":\"EscrowRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"loanId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanPrincipalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanMaturityDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanLiquidationDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"}],\"name\":\"LoanLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"loanId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newLoanDuration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaximumRepaymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"renegotiationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"renegotiationAdminFee\",\"type\":\"uint256\"}],\"name\":\"LoanRenegotiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"loanId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanPrincipalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaidToLender\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revenueShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"revenueSharePartner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanERC20Denomination\",\"type\":\"address\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"loanId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanPrincipalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumRepaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"loanERC20Denomination\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"loanDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"loanInterestRateForDurationInBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"loanAdminFeeInBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftCollateralWrapper\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"loanStartTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct LoanData.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"revenueSharePartner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"revenueShareInBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"referralFeeInBasisPoints\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct LoanData.LoanExtras\",\"name\":\"loanExtras\",\"type\":\"tuple\"}],\"name\":\"LoanStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaximumLoanDuration\",\"type\":\"uint256\"}],\"name\":\"MaximumLoanDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOAN_COORDINATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOAN_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanPrincipalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumRepaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"loanDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"loanAdminFeeInBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"loanERC20Denomination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"internalType\":\"struct LoanData.Offer\",\"name\":\"_offer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LoanData.Signature\",\"name\":\"_signature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"revenueSharePartner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralFeeInBasisPoints\",\"type\":\"uint16\"}],\"internalType\":\"struct LoanData.BorrowerSettings\",\"name\":\"_borrowerSettings\",\"type\":\"tuple\"}],\"name\":\"acceptOffer\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFeeInBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"cancelLoanCommitmentBeforeLoanHasBegun\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"drainERC1155Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"drainERC20Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"drainERC721Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"}],\"name\":\"getERC20Permit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getEscrowedPayBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"}],\"name\":\"getPayoffAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getWhetherNonceHasBeenUsedForUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract INftfiHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"}],\"name\":\"liquidateOverdueLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"loanIdToLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanPrincipalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumRepaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"loanERC20Denomination\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"loanDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"loanInterestRateForDurationInBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"loanAdminFeeInBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftCollateralWrapper\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"loanStartTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"loanIdToLoanExtras\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"revenueSharePartner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"revenueShareInBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"referralFeeInBasisPoints\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"loanRepaidOrLiquidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumLoanDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"}],\"name\":\"mintObligationReceipt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"}],\"name\":\"payBackLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"}],\"name\":\"payBackLoanSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_nftAirdrop\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftAirdropId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_is1155\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_nftAirdropAmount\",\"type\":\"uint256\"}],\"name\":\"pullAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"pullAirdropReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_newLoanDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_newMaximumRepaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_renegotiationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lenderNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_lenderSignature\",\"type\":\"bytes\"}],\"name\":\"renegotiateLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_permit\",\"type\":\"bool\"}],\"name\":\"setERC20Permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_erc20s\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_permits\",\"type\":\"bool[]\"}],\"name\":\"setERC20Permits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newAdminFeeInBasisPoints\",\"type\":\"uint16\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaximumLoanDuration\",\"type\":\"uint256\"}],\"name\":\"updateMaximumLoanDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"}],\"name\":\"wrapCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"NFTfi\",\"kind\":\"dev\",\"methods\":{\"acceptOffer((uint256,uint256,uint256,address,uint32,uint16,address,address),(uint256,uint256,address,bytes),(address,uint16))\":{\"params\":{\"_borrowerSettings\":\"- Some extra parameters that the borrower needs to set when accepting an offer.\",\"_offer\":\"- The offer made by the lender.\",\"_signature\":\"- The components of the lender's signature.\"}},\"cancelLoanCommitmentBeforeLoanHasBegun(uint256)\":{\"params\":{\"_nonce\":\"- User nonce\"}},\"constructor\":{\"details\":\"Sets `hub` and permitted erc20-s\",\"params\":{\"_admin\":\"- Initial admin of this contract.\",\"_nftfiHub\":\"- NFTfiHub address\",\"_permittedErc20s\":\"- list of permitted ERC20 token contract addresses\"}},\"drainERC1155Airdrop(address,uint256,address)\":{\"params\":{\"_receiver\":\"- receiver of the token\",\"_tokenAddress\":\"- address of the token contract for the token to be sent out\",\"_tokenId\":\"- id token to be sent out\"}},\"drainERC20Airdrop(address,uint256,address)\":{\"params\":{\"_receiver\":\"- receiver of the token\",\"_tokenAddress\":\"- address of the token contract for the token to be sent out\"}},\"drainERC721Airdrop(address,uint256,address)\":{\"params\":{\"_receiver\":\"- receiver of the token\",\"_tokenAddress\":\"- address of the token contract for the token to be sent out\",\"_tokenId\":\"- id token to be sent out\"}},\"getERC20Permit(address)\":{\"params\":{\"_erc20\":\"- The address of the erc20 contract.\"},\"returns\":{\"_0\":\"Returns whether the erc20 is permitted\"}},\"getEscrowedPayBack(address)\":{\"params\":{\"_token\":\"ERC20 token conract address\"}},\"getPayoffAmount(uint32)\":{\"params\":{\"_loanId\":\"A unique identifier for this particular loan, sourced from the Loan Coordinator.\"},\"returns\":{\"_0\":\"The amount of the specified ERC20 currency required to pay back this loan, measured in the smallest unit of the specified ERC20 currency.\"}},\"getWhetherNonceHasBeenUsedForUser(address,uint256)\":{\"params\":{\"_nonce\":\"- The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes: - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun() , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce.\",\"_user\":\"- The address of the user. This function works for both lenders and borrowers alike.\"},\"returns\":{\"_0\":\"A bool representing whether or not this nonce has been used for this user.\"}},\"liquidateOverdueLoan(uint32)\":{\"params\":{\"_loanId\":\"A unique identifier for this particular loan, sourced from the Loan Coordinator.\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated.\",\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated.\",\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if allowed\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Triggers stopped state. Requirements: - Only the owner can call this method. - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"payBackLoan(uint32)\":{\"params\":{\"_loanId\":\"A unique identifier for this particular loan, sourced from the Loan Coordinator.\"}},\"payBackLoanSafe(uint32)\":{\"params\":{\"_loanId\":\"A unique identifier for this particular loan, sourced from the Loan Coordinator.\"}},\"pullAirdrop(uint32,address,bytes,address,uint256,bool,uint256)\":{\"params\":{\"_data\":\"- function selector to be called on the airdropping contract\",\"_is1155\":\"-\",\"_loanId\":\"-\",\"_nftAirdrop\":\"- address of the used claiming nft in the drop\",\"_nftAirdropAmount\":\"- amount in case of 1155\",\"_nftAirdropId\":\"- id of the used claiming nft in the drop\",\"_target\":\"- address of the airdropping contract\"}},\"pullAirdropReceiver(uint32,address,bytes)\":{\"params\":{\"_data\":\"- function selector to be called on the airdropping contract\",\"_loanId\":\"-\",\"_target\":\"- address of the airdropping contract\"}},\"renegotiateLoan(uint32,uint32,uint256,uint256,uint256,uint256,bytes)\":{\"details\":\"makes possible to change loan duration and max repayment amount, loan duration even can be extended if loan was expired but not liquidated.\",\"params\":{\"_expiry\":\"- The date when the renegotiation offer expires\",\"_lenderNonce\":\"- The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes: - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun() , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce.\",\"_lenderSignature\":\"- The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following combination of parameters: - _loanId - _newLoanDuration - _newMaximumRepaymentAmount - _lender - _expiry  - address of this contract - chainId\",\"_loanId\":\"- The unique identifier for the loan to be renegotiated\",\"_newLoanDuration\":\"- The new amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT.\",\"_newMaximumRepaymentAmount\":\"- The new maximum amount of money that the borrower would be required to retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay early.\",\"_renegotiationFee\":\"Agreed upon fee in ether that borrower pays for the lender for the renegitiation\"}},\"setERC20Permit(address,bool)\":{\"params\":{\"_erc20\":\"- The address of the ERC20 currency whose permit list status changed.\",\"_permit\":\"- The new status of whether the currency is permitted or not.\"}},\"setERC20Permits(address[],bool[])\":{\"params\":{\"_erc20s\":\"- The addresses of the ERC20 currencies whose permit list status changed.\",\"_permits\":\"- The new statuses of whether the currency is permitted or not.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Checks whether this contract implements the interface defined by `interfaceId`.\",\"params\":{\"_interfaceId\":\"Id of the interface\"},\"returns\":{\"_0\":\"true if this contract implements the interface\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Returns to normal state. Requirements: - Only the owner can call this method. - The contract must be paused.\"},\"updateAdminFee(uint16)\":{\"params\":{\"_newAdminFeeInBasisPoints\":\"- The new admin fee measured in basis points. This is a percent of the interest paid upon a loan's completion that go to the contract admins.\"}},\"updateMaximumLoanDuration(uint256)\":{\"params\":{\"_newMaximumLoanDuration\":\"- The new maximum loan duration, measured in seconds.\"}},\"wrapCollateral(uint32)\":{\"params\":{\"_loanId\":\"-\"}}},\"title\":\"DirectLoanFixedOffer\",\"version\":1},\"userdoc\":{\"events\":{\"AdminFeeUpdated(uint16)\":{\"notice\":\"This event is fired whenever the admins change the percent of interest rates earned that they charge as a fee. Note that newAdminFee can never exceed 10,000, since the fee is measured in basis points.\"},\"ERC20Permit(address,bool)\":{\"notice\":\"This event is fired whenever the admin sets a ERC20 permit.\"},\"EscrowRepay(uint32)\":{\"notice\":\"This event is fired whenever a loan is repaid into escrow\"},\"LoanLiquidated(uint32,address,address,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"This event is fired whenever a lender liquidates an outstanding loan that is owned to them that has exceeded its duration. The lender receives the underlying NFT collateral, and the borrower no longer needs to repay the loan principal-plus-interest.\"},\"LoanRenegotiated(uint32,address,address,uint32,uint256,uint256,uint256)\":{\"notice\":\"This event is fired when some of the terms of a loan are being renegotiated.\"},\"LoanRepaid(uint32,address,address,uint256,uint256,uint256,uint256,uint256,address,address,address)\":{\"notice\":\"This event is fired whenever a borrower successfully repays their loan, paying principal-plus-interest-minus-fee to the lender in loanERC20Denomination, paying fee to owner in loanERC20Denomination, and receiving their NFT collateral back.\"},\"LoanStarted(uint32,address,address,(uint256,uint256,uint256,address,uint32,uint16,uint16,address,uint64,address,address),(address,uint16,uint16))\":{\"notice\":\"This event is fired whenever a borrower begins a loan by calling NFTfi.beginLoan(), which can only occur after both the lender and borrower have approved their ERC721 and ERC20 contracts to use NFTfi, and when they both have signed off-chain messages that agree on the terms of the loan.\"},\"MaximumLoanDurationUpdated(uint256)\":{\"notice\":\"This event is fired whenever the admins change the maximum duration of any loan started for this loan type.\"}},\"kind\":\"user\",\"methods\":{\"LOAN_TYPE()\":{\"notice\":\"This function returns a bytes32 value identifying the loan type for the coordinator\"},\"acceptOffer((uint256,uint256,uint256,address,uint32,uint16,address,address),(uint256,uint256,address,bytes),(address,uint16))\":{\"notice\":\"This function is called by the borrower when accepting a lender's offer to begin a loan.\"},\"adminFeeInBasisPoints()\":{\"notice\":\"The percentage of interest earned by lenders on this platform that is taken by the contract admin's as a fee, measured in basis points (hundreths of a percent). The max allowed value is 10000.\"},\"cancelLoanCommitmentBeforeLoanHasBegun(uint256)\":{\"notice\":\"This function can be called by either a lender or a borrower to cancel all off-chain orders that they have signed that contain this nonce. If the off-chain orders were created correctly, there should only be one off-chain order that contains this nonce at all. The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce.\"},\"drainERC1155Airdrop(address,uint256,address)\":{\"notice\":\"used by the owner account to be able to drain ERC1155 tokens received as airdrops for the locked  collateral NFT-s\"},\"drainERC20Airdrop(address,uint256,address)\":{\"notice\":\"used by the owner account to be able to drain ERC20 tokens received as airdrops for the locked  collateral NFT-s\"},\"drainERC721Airdrop(address,uint256,address)\":{\"notice\":\"used by the owner account to be able to drain ERC721 tokens received as airdrops for the locked  collateral NFT-s\"},\"getERC20Permit(address)\":{\"notice\":\"This function can be called by anyone to get the permit associated with the erc20 contract.\"},\"getEscrowedPayBack(address)\":{\"notice\":\"Used for lenders to get their payback from escrow, in case the direct loan payback didn't work, because it caused a revert.\"},\"getPayoffAmount(uint32)\":{\"notice\":\"This function can be used to view the current quantity of the ERC20 currency used in the specified loan required by the borrower to repay their loan, measured in the smallest unit of the ERC20 currency.\"},\"getWhetherNonceHasBeenUsedForUser(address,uint256)\":{\"notice\":\"This function can be used to view whether a particular nonce for a particular user has already been used, either from a successful loan or a cancelled off-chain order.\"},\"liquidateOverdueLoan(uint32)\":{\"notice\":\"This function is called by a lender once a loan has finished its duration and the borrower still has not repaid. The lender can call this function to seize the underlying NFT collateral, although the lender gives up all rights to the principal-plus-collateral by doing so. This function is purposefully not pausable in order to prevent an attack where the contract admin's pause the contract and hold hostage the NFT's that are still within it. We intentionally allow anybody to call this function, although only the lender will end up receiving the seized collateral. We are exploring the possbility of incentivizing users to call this function by using some of the admin funds.\"},\"loanIdToLoan(uint32)\":{\"notice\":\"A mapping from a loan's identifier to the loan's details, represted by the loan struct.\"},\"loanRepaidOrLiquidated(uint32)\":{\"notice\":\"A mapping tracking whether a loan has either been repaid or liquidated. This prevents an attacker trying to repay or liquidate the same loan twice.\"},\"maximumLoanDuration()\":{\"notice\":\"The maximum duration of any loan started for this loan type, measured in seconds. This is both a sanity-check for borrowers and an upper limit on how long admins will have to support v1 of this contract if they eventually deprecate it, as well as a check to ensure that the loan duration never exceeds the space alotted for it in the loan struct.\"},\"payBackLoan(uint32)\":{\"notice\":\"This function is called by a anyone to repay a loan. It can be called at any time after the loan has begun and before loan expiry.. The caller will pay a pro-rata portion of their interest if the loan is paid off early and the loan is pro-rated type, but the complete repayment amount if it is fixed type. The the borrower (current owner of the obligation note) will get the collaterl NFT back. This function is purposefully not pausable in order to prevent an attack where the contract admin's pause the contract and hold hostage the NFT's that are still within it.\"},\"payBackLoanSafe(uint32)\":{\"notice\":\"This function is called by a anyone to repay a loan. It can be called at any time after the loan has begun and before loan expiry.. The caller will pay a pro-rata portion of their interest if the loan is paid off early and the loan is pro-rated type, but the complete repayment amount if it is fixed type. The the borrower (current owner of the obligation note) will get the collaterl NFT back. This function is purposefully not pausable in order to prevent an attack where the contract admin's pause the contract and hold hostage the NFT's that are still within it.\"},\"pullAirdrop(uint32,address,bytes,address,uint256,bool,uint256)\":{\"notice\":\"this function initiates a flashloan to pull an airdrop from a tartget contract\"},\"pullAirdropReceiver(uint32,address,bytes)\":{\"notice\":\"this function initiates a flashloan to pull an airdrop from a tartget contract\"},\"setERC20Permit(address,bool)\":{\"notice\":\"This function can be called by admins to change the permitted status of an ERC20 currency. This includes both adding an ERC20 currency to the permitted list and removing it.\"},\"setERC20Permits(address[],bool[])\":{\"notice\":\"This function can be called by admins to change the permitted status of a batch of ERC20 currency. This includes both adding an ERC20 currency to the permitted list and removing it.\"},\"updateAdminFee(uint16)\":{\"notice\":\"This function can be called by admins to change the percent of interest rates earned that they charge as a fee. Note that newAdminFee can never exceed 10,000, since the fee is measured in basis points.\"},\"updateMaximumLoanDuration(uint256)\":{\"notice\":\"This function can be called by admins to change the maximumLoanDuration. Note that they can never change maximumLoanDuration to be greater than UINT32_MAX, since that's the maximum space alotted for the duration in the loan struct.\"},\"wrapCollateral(uint32)\":{\"notice\":\"this function creates a proxy contract wrapping the collateral to be able to catch an expected airdrop\"}},\"notice\":\"Main contract for NFTfi Direct Loans Fixed Type. This contract manages the ability to create NFT-backed peer-to-peer loans of type Fixed (agreed to be a fixed-repayment loan) where the borrower pays the maximumRepaymentAmount regardless of whether they repay early or not. There are two ways to commence an NFT-backed loan: a. The borrower accepts a lender's offer by calling `acceptOffer`.   1. the borrower calls nftContract.approveAll(NFTfi), approving the NFTfi contract to move their NFT's on their be1alf.   2. the lender calls erc20Contract.approve(NFTfi), allowing NFTfi to move the lender's ERC20 tokens on their behalf.   3. the lender signs an off-chain message, proposing its offer terms.   4. the borrower calls `acceptOffer` to accept these terms and enter into the loan. The NFT is stored in the contract, the borrower receives the loan principal in the specified ERC20 currency, the lender receives an NFTfi promissory note (in ERC721 form) that represents the rights to either the principal-plus-interest, or the underlying NFT collateral if the borrower does not pay back in time, and the borrower receives obligation receipt (in ERC721 form) that gives them the right to pay back the loan and get the collateral back. The lender can freely transfer and trade this ERC721 promissory note as they wish, with the knowledge that transferring the ERC721 promissory note tranfsers the rights to principal-plus-interest and/or collateral, and that they will no longer have a claim on the loan. The ERC721 promissory note itself represents that claim. The borrower can freely transfer and trade this ERC721 obligaiton receipt as they wish, with the knowledge that transferring the ERC721 obligaiton receipt tranfsers the rights right to pay back the loan and get the collateral back. A loan may end in one of two ways: - First, a borrower may call NFTfi.payBackLoan() and pay back the loan plus interest at any time, in which case they receive their NFT back in the same transaction. - Second, if the loan's duration has passed and the loan has not been paid back yet, a lender can call NFTfi.liquidateOverdueLoan(), in which case they receive the underlying NFT collateral and forfeit the rights to the principal-plus-interest, which the borrower now keeps.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol\":\"DirectLoanFixedOffer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n}\\n\",\"keccak256\":\"0xc8add71d80d05a1390e1c656686a0ea10ffaebfcc433cc397a63fd725f376b7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/airdrop/IAirdropReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title IAirdropReceiver\\n * @author NFTfi\\n * @dev\\n */\\ninterface IAirdropReceiver {\\n    function pullAirdrop(address _target, bytes calldata _data) external;\\n}\\n\",\"keccak256\":\"0x527f8872973d479de6b5b0d1561c3214942c5cdb6471463b5724a5d605840d04\",\"license\":\"BUSL-1.1\"},\"contracts/airdrop/IAirdropReceiverFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title IAirdropReceiver\\n * @author NFTfi\\n * @dev\\n */\\ninterface IAirdropReceiverFactory {\\n    function createAirdropReceiver(address _to) external returns (address, uint256);\\n}\\n\",\"keccak256\":\"0xea174dd12ddc5a8e621d3dd213f3a0d2814a0d993477ae160449e4926eb62ecc\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IAirdropFlashLoan.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IAirdropFlashLoan {\\n    function pullAirdrop(\\n        address _nftCollateralContract,\\n        uint256 _nftCollateralId,\\n        address _nftWrapper,\\n        address _target,\\n        bytes calldata _data,\\n        address _nftAirdrop,\\n        uint256 _nftAirdropId,\\n        bool _is1155,\\n        uint256 _nftAirdropAmount,\\n        address _beneficiary\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7384764e61cf4bf3bc71e510202558a8f888c720c645b0a874689d2a8d14df7c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDirectLoanCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title IDirectLoanCoordinator\\n * @author NFTfi\\n * @dev DirectLoanCoordinator interface.\\n */\\ninterface IDirectLoanCoordinator {\\n    enum StatusType {\\n        NOT_EXISTS,\\n        NEW,\\n        REPAID,\\n        LIQUIDATED\\n    }\\n\\n    /**\\n     * @notice This struct contains data related to a loan\\n     *\\n     * @param smartNftId - The id of both the promissory note and obligation receipt.\\n     * @param status - The status in which the loan currently is.\\n     * @param loanContract - Address of the LoanType contract that created the loan.\\n     */\\n    struct Loan {\\n        address loanContract;\\n        uint64 smartNftId;\\n        StatusType status;\\n    }\\n\\n    function registerLoan(address _lender, bytes32 _loanType) external returns (uint32);\\n\\n    function resetSmartNfts(uint32 _loanId, address _borrower) external;\\n\\n    function mintObligationReceipt(uint32 _loanId, address _borrower) external;\\n\\n    function resolveLoan(uint32 _loanId, bool liquidated) external;\\n\\n    function promissoryNoteToken() external view returns (address);\\n\\n    function obligationReceiptToken() external view returns (address);\\n\\n    function getLoanData(uint32 _loanId) external view returns (Loan memory);\\n\\n    function isValidLoanId(uint32 _loanId, address _loanContract) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0914afa791331b90065b8431282df86e3f021cc2a6458fef93fd323869450050\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INftWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title INftTypeRegistry\\n * @author NFTfi\\n * @dev Interface for NFT Wrappers.\\n */\\ninterface INftWrapper {\\n    function transferNFT(\\n        address from,\\n        address to,\\n        address nftContract,\\n        uint256 tokenId\\n    ) external returns (bool);\\n\\n    function isOwner(\\n        address owner,\\n        address nftContract,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n\\n    function wrapAirdropReceiver(\\n        address _recipient,\\n        address _nftContract,\\n        uint256 _nftId\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4fb1333917548ac972c3d6b1f6c3c973c9760a6207a32726c6319f7ea7ef3a6d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INftfiHub.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title INftfiHub\\n * @author NFTfi\\n * @dev NftfiHub interface\\n */\\ninterface INftfiHub {\\n    function setContract(string calldata _contractKey, address _contractAddress) external;\\n\\n    function getContract(bytes32 _contractKey) external view returns (address);\\n}\\n\",\"keccak256\":\"0x80259ebf45729166a8524b313741b6ea2acfe8ac9dc15243f018a08cc2b14240\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPermittedERC20s.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IPermittedERC20s {\\n    function getERC20Permit(address _erc20) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd159a7f11adfd21220c0acbb85917b5019a82d4912c2fecb20449b267ca9ca15\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPermittedNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IPermittedNFTs {\\n    function setNFTPermit(address _nftContract, string memory _nftType) external;\\n\\n    function getNFTPermit(address _nftContract) external view returns (bytes32);\\n\\n    function getNFTWrapper(address _nftContract) external view returns (address);\\n}\\n\",\"keccak256\":\"0x84b4cf35a3ea9b4ffb1711d4268f5554c310d13788d88a7093991b5a74e68a50\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPermittedPartners.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IPermittedPartners {\\n    function getPartnerPermit(address _partner) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x288db42f55648b3d0305f95b1a47132b30a374b380f41ec848b0e5fd02dbd7f8\",\"license\":\"BUSL-1.1\"},\"contracts/loans/BaseLoan.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title  BaseLoan\\n * @author NFTfi\\n * @dev Implements base functionalities common to all Loan types.\\n * Mostly related to governance and security.\\n */\\nabstract contract BaseLoan is Ownable, Pausable, ReentrancyGuard {\\n    /* *********** */\\n    /* CONSTRUCTOR */\\n    /* *********** */\\n\\n    /**\\n     * @notice Sets the admin of the contract.\\n     *\\n     * @param _admin - Initial admin of this contract.\\n     */\\n    constructor(address _admin) Ownable(_admin) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /* ********* */\\n    /* FUNCTIONS */\\n    /* ********* */\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - Only the owner can call this method.\\n     * - The contract must not be paused.\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - Only the owner can call this method.\\n     * - The contract must be paused.\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x02981147a419ffacb119eccc5cd02a2be182484a99eb30771a8d120c7d79b9a0\",\"license\":\"BUSL-1.1\"},\"contracts/loans/direct/loanTypes/DirectLoanBaseMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./IDirectLoanBase.sol\\\";\\nimport \\\"./LoanData.sol\\\";\\nimport \\\"./LoanChecksAndCalculations.sol\\\";\\nimport \\\"./LoanAirdropUtils.sol\\\";\\nimport \\\"../../BaseLoan.sol\\\";\\nimport \\\"../../../utils/NftReceiver.sol\\\";\\nimport \\\"../../../utils/NFTfiSigningUtils.sol\\\";\\nimport \\\"../../../interfaces/INftfiHub.sol\\\";\\nimport \\\"../../../utils/ContractKeys.sol\\\";\\nimport \\\"../../../interfaces/IDirectLoanCoordinator.sol\\\";\\nimport \\\"../../../interfaces/INftWrapper.sol\\\";\\nimport \\\"../../../interfaces/IPermittedPartners.sol\\\";\\nimport \\\"../../../interfaces/IPermittedERC20s.sol\\\";\\nimport \\\"../../../interfaces/IPermittedNFTs.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title  DirectLoanBase\\n * @author NFTfi\\n * @notice Main contract for NFTfi Direct Loans Type. This contract manages the ability to create NFT-backed\\n * peer-to-peer loans.\\n *\\n * There are two ways to commence an NFT-backed loan:\\n *\\n * a. The borrower accepts a lender's offer by calling `acceptOffer`.\\n *   1. the borrower calls nftContract.approveAll(NFTfi), approving the NFTfi contract to move their NFT's on their\\n * be1alf.\\n *   2. the lender calls erc20Contract.approve(NFTfi), allowing NFTfi to move the lender's ERC20 tokens on their\\n * behalf.\\n *   3. the lender signs an off-chain message, proposing its offer terms.\\n *   4. the borrower calls `acceptOffer` to accept these terms and enter into the loan. The NFT is stored in\\n * the contract, the borrower receives the loan principal in the specified ERC20 currency, the lender receives an\\n * NFTfi promissory note (in ERC721 form) that represents the rights to either the principal-plus-interest, or the\\n * underlying NFT collateral if the borrower does not pay back in time, and the borrower receives obligation receipt\\n * (in ERC721 form) that gives them the right to pay back the loan and get the collateral back.\\n *\\n * The lender can freely transfer and trade this ERC721 promissory note as they wish, with the knowledge that\\n * transferring the ERC721 promissory note tranfsers the rights to principal-plus-interest and/or collateral, and that\\n * they will no longer have a claim on the loan. The ERC721 promissory note itself represents that claim.\\n *\\n * The borrower can freely transfer and trade this ERC721 obligaiton receipt as they wish, with the knowledge that\\n * transferring the ERC721 obligaiton receipt tranfsers the rights right to pay back the loan and get the collateral\\n * back.\\n *\\n * A loan may end in one of two ways:\\n * - First, a borrower may call NFTfi.payBackLoan() and pay back the loan plus interest at any time, in which case they\\n * receive their NFT back in the same transaction.\\n * - Second, if the loan's duration has passed and the loan has not been paid back yet, a lender can call\\n * NFTfi.liquidateOverdueLoan(), in which case they receive the underlying NFT collateral and forfeit the rights to the\\n * principal-plus-interest, which the borrower now keeps.\\n *\\n *\\n * If the loan was created as a ProRated type loan (pro-rata interest loan), then the user only pays the principal plus\\n * pro-rata interest if repaid early.\\n * However, if the loan was was created as a Fixed type loan (agreed to be a fixed-repayment loan), then the borrower\\n * pays the maximumRepaymentAmount regardless of whether they repay early or not.\\n *\\n */\\nabstract contract DirectLoanBaseMinimal is IDirectLoanBase, IPermittedERC20s, BaseLoan, NftReceiver, LoanData {\\n    using SafeERC20 for IERC20;\\n\\n    /* ******* */\\n    /* STORAGE */\\n    /* ******* */\\n\\n    uint16 public constant HUNDRED_PERCENT = 10000;\\n\\n    bytes32 public immutable override LOAN_COORDINATOR;\\n\\n    /**\\n     * @notice The maximum duration of any loan started for this loan type, measured in seconds. This is both a\\n     * sanity-check for borrowers and an upper limit on how long admins will have to support v1 of this contract if they\\n     * eventually deprecate it, as well as a check to ensure that the loan duration never exceeds the space alotted for\\n     * it in the loan struct.\\n     */\\n    uint256 public override maximumLoanDuration = 53 weeks;\\n\\n    /**\\n     * @notice The percentage of interest earned by lenders on this platform that is taken by the contract admin's as a\\n     * fee, measured in basis points (hundreths of a percent). The max allowed value is 10000.\\n     */\\n    uint16 public override adminFeeInBasisPoints = 500;\\n\\n    /**\\n     * @notice A mapping from a loan's identifier to the loan's details, represted by the loan struct.\\n     */\\n    mapping(uint32 => LoanTerms) public override loanIdToLoan;\\n    mapping(uint32 => LoanExtras) public loanIdToLoanExtras;\\n\\n    /**\\n     * @notice A mapping tracking whether a loan has either been repaid or liquidated. This prevents an attacker trying\\n     * to repay or liquidate the same loan twice.\\n     */\\n    mapping(uint32 => bool) public override loanRepaidOrLiquidated;\\n\\n    /**\\n     * @dev keeps track of tokens being held as loan collateral, so we dont allow these\\n     * to be transferred with the aridrop draining functions\\n     * nft contract address => nft id => amount (in case of 1155)\\n     */\\n    mapping(address => mapping(uint256 => uint256)) private _escrowTokens;\\n\\n    /**\\n     * @dev keeps track of payed back erc20 tokens being held in escrow of finished loans, so we dont allow these\\n     * to be transferred with the aridrop draining functions\\n     * token contract => amount\\n     */\\n    mapping(address => uint256) private _escrowErc20Tokens;\\n\\n    /**\\n     * @dev keeps track of payed back erc20 tokens being held in escrow of finished loans for each lender\\n     * lender => token contract => amount\\n     */\\n    mapping(address => mapping(address => uint256)) private _payBackEscrow;\\n\\n    /**\\n     * @notice A mapping that takes both a user's address and a loan nonce that was first used when signing an off-chain\\n     * order and checks whether that nonce has previously either been used for a loan, or has been pre-emptively\\n     * cancelled. The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to\\n     * nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders.\\n     *\\n     * These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each\\n     * nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower\\n     * in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would submit a\\n     * user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     */\\n    mapping(address => mapping(uint256 => bool)) internal _nonceHasBeenUsedForUser;\\n\\n    /**\\n     * @notice A mapping from an ERC20 currency address to whether that currency\\n     * is permitted to be used by this contract.\\n     */\\n    mapping(address => bool) private erc20Permits;\\n\\n    INftfiHub public immutable hub;\\n\\n    /* ****** */\\n    /* EVENTS */\\n    /* ****** */\\n\\n    /**\\n     * @notice This event is fired whenever the admins change the percent of interest rates earned that they charge as a\\n     * fee. Note that newAdminFee can never exceed 10,000, since the fee is measured in basis points.\\n     *\\n     * @param  newAdminFee - The new admin fee measured in basis points. This is a percent of the interest paid upon a\\n     * loan's completion that go to the contract admins.\\n     */\\n    event AdminFeeUpdated(uint16 newAdminFee);\\n\\n    /**\\n     * @notice This event is fired whenever the admins change the maximum duration of any loan started for this loan\\n     * type.\\n     *\\n     * @param  newMaximumLoanDuration - The new maximum duration.\\n     */\\n    event MaximumLoanDurationUpdated(uint256 newMaximumLoanDuration);\\n\\n    /**\\n     * @notice This event is fired whenever a borrower begins a loan by calling NFTfi.beginLoan(), which can only occur\\n     * after both the lender and borrower have approved their ERC721 and ERC20 contracts to use NFTfi, and when they\\n     * both have signed off-chain messages that agree on the terms of the loan.\\n     *\\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     * @param  borrower - The address of the borrower.\\n     * @param  lender - The address of the lender. The lender can change their address by transferring the NFTfi ERC721\\n     * token that they received when the loan began.\\n     */\\n    event LoanStarted(\\n        uint32 indexed loanId,\\n        address indexed borrower,\\n        address indexed lender,\\n        LoanTerms loanTerms,\\n        LoanExtras loanExtras\\n    );\\n\\n    /**\\n     * @notice This event is fired whenever a borrower successfully repays their loan, paying\\n     * principal-plus-interest-minus-fee to the lender in loanERC20Denomination, paying fee to owner in\\n     * loanERC20Denomination, and receiving their NFT collateral back.\\n     *\\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     * @param  borrower - The address of the borrower.\\n     * @param  lender - The address of the lender. The lender can change their address by transferring the NFTfi ERC721\\n     * token that they received when the loan began.\\n     * @param  loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param  nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * @param  amountPaidToLender The amount of ERC20 that the borrower paid to the lender, measured in the smalled\\n     * units of loanERC20Denomination.\\n     * @param  adminFee The amount of interest paid to the contract admins, measured in the smalled units of\\n     * loanERC20Denomination and determined by adminFeeInBasisPoints. This amount never exceeds the amount of interest\\n     * earned.\\n     * @param  revenueShare The amount taken from admin fee amount shared with the partner.\\n     * @param  revenueSharePartner  - The address of the partner that will receive the revenue share.\\n     * @param  nftCollateralContract - The ERC721 contract of the NFT collateral\\n     * @param  loanERC20Denomination - The ERC20 contract of the currency being used as principal/interest for this\\n     * loan.\\n     */\\n    event LoanRepaid(\\n        uint32 indexed loanId,\\n        address indexed borrower,\\n        address indexed lender,\\n        uint256 loanPrincipalAmount,\\n        uint256 nftCollateralId,\\n        uint256 amountPaidToLender,\\n        uint256 adminFee,\\n        uint256 revenueShare,\\n        address revenueSharePartner,\\n        address nftCollateralContract,\\n        address loanERC20Denomination\\n    );\\n\\n    /**\\n     * @notice This event is fired whenever a loan is repaid into escrow\\n     *\\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     */\\n    event EscrowRepay(uint32 indexed loanId);\\n\\n    /**\\n     * @notice This event is fired whenever a lender liquidates an outstanding loan that is owned to them that has\\n     * exceeded its duration. The lender receives the underlying NFT collateral, and the borrower no longer needs to\\n     * repay the loan principal-plus-interest.\\n     *\\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     * @param  borrower - The address of the borrower.\\n     * @param  lender - The address of the lender. The lender can change their address by transferring the NFTfi ERC721\\n     * token that they received when the loan began.\\n     * @param  loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param  nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * @param  loanMaturityDate - The unix time (measured in seconds) that the loan became due and was eligible for\\n     * liquidation.\\n     * @param  loanLiquidationDate - The unix time (measured in seconds) that liquidation occurred.\\n     * @param  nftCollateralContract - The ERC721 contract of the NFT collateral\\n     */\\n    event LoanLiquidated(\\n        uint32 indexed loanId,\\n        address indexed borrower,\\n        address indexed lender,\\n        uint256 loanPrincipalAmount,\\n        uint256 nftCollateralId,\\n        uint256 loanMaturityDate,\\n        uint256 loanLiquidationDate,\\n        address nftCollateralContract\\n    );\\n\\n    /**\\n     * @notice This event is fired when some of the terms of a loan are being renegotiated.\\n     *\\n     * @param loanId - The unique identifier for the loan to be renegotiated\\n     * @param newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\\n     * early.\\n     * @param renegotiationFee Agreed upon fee in loan denomination that borrower pays for the lender for the\\n     * renegotiation, has to be paid with an ERC20 transfer loanERC20Denomination token, uses transfer from,\\n     * frontend will have to propmt an erc20 approve for this from the borrower to the lender\\n     * @param renegotiationAdminFee renegotiationFee admin portion based on determined by adminFeeInBasisPoints\\n     */\\n    event LoanRenegotiated(\\n        uint32 indexed loanId,\\n        address indexed borrower,\\n        address indexed lender,\\n        uint32 newLoanDuration,\\n        uint256 newMaximumRepaymentAmount,\\n        uint256 renegotiationFee,\\n        uint256 renegotiationAdminFee\\n    );\\n\\n    /**\\n     * @notice This event is fired whenever the admin sets a ERC20 permit.\\n     *\\n     * @param erc20Contract - Address of the ERC20 contract.\\n     * @param isPermitted - Signals ERC20 permit.\\n     */\\n    event ERC20Permit(address indexed erc20Contract, bool isPermitted);\\n\\n    /* ************* */\\n    /* CUSTOM ERRORS */\\n    /* ************* */\\n\\n    error LoanDurationOverflow();\\n    error BasisPointsTooHigh();\\n    error NoTokensOwned();\\n    error TokensInEscrow();\\n    error FunctionInformationArityMismatch();\\n    error TokenIsCollateral();\\n    error NFTNotOwned();\\n    error SenderNotBorrower();\\n    error NoNFTsOwned();\\n    error NoTokensInEscrow();\\n    error LoanAlreadyRepaidOrLiquidated();\\n    error LoanNotOverdueYet();\\n    error OnlyLenderCanLiquidate();\\n    error InvalidNonce();\\n    error RenegotiationSignatureInvalid();\\n    error ERC20ZeroAddress();\\n    error CurrencyDenominationNotPermitted();\\n    error NFTCollateralContractNotPermitted();\\n    error LoanDurationExceedsMaximum();\\n    error LoanDurationCannotBeZero();\\n    error AdminFeeChanged();\\n\\n    /* *********** */\\n    /* CONSTRUCTOR */\\n    /* *********** */\\n\\n    /**\\n     * @dev Sets `hub`\\n     *\\n     * @param _admin - Initial admin of this contract.\\n     * @param  _nftfiHub - NFTfiHub address\\n     * @param  _loanCoordinatorKey -\\n     * @param  _permittedErc20s -\\n     */\\n    constructor(\\n        address _admin,\\n        address _nftfiHub,\\n        bytes32 _loanCoordinatorKey,\\n        address[] memory _permittedErc20s\\n    ) BaseLoan(_admin) {\\n        hub = INftfiHub(_nftfiHub);\\n        LOAN_COORDINATOR = _loanCoordinatorKey;\\n        for (uint256 i = 0; i < _permittedErc20s.length; i++) {\\n            _setERC20Permit(_permittedErc20s[i], true);\\n        }\\n    }\\n\\n    /* *************** */\\n    /* ADMIN FUNCTIONS */\\n    /* *************** */\\n\\n    /**\\n     * @notice This function can be called by admins to change the maximumLoanDuration. Note that they can never change\\n     * maximumLoanDuration to be greater than UINT32_MAX, since that's the maximum space alotted for the duration in the\\n     * loan struct.\\n     *\\n     * @param _newMaximumLoanDuration - The new maximum loan duration, measured in seconds.\\n     */\\n    function updateMaximumLoanDuration(uint256 _newMaximumLoanDuration) external onlyOwner {\\n        if (_newMaximumLoanDuration > uint256(type(uint32).max)) {\\n            revert LoanDurationOverflow();\\n        }\\n        maximumLoanDuration = _newMaximumLoanDuration;\\n        emit MaximumLoanDurationUpdated(_newMaximumLoanDuration);\\n    }\\n\\n    /**\\n     * @notice This function can be called by admins to change the percent of interest rates earned that they charge as\\n     * a fee. Note that newAdminFee can never exceed 10,000, since the fee is measured in basis points.\\n     *\\n     * @param _newAdminFeeInBasisPoints - The new admin fee measured in basis points. This is a percent of the interest\\n     * paid upon a loan's completion that go to the contract admins.\\n     */\\n    function updateAdminFee(uint16 _newAdminFeeInBasisPoints) external onlyOwner {\\n        if (_newAdminFeeInBasisPoints > HUNDRED_PERCENT) {\\n            revert BasisPointsTooHigh();\\n        }\\n        adminFeeInBasisPoints = _newAdminFeeInBasisPoints;\\n        emit AdminFeeUpdated(_newAdminFeeInBasisPoints);\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC20 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function drainERC20Airdrop(\\n        address _tokenAddress,\\n        uint256 amount,\\n        address _receiver\\n    ) external onlyOwner {\\n        IERC20 tokenContract = IERC20(_tokenAddress);\\n        uint256 balance = tokenContract.balanceOf(address(this));\\n        if (balance == 0) {\\n            revert NoTokensOwned();\\n        }\\n        if (balance - _escrowErc20Tokens[_tokenAddress] < amount) {\\n            revert TokensInEscrow();\\n        }\\n        tokenContract.safeTransfer(_receiver, amount);\\n    }\\n\\n    /**\\n     * @notice This function can be called by admins to change the permitted status of an ERC20 currency. This includes\\n     * both adding an ERC20 currency to the permitted list and removing it.\\n     *\\n     * @param _erc20 - The address of the ERC20 currency whose permit list status changed.\\n     * @param _permit - The new status of whether the currency is permitted or not.\\n     */\\n    function setERC20Permit(address _erc20, bool _permit) external onlyOwner {\\n        _setERC20Permit(_erc20, _permit);\\n    }\\n\\n    /**\\n     * @notice This function can be called by admins to change the permitted status of a batch of ERC20 currency. This\\n     * includes both adding an ERC20 currency to the permitted list and removing it.\\n     *\\n     * @param _erc20s - The addresses of the ERC20 currencies whose permit list status changed.\\n     * @param _permits - The new statuses of whether the currency is permitted or not.\\n     */\\n    function setERC20Permits(address[] memory _erc20s, bool[] memory _permits) external onlyOwner {\\n        if (_erc20s.length != _permits.length) {\\n            revert FunctionInformationArityMismatch();\\n        }\\n        for (uint256 i = 0; i < _erc20s.length; i++) {\\n            _setERC20Permit(_erc20s[i], _permits[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC721 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _tokenId - id token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function drainERC721Airdrop(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        address _receiver\\n    ) external onlyOwner {\\n        IERC721 tokenContract = IERC721(_tokenAddress);\\n        if (_escrowTokens[_tokenAddress][_tokenId] > 0) {\\n            revert TokenIsCollateral();\\n        }\\n        if (tokenContract.ownerOf(_tokenId) != address(this)) {\\n            revert NFTNotOwned();\\n        }\\n        tokenContract.safeTransferFrom(address(this), _receiver, _tokenId);\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC1155 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _tokenId - id token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function drainERC1155Airdrop(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        address _receiver\\n    ) external onlyOwner {\\n        IERC1155 tokenContract = IERC1155(_tokenAddress);\\n        uint256 amount = tokenContract.balanceOf(address(this), _tokenId);\\n        if (_escrowTokens[_tokenAddress][_tokenId] > 0) {\\n            revert TokenIsCollateral();\\n        }\\n        if (amount == 0) {\\n            revert NoNFTsOwned();\\n        }\\n        tokenContract.safeTransferFrom(address(this), _receiver, _tokenId, amount, \\\"\\\");\\n    }\\n\\n    function mintObligationReceipt(uint32 _loanId) external nonReentrant {\\n        address borrower = loanIdToLoan[_loanId].borrower;\\n        if (msg.sender != borrower) {\\n            revert SenderNotBorrower();\\n        }\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\\n        loanCoordinator.mintObligationReceipt(_loanId, borrower);\\n\\n        delete loanIdToLoan[_loanId].borrower;\\n    }\\n\\n    /**\\n     * @dev makes possible to change loan duration and max repayment amount, loan duration even can be extended if\\n     * loan was expired but not liquidated.\\n     *\\n     * @param _loanId - The unique identifier for the loan to be renegotiated\\n     * @param _newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param _newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\\n     * early.\\n     * @param _renegotiationFee Agreed upon fee in ether that borrower pays for the lender for the renegitiation\\n     * @param _lenderNonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are\\n     * referring instead to nonces that are used by both the lender and the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     * @param _expiry - The date when the renegotiation offer expires\\n     * @param _lenderSignature - The ECDSA signature of the lender, obtained off-chain ahead of time, signing the\\n     * following combination of parameters:\\n     * - _loanId\\n     * - _newLoanDuration\\n     * - _newMaximumRepaymentAmount\\n     * - _lender\\n     * - _expiry\\n     *  - address of this contract\\n     * - chainId\\n     */\\n    function renegotiateLoan(\\n        uint32 _loanId,\\n        uint32 _newLoanDuration,\\n        uint256 _newMaximumRepaymentAmount,\\n        uint256 _renegotiationFee,\\n        uint256 _lenderNonce,\\n        uint256 _expiry,\\n        bytes memory _lenderSignature\\n    ) external whenNotPaused nonReentrant {\\n        _renegotiateLoan(\\n            _loanId,\\n            _newLoanDuration,\\n            _newMaximumRepaymentAmount,\\n            _renegotiationFee,\\n            _lenderNonce,\\n            _expiry,\\n            _lenderSignature\\n        );\\n    }\\n\\n    /**\\n     * @notice This function is called by a anyone to repay a loan. It can be called at any time after the loan has\\n     * begun and before loan expiry.. The caller will pay a pro-rata portion of their interest if the loan is paid off\\n     * early and the loan is pro-rated type, but the complete repayment amount if it is fixed type.\\n     * The the borrower (current owner of the obligation note) will get the collaterl NFT back.\\n     *\\n     * This function is purposefully not pausable in order to prevent an attack where the contract admin's pause the\\n     * contract and hold hostage the NFT's that are still within it.\\n     *\\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     */\\n    function payBackLoan(uint32 _loanId) external nonReentrant {\\n        LoanChecksAndCalculations.payBackChecks(_loanId, hub);\\n        (\\n            address borrower,\\n            address lender,\\n            LoanTerms memory loan,\\n            IDirectLoanCoordinator loanCoordinator\\n        ) = _getPartiesAndData(_loanId);\\n\\n        _payBackLoan(_loanId, borrower, lender, loan);\\n\\n        bool repaid = true;\\n        _resolveLoan(_loanId, borrower, loan, loanCoordinator, repaid);\\n    }\\n\\n    /**\\n     * @notice This function is called by a anyone to repay a loan. It can be called at any time after the loan has\\n     * begun and before loan expiry.. The caller will pay a pro-rata portion of their interest if the loan is paid off\\n     * early and the loan is pro-rated type, but the complete repayment amount if it is fixed type.\\n     * The the borrower (current owner of the obligation note) will get the collaterl NFT back.\\n     *\\n     * This function is purposefully not pausable in order to prevent an attack where the contract admin's pause the\\n     * contract and hold hostage the NFT's that are still within it.\\n     *\\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     */\\n    function payBackLoanSafe(uint32 _loanId) external nonReentrant {\\n        LoanChecksAndCalculations.payBackChecks(_loanId, hub);\\n        (\\n            address borrower,\\n            address lender,\\n            LoanTerms memory loan,\\n            IDirectLoanCoordinator loanCoordinator\\n        ) = _getPartiesAndData(_loanId);\\n\\n        _payBackLoanSafe(_loanId, borrower, lender, loan);\\n\\n        bool repaid = true;\\n        _resolveLoan(_loanId, borrower, loan, loanCoordinator, repaid);\\n    }\\n\\n    /**\\n     * @notice Used for lenders to get their payback from escrow,\\n     * in case the direct loan payback didn't work, because it caused a revert.\\n     *\\n     * @param _token  ERC20 token conract address\\n     */\\n    function getEscrowedPayBack(address _token) external nonReentrant {\\n        uint256 amount = _payBackEscrow[msg.sender][_token];\\n        if (amount == 0) {\\n            revert NoTokensInEscrow();\\n        }\\n        IERC20(_token).safeTransfer(msg.sender, amount);\\n        delete _payBackEscrow[msg.sender][_token];\\n        _escrowErc20Tokens[_token] -= amount;\\n    }\\n\\n    /**\\n     * @notice This function is called by a lender once a loan has finished its duration and the borrower still has not\\n     * repaid. The lender can call this function to seize the underlying NFT collateral, although the lender gives up\\n     * all rights to the principal-plus-collateral by doing so.\\n     *\\n     * This function is purposefully not pausable in order to prevent an attack where the contract admin's pause\\n     * the contract and hold hostage the NFT's that are still within it.\\n     *\\n     * We intentionally allow anybody to call this function, although only the lender will end up receiving the seized\\n     * collateral. We are exploring the possbility of incentivizing users to call this function by using some of the\\n     * admin funds.\\n     *\\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     */\\n    function liquidateOverdueLoan(uint32 _loanId) external nonReentrant {\\n        LoanChecksAndCalculations.checkLoanIdValidity(_loanId, hub);\\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have never been called on this loanId.\\n        // Depending on how the rest of the code turns out, this check may be unnecessary.\\n        if (loanRepaidOrLiquidated[_loanId]) {\\n            revert LoanAlreadyRepaidOrLiquidated();\\n        }\\n\\n        (\\n            address borrower,\\n            address lender,\\n            LoanTerms memory loan,\\n            IDirectLoanCoordinator loanCoordinator\\n        ) = _getPartiesAndData(_loanId);\\n\\n        // Ensure that the loan is indeed overdue, since we can only liquidate overdue loans.\\n        uint256 loanMaturityDate = uint256(loan.loanStartTime) + uint256(loan.loanDuration);\\n        if (block.timestamp <= loanMaturityDate) {\\n            revert LoanNotOverdueYet();\\n        }\\n        if (msg.sender != lender) {\\n            revert OnlyLenderCanLiquidate();\\n        }\\n\\n        bool repaid = false;\\n\\n        _resolveLoan(_loanId, lender, loan, loanCoordinator, repaid);\\n\\n        // Emit an event with all relevant details from this transaction.\\n        emit LoanLiquidated(\\n            _loanId,\\n            borrower,\\n            lender,\\n            loan.loanPrincipalAmount,\\n            loan.nftCollateralId,\\n            loanMaturityDate,\\n            block.timestamp,\\n            loan.nftCollateralContract\\n        );\\n    }\\n\\n    /**\\n     * @notice this function initiates a flashloan to pull an airdrop from a tartget contract\\n     *\\n     * @param _loanId -\\n     * @param _target - address of the airdropping contract\\n     * @param _data - function selector to be called on the airdropping contract\\n     * @param _nftAirdrop - address of the used claiming nft in the drop\\n     * @param _nftAirdropId - id of the used claiming nft in the drop\\n     * @param _is1155 -\\n     * @param _nftAirdropAmount - amount in case of 1155\\n     */\\n\\n    function pullAirdrop(\\n        uint32 _loanId,\\n        address _target,\\n        bytes calldata _data,\\n        address _nftAirdrop,\\n        uint256 _nftAirdropId,\\n        bool _is1155,\\n        uint256 _nftAirdropAmount\\n    ) external nonReentrant {\\n        LoanChecksAndCalculations.checkLoanIdValidity(_loanId, hub);\\n        if (loanRepaidOrLiquidated[_loanId]) {\\n            revert LoanAlreadyRepaidOrLiquidated();\\n        }\\n        LoanTerms memory loan = loanIdToLoan[_loanId];\\n\\n        LoanAirdropUtils.pullAirdrop(\\n            _loanId,\\n            loan,\\n            _target,\\n            _data,\\n            _nftAirdrop,\\n            _nftAirdropId,\\n            _is1155,\\n            _nftAirdropAmount,\\n            hub\\n        );\\n    }\\n\\n    /**\\n     * @notice this function initiates a flashloan to pull an airdrop from a tartget contract\\n     *\\n     * @param _loanId -\\n     * @param _target - address of the airdropping contract\\n     * @param _data - function selector to be called on the airdropping contract\\n     */\\n\\n    function pullAirdropReceiver(\\n        uint32 _loanId,\\n        address _target,\\n        bytes calldata _data\\n    ) external nonReentrant {\\n        LoanChecksAndCalculations.checkLoanIdValidity(_loanId, hub);\\n        if (loanRepaidOrLiquidated[_loanId]) {\\n            revert LoanAlreadyRepaidOrLiquidated();\\n        }\\n        LoanTerms memory loan = loanIdToLoan[_loanId];\\n\\n        LoanAirdropUtils.pullAirdropReceiver(_loanId, loan, _target, _data, hub);\\n    }\\n\\n    /**\\n     * @notice this function creates a proxy contract wrapping the collateral to be able to catch an expected airdrop\\n     *\\n     * @param _loanId -\\n     */\\n\\n    function wrapCollateral(uint32 _loanId) external nonReentrant {\\n        LoanChecksAndCalculations.checkLoanIdValidity(_loanId, hub);\\n        if (loanRepaidOrLiquidated[_loanId]) {\\n            revert LoanAlreadyRepaidOrLiquidated();\\n        }\\n        LoanTerms storage loan = loanIdToLoan[_loanId];\\n\\n        _escrowTokens[loan.nftCollateralContract][loan.nftCollateralId] -= 1;\\n        (address instance, uint256 receiverId) = LoanAirdropUtils.wrapCollateral(_loanId, loan, hub);\\n        _escrowTokens[instance][receiverId] += 1;\\n    }\\n\\n    /**\\n     * @notice This function can be called by either a lender or a borrower to cancel all off-chain orders that they\\n     * have signed that contain this nonce. If the off-chain orders were created correctly, there should only be one\\n     * off-chain order that contains this nonce at all.\\n     *\\n     * The nonce referred to here is not the same as an Ethereum account's nonce. We are referring\\n     * instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi\\n     * orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order.\\n     * Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the\\n     * borrower in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would\\n     * submit a user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     *\\n     * @param  _nonce - User nonce\\n     */\\n    function cancelLoanCommitmentBeforeLoanHasBegun(uint256 _nonce) external {\\n        if (_nonceHasBeenUsedForUser[msg.sender][_nonce]) {\\n            revert InvalidNonce();\\n        }\\n        _nonceHasBeenUsedForUser[msg.sender][_nonce] = true;\\n    }\\n\\n    /* ******************* */\\n    /* READ-ONLY FUNCTIONS */\\n    /* ******************* */\\n\\n    /**\\n     * @notice This function can be used to view the current quantity of the ERC20 currency used in the specified loan\\n     * required by the borrower to repay their loan, measured in the smallest unit of the ERC20 currency.\\n     *\\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     *\\n     * @return The amount of the specified ERC20 currency required to pay back this loan, measured in the smallest unit\\n     * of the specified ERC20 currency.\\n     */\\n    function getPayoffAmount(uint32 _loanId) external view virtual returns (uint256);\\n\\n    /**\\n     * @notice This function can be used to view whether a particular nonce for a particular user has already been used,\\n     * either from a successful loan or a cancelled off-chain order.\\n     *\\n     * @param _user - The address of the user. This function works for both lenders and borrowers alike.\\n     * @param  _nonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are referring\\n     * instead to nonces that are used by both the lender and the borrower when they are first signing off-chain\\n     * NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain\\n     * order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or\\n     * the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     *\\n     * @return A bool representing whether or not this nonce has been used for this user.\\n     */\\n    function getWhetherNonceHasBeenUsedForUser(address _user, uint256 _nonce) external view override returns (bool) {\\n        return _nonceHasBeenUsedForUser[_user][_nonce];\\n    }\\n\\n    /**\\n     * @notice This function can be called by anyone to get the permit associated with the erc20 contract.\\n     *\\n     * @param _erc20 - The address of the erc20 contract.\\n     *\\n     * @return Returns whether the erc20 is permitted\\n     */\\n    function getERC20Permit(address _erc20) public view override returns (bool) {\\n        return erc20Permits[_erc20];\\n    }\\n\\n    /* ****************** */\\n    /* INTERNAL FUNCTIONS */\\n    /* ****************** */\\n\\n    /**\\n     * @dev makes possible to change loan duration and max repayment amount, loan duration even can be extended if\\n     * loan was expired but not liquidated. IMPORTANT: Frontend will have to propt the caller to do an ERC20 approve for\\n     * the fee amount from themselves (borrower/obligation reciept holder) to the lender (promissory note holder)\\n     *\\n     * @param _loanId - The unique identifier for the loan to be renegotiated\\n     * @param _newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param _newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\\n     * early.\\n     * @param _renegotiationFee Agreed upon fee in loan denomination that borrower pays for the lender and\\n     * the admin for the renegotiation, has to be paid with an ERC20 transfer loanERC20Denomination token,\\n     * uses transfer from, frontend will have to propmt an erc20 approve for this from the borrower to the lender,\\n     * admin fee is calculated by the loan's loanAdminFeeInBasisPoints value\\n     * @param _lenderNonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are\\n     * referring instead to nonces that are used by both the lender and the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\\n     , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     * @param _expiry - The date when the renegotiation offer expires\\n     * @param _lenderSignature - The ECDSA signature of the lender, obtained off-chain ahead of time, signing the\\n     * following combination of parameters:\\n     * - _loanId\\n     * - _newLoanDuration\\n     * - _newMaximumRepaymentAmount\\n     * - _lender\\n     * - _expiry\\n     * - address of this contract\\n     * - chainId\\n     */\\n    function _renegotiateLoan(\\n        uint32 _loanId,\\n        uint32 _newLoanDuration,\\n        uint256 _newMaximumRepaymentAmount,\\n        uint256 _renegotiationFee,\\n        uint256 _lenderNonce,\\n        uint256 _expiry,\\n        bytes memory _lenderSignature\\n    ) internal {\\n        LoanTerms storage loan = loanIdToLoan[_loanId];\\n\\n        (address borrower, address lender) = LoanChecksAndCalculations.renegotiationChecks(\\n            loan,\\n            _loanId,\\n            _newLoanDuration,\\n            _newMaximumRepaymentAmount,\\n            _lenderNonce,\\n            hub\\n        );\\n\\n        _nonceHasBeenUsedForUser[lender][_lenderNonce] = true;\\n\\n        if (\\n            !NFTfiSigningUtils.isValidLenderRenegotiationSignature(\\n                _loanId,\\n                _newLoanDuration,\\n                _newMaximumRepaymentAmount,\\n                _renegotiationFee,\\n                Signature({signer: lender, nonce: _lenderNonce, expiry: _expiry, signature: _lenderSignature})\\n            )\\n        ) {\\n            revert RenegotiationSignatureInvalid();\\n        }\\n\\n        uint256 renegotiationAdminFee;\\n        /**\\n         * @notice Transfers fee to the lender immediately\\n         * @dev implements Checks-Effects-Interactions pattern by modifying state only after\\n         * the transfer happened successfully, we also add the nonReentrant modifier to\\n         * the pbulic versions\\n         */\\n        if (_renegotiationFee > 0) {\\n            renegotiationAdminFee = LoanChecksAndCalculations.computeAdminFee(\\n                _renegotiationFee,\\n                loan.loanAdminFeeInBasisPoints\\n            );\\n            // Transfer principal-plus-interest-minus-fees from the caller (always has to be borrower) to lender\\n            IERC20(loan.loanERC20Denomination).safeTransferFrom(\\n                borrower,\\n                lender,\\n                _renegotiationFee - renegotiationAdminFee\\n            );\\n            // Transfer fees from the caller (always has to be borrower) to admins\\n            IERC20(loan.loanERC20Denomination).safeTransferFrom(borrower, owner(), renegotiationAdminFee);\\n        }\\n\\n        loan.loanDuration = _newLoanDuration;\\n        loan.maximumRepaymentAmount = _newMaximumRepaymentAmount;\\n\\n        // we have to reinstate borrower record here, because obligation receipt gets deleted in reMint\\n        if (loan.borrower == address(0)) {\\n            loan.borrower = borrower;\\n        }\\n        IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR)).resetSmartNfts(_loanId, lender);\\n\\n        emit LoanRenegotiated(\\n            _loanId,\\n            borrower,\\n            lender,\\n            _newLoanDuration,\\n            _newMaximumRepaymentAmount,\\n            _renegotiationFee,\\n            renegotiationAdminFee\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer collateral NFT from borrower to this contract and principal from lender to the borrower and\\n     * registers the new loan through the loan coordinator.\\n     *\\n     * @param _loanType - The type of loan it is being created\\n     * @param _loanTerms - Struct containing the loan's settings\\n     * @param _loanExtras - Struct containing some loan's extra settings, needed to avoid stack too deep\\n     * @param _lender - The address of the lender.\\n     * @param _referrer - The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * that there is no referrer.\\n     */\\n    function _createLoan(\\n        bytes32 _loanType,\\n        LoanTerms memory _loanTerms,\\n        LoanExtras memory _loanExtras,\\n        address _borrower,\\n        address _lender,\\n        address _referrer\\n    ) internal returns (uint32) {\\n        // Transfer collateral from borrower to this contract to be held until\\n        // loan completion.\\n        _transferNFT(_loanTerms, _borrower, address(this));\\n\\n        return _createLoanNoNftTransfer(_loanType, _loanTerms, _loanExtras, _borrower, _lender, _referrer);\\n    }\\n\\n    /**\\n     * @dev Transfer principal from lender to the borrower and\\n     * registers the new loan through the loan coordinator.\\n     *\\n     * @param _loanType - The type of loan it is being created\\n     * @param _loanTerms - Struct containing the loan's settings\\n     * @param _loanExtras - Struct containing some loan's extra settings, needed to avoid stack too deep\\n     * @param _lender - The address of the lender.\\n     * @param _referrer - The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * that there is no referrer.\\n     */\\n    function _createLoanNoNftTransfer(\\n        bytes32 _loanType,\\n        LoanTerms memory _loanTerms,\\n        LoanExtras memory _loanExtras,\\n        address _borrower,\\n        address _lender,\\n        address _referrer\\n    ) internal returns (uint32 loanId) {\\n        _escrowTokens[_loanTerms.nftCollateralContract][_loanTerms.nftCollateralId] += 1;\\n\\n        uint256 referralfee = LoanChecksAndCalculations.computeReferralFee(\\n            _loanTerms.loanPrincipalAmount,\\n            _loanExtras.referralFeeInBasisPoints,\\n            _referrer\\n        );\\n        uint256 principalAmount = _loanTerms.loanPrincipalAmount - referralfee;\\n        if (referralfee > 0) {\\n            // Transfer the referral fee from lender to referrer.\\n            IERC20(_loanTerms.loanERC20Denomination).safeTransferFrom(_lender, _referrer, referralfee);\\n        }\\n        // Transfer principal from lender to borrower.\\n        IERC20(_loanTerms.loanERC20Denomination).safeTransferFrom(_lender, _borrower, principalAmount);\\n\\n        // Issue an ERC721 promissory note to the lender that gives them the\\n        // right to either the principal-plus-interest or the collateral,\\n        // and an obligation note to the borrower that gives them the\\n        // right to pay back the loan and get the collateral back.\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\\n        loanId = loanCoordinator.registerLoan(_lender, _loanType);\\n\\n        // Add the loan to storage before moving collateral/principal to follow\\n        // the Checks-Effects-Interactions pattern.\\n        loanIdToLoan[loanId] = _loanTerms;\\n        loanIdToLoanExtras[loanId] = _loanExtras;\\n\\n        return loanId;\\n    }\\n\\n    /**\\n     * @dev Transfers several types of NFTs using a wrapper that knows how to handle each case.\\n     *\\n     * @param _loanTerms - Struct containing all the loan's parameters\\n     * @param _sender - Current owner of the NFT\\n     * @param _recipient - Recipient of the transfer\\n     */\\n    function _transferNFT(\\n        LoanTerms memory _loanTerms,\\n        address _sender,\\n        address _recipient\\n    ) internal {\\n        Address.functionDelegateCall(\\n            _loanTerms.nftCollateralWrapper,\\n            abi.encodeWithSelector(\\n                INftWrapper(_loanTerms.nftCollateralWrapper).transferNFT.selector,\\n                _sender,\\n                _recipient,\\n                _loanTerms.nftCollateralContract,\\n                _loanTerms.nftCollateralId\\n            ),\\n            \\\"NFT not successfully transferred\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice This function is called by a anyone to repay a loan. It can be called at any time after the loan has\\n     * begun and before loan expiry.. The caller will pay a pro-rata portion of their interest if the loan is paid off\\n     * early and the loan is pro-rated type, but the complete repayment amount if it is fixed type.\\n     * The the borrower (current owner of the obligation note) will get the collaterl NFT back.\\n     *\\n     * This function is purposefully not pausable in order to prevent an attack where the contract admin's pause the\\n     * contract and hold hostage the NFT's that are still within it.\\n     *\\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     */\\n    function _payBackLoan(\\n        uint32 _loanId,\\n        address _borrower,\\n        address _lender,\\n        LoanTerms memory _loan\\n    ) internal {\\n        // Fetch loan details from storage, but store them in memory for the sake of saving gas.\\n        LoanExtras memory loanExtras = loanIdToLoanExtras[_loanId];\\n\\n        (uint256 adminFee, uint256 payoffAmount) = _payoffAndFee(_loan);\\n\\n        // Transfer principal-plus-interest-minus-fees from the caller to lender\\n        IERC20(_loan.loanERC20Denomination).safeTransferFrom(msg.sender, _lender, payoffAmount);\\n\\n        uint256 revenueShare = LoanChecksAndCalculations.computeRevenueShare(\\n            adminFee,\\n            loanExtras.revenueShareInBasisPoints\\n        );\\n        // PermittedPartners contract doesn't allow to set a revenueShareInBasisPoints for address zero so revenuShare\\n        // > 0 implies that revenueSharePartner ~= address(0), BUT revenueShare can be zero for a partener when the\\n        // adminFee is low\\n        if (revenueShare > 0 && loanExtras.revenueSharePartner != address(0)) {\\n            adminFee -= revenueShare;\\n            // Transfer revenue share from the caller to permitted partner\\n            IERC20(_loan.loanERC20Denomination).safeTransferFrom(\\n                msg.sender,\\n                loanExtras.revenueSharePartner,\\n                revenueShare\\n            );\\n        }\\n\\n        // Transfer fees from the caller to admins\\n        IERC20(_loan.loanERC20Denomination).safeTransferFrom(msg.sender, owner(), adminFee);\\n\\n        // Emit an event with all relevant details from this transaction.\\n        emit LoanRepaid(\\n            _loanId,\\n            _borrower,\\n            _lender,\\n            _loan.loanPrincipalAmount,\\n            _loan.nftCollateralId,\\n            payoffAmount,\\n            adminFee,\\n            revenueShare,\\n            loanExtras.revenueSharePartner, // this could be a non address zero even if revenueShare is 0\\n            _loan.nftCollateralContract,\\n            _loan.loanERC20Denomination\\n        );\\n    }\\n\\n    /**\\n     * @notice This function is called by a anyone to repay a loan. It can be called at any time after the loan has\\n     * begun and before loan expiry.. The caller will pay a pro-rata portion of their interest if the loan is paid off\\n     * early and the loan is pro-rated type, but the complete repayment amount if it is fixed type.\\n     * The the borrower (current owner of the obligation note) will get the collaterl NFT back.\\n     *\\n     * This function is purposefully not pausable in order to prevent an attack where the contract admin's pause the\\n     * contract and hold hostage the NFT's that are still within it.\\n     *\\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     */\\n    function _payBackLoanSafe(\\n        uint32 _loanId,\\n        address _borrower,\\n        address _lender,\\n        LoanTerms memory _loan\\n    ) internal {\\n        // Fetch loan details from storage, but store them in memory for the sake of saving gas.\\n        LoanExtras memory loanExtras = loanIdToLoanExtras[_loanId];\\n\\n        (uint256 adminFee, uint256 payoffAmount) = _payoffAndFee(_loan);\\n\\n        // use try to detect the case of erc20 transfer failing for some reason (e.g. USDC blacklisted address)\\n        try IERC20(_loan.loanERC20Denomination).transferFrom(msg.sender, _lender, payoffAmount) {\\n            // solhint-disable-previous-line no-empty-blocks\\n        } catch {\\n            // if ERC20 transfer fails, we store the amount in escrow in this contract\\n            IERC20(_loan.loanERC20Denomination).safeTransferFrom(msg.sender, address(this), payoffAmount);\\n            _payBackEscrow[_lender][_loan.loanERC20Denomination] += payoffAmount;\\n            _escrowErc20Tokens[_loan.loanERC20Denomination] += payoffAmount;\\n            emit EscrowRepay(_loanId);\\n        }\\n\\n        uint256 revenueShare = LoanChecksAndCalculations.computeRevenueShare(\\n            adminFee,\\n            loanExtras.revenueShareInBasisPoints\\n        );\\n\\n        // PermittedPartners contract doesn't allow to set a revenueShareInBasisPoints for address zero so revenuShare\\n        // > 0 implies that revenueSharePartner ~= address(0), BUT revenueShare can be zero for a partener when the\\n        // adminFee is low\\n        if (revenueShare > 0 && loanExtras.revenueSharePartner != address(0)) {\\n            adminFee -= revenueShare;\\n            // Transfer revenue share from the caller to permitted partner\\n            // try is here so if for whatever reason (USCD blacklist specifically) this\\n            // transfer would fail the borrowerr still can pay back and get their nft back\\n            // revenue share can be later drained by us and distributed manually\\n            try\\n                IERC20(_loan.loanERC20Denomination).transferFrom(\\n                    msg.sender,\\n                    loanExtras.revenueSharePartner,\\n                    revenueShare\\n                )\\n            {\\n                // solhint-disable-previous-line no-empty-blocks\\n            } catch {\\n                IERC20(_loan.loanERC20Denomination).safeTransferFrom(msg.sender, address(this), revenueShare);\\n            }\\n        }\\n\\n        // Transfer fees from the caller to admins\\n        // try is here so if for whatever reason (USCD blacklist specifically) this\\n        // transfer would fail the borrowerr still can pay back and get their nft back\\n        // admin fee can be later drained by us\\n        try IERC20(_loan.loanERC20Denomination).transferFrom(msg.sender, owner(), adminFee) {\\n            // solhint-disable-previous-line no-empty-blocks\\n        } catch {\\n            IERC20(_loan.loanERC20Denomination).safeTransferFrom(msg.sender, address(this), adminFee);\\n        }\\n\\n        // Emit an event with all relevant details from this transaction.\\n        emit LoanRepaid(\\n            _loanId,\\n            _borrower,\\n            _lender,\\n            _loan.loanPrincipalAmount,\\n            _loan.nftCollateralId,\\n            payoffAmount,\\n            adminFee,\\n            revenueShare,\\n            loanExtras.revenueSharePartner, // this could be a non address zero even if revenueShare is 0\\n            _loan.nftCollateralContract,\\n            _loan.loanERC20Denomination\\n        );\\n    }\\n\\n    /**\\n     * @notice A convenience function with shared functionality between `payBackLoan` and `liquidateOverdueLoan`.\\n     *\\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     * @param _nftReceiver - The receiver of the collateral nft. The borrower when `payBackLoan` or the lender when\\n     * `liquidateOverdueLoan`.\\n     * @param _loanTerms - The main Loan Terms struct. This data is saved upon loan creation on loanIdToLoan.\\n     * @param _loanCoordinator - The loan coordinator used when creating the loan.\\n     */\\n    function _resolveLoan(\\n        uint32 _loanId,\\n        address _nftReceiver,\\n        LoanTerms memory _loanTerms,\\n        IDirectLoanCoordinator _loanCoordinator,\\n        bool _repaid\\n    ) internal {\\n        _resolveLoanNoNftTransfer(_loanId, _loanTerms, _loanCoordinator, _repaid);\\n        // Transfer collateral from this contract to the lender, since the lender is seizing collateral for an overdue\\n        // loan\\n        _transferNFT(_loanTerms, address(this), _nftReceiver);\\n    }\\n\\n    /**\\n     * @notice Resolving the loan without trasferring the nft to provide a base for the bundle\\n     * break up of the bundled loans\\n     *\\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     * @param _loanTerms - The main Loan Terms struct. This data is saved upon loan creation on loanIdToLoan.\\n     * @param _loanCoordinator - The loan coordinator used when creating the loan.\\n     */\\n    function _resolveLoanNoNftTransfer(\\n        uint32 _loanId,\\n        LoanTerms memory _loanTerms,\\n        IDirectLoanCoordinator _loanCoordinator,\\n        bool _repaid\\n    ) internal {\\n        // Mark loan as liquidated before doing any external transfers to follow the Checks-Effects-Interactions design\\n        // pattern\\n        loanRepaidOrLiquidated[_loanId] = true;\\n\\n        _escrowTokens[_loanTerms.nftCollateralContract][_loanTerms.nftCollateralId] -= 1;\\n\\n        // Destroy the lender's promissory note for this loan and borrower obligation receipt\\n        _loanCoordinator.resolveLoan(_loanId, _repaid);\\n    }\\n\\n    /**\\n     * @notice This function can be called by admins to change the permitted status of an ERC20 currency. This includes\\n     * both adding an ERC20 currency to the permitted list and removing it.\\n     *\\n     * @param _erc20 - The address of the ERC20 currency whose permit list status changed.\\n     * @param _permit - The new status of whether the currency is permitted or not.\\n     */\\n    function _setERC20Permit(address _erc20, bool _permit) internal {\\n        if (_erc20 == address(0)) {\\n            revert ERC20ZeroAddress();\\n        }\\n        erc20Permits[_erc20] = _permit;\\n\\n        emit ERC20Permit(_erc20, _permit);\\n    }\\n\\n    /**\\n     * @dev Performs some validation checks over loan parameters\\n     *\\n     */\\n    function _loanSanityChecks(LoanData.Offer memory _offer, address _nftWrapper) internal view {\\n        if (!getERC20Permit(_offer.loanERC20Denomination)) {\\n            revert CurrencyDenominationNotPermitted();\\n        }\\n        if (_nftWrapper == address(0)) {\\n            revert NFTCollateralContractNotPermitted();\\n        }\\n        if (uint256(_offer.loanDuration) > maximumLoanDuration) {\\n            revert LoanDurationExceedsMaximum();\\n        }\\n        if (uint256(_offer.loanDuration) == 0) {\\n            revert LoanDurationCannotBeZero();\\n        }\\n        if (_offer.loanAdminFeeInBasisPoints != adminFeeInBasisPoints) {\\n            revert AdminFeeChanged();\\n        }\\n    }\\n\\n    /**\\n     * @dev reads some variable values of a loan for payback functions, created to reduce code repetition\\n     */\\n    function _getPartiesAndData(uint32 _loanId)\\n        internal\\n        view\\n        returns (\\n            address borrower,\\n            address lender,\\n            LoanTerms memory loan,\\n            IDirectLoanCoordinator loanCoordinator\\n        )\\n    {\\n        loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\\n        IDirectLoanCoordinator.Loan memory loanCoordinatorData = loanCoordinator.getLoanData(_loanId);\\n        uint256 smartNftId = loanCoordinatorData.smartNftId;\\n        // Fetch loan details from storage, but store them in memory for the sake of saving gas.\\n        loan = loanIdToLoan[_loanId];\\n        if (loan.borrower != address(0)) {\\n            borrower = loan.borrower;\\n        } else {\\n            // Fetch current owner of loan obligation note.\\n            borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(smartNftId);\\n        }\\n        lender = IERC721(loanCoordinator.promissoryNoteToken()).ownerOf(smartNftId);\\n    }\\n\\n    /**\\n     * @dev Creates a `LoanExtras` struct using data sent as the borrower's extra settings.\\n     * This is needed in order to avoid stack too deep issues.\\n     */\\n    function _setupLoanExtras(address _revenueSharePartner, uint16 _referralFeeInBasisPoints)\\n        internal\\n        view\\n        returns (LoanExtras memory)\\n    {\\n        // Save loan details to a struct in memory first, to save on gas if any\\n        // of the below checks fail, and to avoid the \\\"Stack Too Deep\\\" error by\\n        // clumping the parameters together into one struct held in memory.\\n        return\\n            LoanExtras({\\n                revenueSharePartner: _revenueSharePartner,\\n                revenueShareInBasisPoints: LoanChecksAndCalculations.getRevenueSharePercent(_revenueSharePartner, hub),\\n                referralFeeInBasisPoints: _referralFeeInBasisPoints\\n            });\\n    }\\n\\n    /**\\n     * @dev Calculates the payoff amount and admin fee\\n     */\\n    function _payoffAndFee(LoanTerms memory _loanTerms) internal view virtual returns (uint256, uint256);\\n\\n    /**\\n     * @dev Checks that the collateral is a supported contracts and returns what wrapper to use for the loan's NFT\\n     * collateral contract.\\n     *\\n     * @param _nftCollateralContract - The address of the the NFT collateral contract.\\n     *\\n     * @return Address of the NftWrapper to use for the loan's NFT collateral.\\n     */\\n    function _getWrapper(address _nftCollateralContract) internal view returns (address) {\\n        return IPermittedNFTs(hub.getContract(ContractKeys.PERMITTED_NFTS)).getNFTWrapper(_nftCollateralContract);\\n    }\\n}\\n\",\"keccak256\":\"0x4acf8803a68b42cabd584e2e4bba54fea9e25ba5fbe6a5d1c1f1288cd8a5e277\",\"license\":\"BUSL-1.1\"},\"contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./DirectLoanBaseMinimal.sol\\\";\\nimport \\\"../../../utils/ContractKeys.sol\\\";\\n\\n/**\\n * @title  DirectLoanFixedOffer\\n * @author NFTfi\\n * @notice Main contract for NFTfi Direct Loans Fixed Type. This contract manages the ability to create NFT-backed\\n * peer-to-peer loans of type Fixed (agreed to be a fixed-repayment loan) where the borrower pays the\\n * maximumRepaymentAmount regardless of whether they repay early or not.\\n *\\n * There are two ways to commence an NFT-backed loan:\\n *\\n * a. The borrower accepts a lender's offer by calling `acceptOffer`.\\n *   1. the borrower calls nftContract.approveAll(NFTfi), approving the NFTfi contract to move their NFT's on their\\n * be1alf.\\n *   2. the lender calls erc20Contract.approve(NFTfi), allowing NFTfi to move the lender's ERC20 tokens on their\\n * behalf.\\n *   3. the lender signs an off-chain message, proposing its offer terms.\\n *   4. the borrower calls `acceptOffer` to accept these terms and enter into the loan. The NFT is stored in\\n * the contract, the borrower receives the loan principal in the specified ERC20 currency, the lender receives an\\n * NFTfi promissory note (in ERC721 form) that represents the rights to either the principal-plus-interest, or the\\n * underlying NFT collateral if the borrower does not pay back in time, and the borrower receives obligation receipt\\n * (in ERC721 form) that gives them the right to pay back the loan and get the collateral back.\\n *\\n * The lender can freely transfer and trade this ERC721 promissory note as they wish, with the knowledge that\\n * transferring the ERC721 promissory note tranfsers the rights to principal-plus-interest and/or collateral, and that\\n * they will no longer have a claim on the loan. The ERC721 promissory note itself represents that claim.\\n *\\n * The borrower can freely transfer and trade this ERC721 obligaiton receipt as they wish, with the knowledge that\\n * transferring the ERC721 obligaiton receipt tranfsers the rights right to pay back the loan and get the collateral\\n * back.\\n *\\n *\\n * A loan may end in one of two ways:\\n * - First, a borrower may call NFTfi.payBackLoan() and pay back the loan plus interest at any time, in which case they\\n * receive their NFT back in the same transaction.\\n * - Second, if the loan's duration has passed and the loan has not been paid back yet, a lender can call\\n * NFTfi.liquidateOverdueLoan(), in which case they receive the underlying NFT collateral and forfeit the rights to the\\n * principal-plus-interest, which the borrower now keeps.\\n */\\ncontract DirectLoanFixedOffer is DirectLoanBaseMinimal {\\n    /* ************* */\\n    /* CUSTOM ERRORS */\\n    /* ************* */\\n\\n    error InvalidLenderSignature();\\n    error NegativeInterestRate();\\n\\n    /* *********** */\\n    /* CONSTRUCTOR */\\n    /* *********** */\\n\\n    /**\\n     * @dev Sets `hub` and permitted erc20-s\\n     *\\n     * @param _admin - Initial admin of this contract.\\n     * @param  _nftfiHub - NFTfiHub address\\n     * @param  _permittedErc20s - list of permitted ERC20 token contract addresses\\n     */\\n    constructor(\\n        address _admin,\\n        address _nftfiHub,\\n        address[] memory _permittedErc20s\\n    )\\n        DirectLoanBaseMinimal(\\n            _admin,\\n            _nftfiHub,\\n            ContractKeys.getIdFromStringKey(\\\"DIRECT_LOAN_COORDINATOR\\\"),\\n            _permittedErc20s\\n        )\\n    {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /* ********* */\\n    /* FUNCTIONS */\\n    /* ********* */\\n\\n    /**\\n     * @notice This function is called by the borrower when accepting a lender's offer to begin a loan.\\n     *\\n     * @param _offer - The offer made by the lender.\\n     * @param _signature - The components of the lender's signature.\\n     * @param _borrowerSettings - Some extra parameters that the borrower needs to set when accepting an offer.\\n     */\\n    function acceptOffer(\\n        Offer memory _offer,\\n        Signature memory _signature,\\n        BorrowerSettings memory _borrowerSettings\\n    ) external virtual whenNotPaused nonReentrant returns (uint32) {\\n        address nftWrapper = _getWrapper(_offer.nftCollateralContract);\\n        _loanSanityChecks(_offer, nftWrapper);\\n        _loanSanityChecksOffer(_offer);\\n        return\\n            _acceptOffer(\\n                _setupLoanTerms(_offer, nftWrapper),\\n                _setupLoanExtras(_borrowerSettings.revenueSharePartner, _borrowerSettings.referralFeeInBasisPoints),\\n                _offer,\\n                _signature\\n            );\\n    }\\n\\n    /* ******************* */\\n    /* READ-ONLY FUNCTIONS */\\n    /* ******************* */\\n\\n    /**\\n     * @notice This function returns a bytes32 value identifying the loan type for the coordinator\\n     */\\n    // all caps, because used to be a constant storage and the interface should be the same\\n    // solhint-disable-next-line func-name-mixedcase\\n    function LOAN_TYPE() public pure virtual returns (bytes32) {\\n        return bytes32(\\\"DIRECT_LOAN_FIXED_OFFER\\\");\\n    }\\n\\n    /**\\n     * @notice This function can be used to view the current quantity of the ERC20 currency used in the specified loan\\n     * required by the borrower to repay their loan, measured in the smallest unit of the ERC20 currency.\\n     *\\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     *\\n     * @return The amount of the specified ERC20 currency required to pay back this loan, measured in the smallest unit\\n     * of the specified ERC20 currency.\\n     */\\n    function getPayoffAmount(uint32 _loanId) external view override returns (uint256) {\\n        LoanTerms storage loan = loanIdToLoan[_loanId];\\n        return loan.maximumRepaymentAmount;\\n    }\\n\\n    /* ****************** */\\n    /* INTERNAL FUNCTIONS */\\n    /* ****************** */\\n\\n    /**\\n     * @notice This function is called by the borrower when accepting a lender's offer to begin a loan.\\n     *\\n     * @param _loanTerms - The main Loan Terms struct. This data is saved upon loan creation on loanIdToLoan.\\n     * @param _loanExtras - The main Loan Terms struct. This data is saved upon loan creation on loanIdToLoanExtras.\\n     * @param _offer - The offer made by the lender.\\n     * @param _signature - The components of the lender's signature.\\n     */\\n    function _acceptOffer(\\n        LoanTerms memory _loanTerms,\\n        LoanExtras memory _loanExtras,\\n        Offer memory _offer,\\n        Signature memory _signature\\n    ) internal virtual returns (uint32) {\\n        // Check loan nonces. These are different from Ethereum account nonces.\\n        // Here, these are uint256 numbers that should uniquely identify\\n        // each signature for each user (i.e. each user should only create one\\n        // off-chain signature for each nonce, with a nonce being any arbitrary\\n        // uint256 value that they have not used yet for an off-chain NFTfi\\n        // signature).\\n        if (_nonceHasBeenUsedForUser[_signature.signer][_signature.nonce]) {\\n            revert InvalidNonce();\\n        }\\n\\n        _nonceHasBeenUsedForUser[_signature.signer][_signature.nonce] = true;\\n\\n        if (!NFTfiSigningUtils.isValidLenderSignature(_offer, _signature)) {\\n            revert InvalidLenderSignature();\\n        }\\n\\n        uint32 loanId = _createLoan(\\n            LOAN_TYPE(),\\n            _loanTerms,\\n            _loanExtras,\\n            msg.sender,\\n            _signature.signer,\\n            _offer.referrer\\n        );\\n\\n        // Emit an event with all relevant details from this transaction.\\n        emit LoanStarted(loanId, msg.sender, _signature.signer, _loanTerms, _loanExtras);\\n        return loanId;\\n    }\\n\\n    /**\\n     * @dev Creates a `LoanTerms` struct using data sent as the lender's `_offer` on `acceptOffer`.\\n     * This is needed in order to avoid stack too deep issues.\\n     * Since this is a Fixed loan type loanInterestRateForDurationInBasisPoints is ignored.\\n     */\\n    function _setupLoanTerms(Offer memory _offer, address _nftWrapper) internal view returns (LoanTerms memory) {\\n        return\\n            LoanTerms({\\n                loanERC20Denomination: _offer.loanERC20Denomination,\\n                loanPrincipalAmount: _offer.loanPrincipalAmount,\\n                maximumRepaymentAmount: _offer.maximumRepaymentAmount,\\n                nftCollateralContract: _offer.nftCollateralContract,\\n                nftCollateralWrapper: _nftWrapper,\\n                nftCollateralId: _offer.nftCollateralId,\\n                loanStartTime: uint64(block.timestamp),\\n                loanDuration: _offer.loanDuration,\\n                loanInterestRateForDurationInBasisPoints: uint16(0),\\n                loanAdminFeeInBasisPoints: _offer.loanAdminFeeInBasisPoints,\\n                borrower: msg.sender\\n            });\\n    }\\n\\n    /**\\n     * @dev Calculates the payoff amount and admin fee\\n     *\\n     * @param _loanTerms - Struct containing all the loan's parameters\\n     */\\n    function _payoffAndFee(LoanTerms memory _loanTerms)\\n        internal\\n        pure\\n        override\\n        returns (uint256 adminFee, uint256 payoffAmount)\\n    {\\n        // Calculate amounts to send to lender and admins\\n        uint256 interestDue = _loanTerms.maximumRepaymentAmount - _loanTerms.loanPrincipalAmount;\\n        adminFee = LoanChecksAndCalculations.computeAdminFee(\\n            interestDue,\\n            uint256(_loanTerms.loanAdminFeeInBasisPoints)\\n        );\\n        payoffAmount = _loanTerms.maximumRepaymentAmount - adminFee;\\n    }\\n\\n    /**\\n     * @dev Function that performs some validation checks over loan parameters when accepting an offer\\n     *\\n     */\\n    function _loanSanityChecksOffer(LoanData.Offer memory _offer) internal pure {\\n        if (_offer.maximumRepaymentAmount < _offer.loanPrincipalAmount) {\\n            revert NegativeInterestRate();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb32a56389ca30eecbfac98a045ba6e45db28e83d9802574d912efacddcc56c55\",\"license\":\"BUSL-1.1\"},\"contracts/loans/direct/loanTypes/IDirectLoanBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\nimport \\\"./LoanData.sol\\\";\\n\\npragma solidity 0.8.4;\\n\\ninterface IDirectLoanBase {\\n    function maximumLoanDuration() external view returns (uint256);\\n\\n    function adminFeeInBasisPoints() external view returns (uint16);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function LOAN_COORDINATOR() external view returns (bytes32);\\n\\n    function loanIdToLoan(uint32)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint32,\\n            uint16,\\n            uint16,\\n            address,\\n            uint64,\\n            address,\\n            address\\n        );\\n\\n    function loanRepaidOrLiquidated(uint32) external view returns (bool);\\n\\n    function getWhetherNonceHasBeenUsedForUser(address _user, uint256 _nonce) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x907a34783f5c832ee22c176feedc4f7523ac35a71b46207585586147a4c6d080\",\"license\":\"BUSL-1.1\"},\"contracts/loans/direct/loanTypes/LoanAirdropUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./IDirectLoanBase.sol\\\";\\nimport \\\"./LoanData.sol\\\";\\nimport \\\"../../../interfaces/IDirectLoanCoordinator.sol\\\";\\nimport \\\"../../../utils/ContractKeys.sol\\\";\\nimport \\\"../../../interfaces/INftfiHub.sol\\\";\\nimport \\\"../../../interfaces/IPermittedPartners.sol\\\";\\nimport \\\"../../../interfaces/IPermittedNFTs.sol\\\";\\nimport \\\"../../../interfaces/IPermittedERC20s.sol\\\";\\nimport \\\"../../../interfaces/IAirdropFlashLoan.sol\\\";\\nimport \\\"../../../interfaces/INftWrapper.sol\\\";\\nimport \\\"../../../airdrop/IAirdropReceiverFactory.sol\\\";\\nimport \\\"../../../airdrop/IAirdropReceiver.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title  LoanAirdropUtils\\n * @author NFTfi\\n * @notice Helper library for LoanBase\\n */\\nlibrary LoanAirdropUtils {\\n    /**\\n     * @notice This event is fired whenever a flashloan is initiated to pull an airdrop\\n     *\\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     * @param  borrower - The address of the borrower.\\n     * @param  nftCollateralId - The ID within the AirdropReceiver for the NFT being used as collateral for this\\n     * loan.\\n     * @param  nftCollateralContract - The ERC721 contract of the NFT collateral\\n     * @param target - address of the airdropping contract\\n     * @param data - function selector to be called\\n     */\\n    event AirdropPulledFlashloan(\\n        uint256 indexed loanId,\\n        address indexed borrower,\\n        uint256 nftCollateralId,\\n        address nftCollateralContract,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @notice This event is fired whenever the collateral gets wrapped in an airdrop receiver\\n     *\\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     * @param  borrower - The address of the borrower.\\n     * @param  nftCollateralId - The ID within the AirdropReceiver for the NFT being used as collateral for this\\n     * loan.\\n     * @param  nftCollateralContract - The contract of the NFT collateral\\n     * @param receiverId - id of the created AirdropReceiver, takes the place of nftCollateralId on the loan\\n     * @param receiverInstance - address of the created AirdropReceiver\\n     */\\n    event CollateralWrapped(\\n        uint256 indexed loanId,\\n        address indexed borrower,\\n        uint256 nftCollateralId,\\n        address nftCollateralContract,\\n        uint256 receiverId,\\n        address receiverInstance\\n    );\\n\\n    function pullAirdrop(\\n        uint32 _loanId,\\n        LoanData.LoanTerms memory _loan,\\n        address _target,\\n        bytes calldata _data,\\n        address _nftAirdrop,\\n        uint256 _nftAirdropId,\\n        bool _is1155,\\n        uint256 _nftAirdropAmount,\\n        INftfiHub _hub\\n    ) external {\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(\\n            _hub.getContract(IDirectLoanBase(address(this)).LOAN_COORDINATOR())\\n        );\\n\\n        address borrower;\\n\\n        // scoped to aviod stack too deep\\n        {\\n            IDirectLoanCoordinator.Loan memory loanCoordinatorData = loanCoordinator.getLoanData(_loanId);\\n            uint256 smartNftId = loanCoordinatorData.smartNftId;\\n            if (_loan.borrower != address(0)) {\\n                borrower = _loan.borrower;\\n            } else {\\n                borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(smartNftId);\\n            }\\n        }\\n\\n        require(msg.sender == borrower, \\\"Only borrower can airdrop\\\");\\n\\n        {\\n            IAirdropFlashLoan airdropFlashLoan = IAirdropFlashLoan(_hub.getContract(ContractKeys.AIRDROP_FLASH_LOAN));\\n\\n            _transferNFT(_loan, address(this), address(airdropFlashLoan));\\n\\n            airdropFlashLoan.pullAirdrop(\\n                _loan.nftCollateralContract,\\n                _loan.nftCollateralId,\\n                _loan.nftCollateralWrapper,\\n                _target,\\n                _data,\\n                _nftAirdrop,\\n                _nftAirdropId,\\n                _is1155,\\n                _nftAirdropAmount,\\n                borrower\\n            );\\n        }\\n\\n        // revert if the collateral hasn't been transferred back before it ends\\n        require(\\n            INftWrapper(_loan.nftCollateralWrapper).isOwner(\\n                address(this),\\n                _loan.nftCollateralContract,\\n                _loan.nftCollateralId\\n            ),\\n            \\\"Collateral should be returned\\\"\\n        );\\n\\n        emit AirdropPulledFlashloan(\\n            _loanId,\\n            borrower,\\n            _loan.nftCollateralId,\\n            _loan.nftCollateralContract,\\n            _target,\\n            _data\\n        );\\n    }\\n\\n    function pullAirdropReceiver(\\n        uint32 _loanId,\\n        LoanData.LoanTerms memory _loan,\\n        address _target,\\n        bytes calldata _data,\\n        INftfiHub _hub\\n    ) external {\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(\\n            _hub.getContract(IDirectLoanBase(address(this)).LOAN_COORDINATOR())\\n        );\\n\\n        address borrower;\\n\\n        // scoped to aviod stack too deep\\n        {\\n            IDirectLoanCoordinator.Loan memory loanCoordinatorData = loanCoordinator.getLoanData(_loanId);\\n            uint256 smartNftId = loanCoordinatorData.smartNftId;\\n            if (_loan.borrower != address(0)) {\\n                borrower = _loan.borrower;\\n            } else {\\n                borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(smartNftId);\\n            }\\n        }\\n\\n        require(msg.sender == borrower, \\\"Only borrower can pull airdrop\\\");\\n\\n        require(\\n            IPermittedNFTs(_hub.getContract(ContractKeys.PERMITTED_NFTS)).getNFTPermit(_loan.nftCollateralContract) ==\\n                ContractKeys.getIdFromStringKey(ContractKeys.AIRDROP_WRAPPER_STRING),\\n            \\\"collateral not airdropReceiver\\\"\\n        );\\n\\n        IAirdropReceiver(_loan.nftCollateralContract).pullAirdrop(_target, _data);\\n    }\\n\\n    function wrapCollateral(\\n        uint32 _loanId,\\n        LoanData.LoanTerms storage _loan,\\n        INftfiHub _hub\\n    ) external returns (address instance, uint256 receiverId) {\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(\\n            _hub.getContract(IDirectLoanBase(address(this)).LOAN_COORDINATOR())\\n        );\\n        // Fetch the current lender of the promissory note corresponding to this overdue loan.\\n        IDirectLoanCoordinator.Loan memory loanCoordinatorData = loanCoordinator.getLoanData(_loanId);\\n        uint256 smartNftId = loanCoordinatorData.smartNftId;\\n\\n        address borrower;\\n\\n        if (_loan.borrower != address(0)) {\\n            borrower = _loan.borrower;\\n        } else {\\n            borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(smartNftId);\\n        }\\n\\n        require(msg.sender == borrower, \\\"Only borrower can wrapp\\\");\\n\\n        IAirdropReceiverFactory factory = IAirdropReceiverFactory(_hub.getContract(ContractKeys.AIRDROP_FACTORY));\\n        (instance, receiverId) = factory.createAirdropReceiver(address(this));\\n\\n        // transfer collateral to airdrop receiver wrapper\\n        _transferNFTtoAirdropReceiver(_loan, instance);\\n\\n        emit CollateralWrapped(\\n            _loanId,\\n            borrower,\\n            _loan.nftCollateralId,\\n            _loan.nftCollateralContract,\\n            receiverId,\\n            instance\\n        );\\n\\n        // set the receiver as the new collateral\\n        _loan.nftCollateralContract = instance;\\n        _loan.nftCollateralId = receiverId;\\n    }\\n\\n    /**\\n     * @dev Transfers several types of NFTs using a wrapper that knows how to handle each case.\\n     *\\n     * @param _loan -\\n     * @param _sender - Current owner of the NFT\\n     * @param _recipient - Recipient of the transfer\\n     */\\n    function _transferNFT(\\n        LoanData.LoanTerms memory _loan,\\n        address _sender,\\n        address _recipient\\n    ) internal {\\n        Address.functionDelegateCall(\\n            _loan.nftCollateralWrapper,\\n            abi.encodeWithSelector(\\n                INftWrapper(_loan.nftCollateralWrapper).transferNFT.selector,\\n                _sender,\\n                _recipient,\\n                _loan.nftCollateralContract,\\n                _loan.nftCollateralId\\n            ),\\n            \\\"NFT not successfully transferred\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfers several types of NFTs to an airdrop receiver using a wrapper that knows how to handle each case.\\n     *\\n     * @param _loan -\\n     * @param _airdropReceiverInstance - Recipient of the transfer\\n     */\\n    function _transferNFTtoAirdropReceiver(LoanData.LoanTerms memory _loan, address _airdropReceiverInstance) internal {\\n        Address.functionDelegateCall(\\n            _loan.nftCollateralWrapper,\\n            abi.encodeWithSelector(\\n                INftWrapper(_loan.nftCollateralWrapper).wrapAirdropReceiver.selector,\\n                _airdropReceiverInstance,\\n                _loan.nftCollateralContract,\\n                _loan.nftCollateralId\\n            ),\\n            \\\"NFT was not successfully migrated\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4ee24dc83319d867e6e972066707771b083945d1acbe779acb908152e1073c5a\",\"license\":\"BUSL-1.1\"},\"contracts/loans/direct/loanTypes/LoanChecksAndCalculations.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./IDirectLoanBase.sol\\\";\\nimport \\\"./LoanData.sol\\\";\\nimport \\\"../../../interfaces/IDirectLoanCoordinator.sol\\\";\\nimport \\\"../../../utils/ContractKeys.sol\\\";\\nimport \\\"../../../interfaces/INftfiHub.sol\\\";\\nimport \\\"../../../interfaces/IPermittedPartners.sol\\\";\\nimport \\\"../../../interfaces/IPermittedERC20s.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title  LoanChecksAndCalculations\\n * @author NFTfi\\n * @notice Helper library for LoanBase\\n */\\nlibrary LoanChecksAndCalculations {\\n    uint16 private constant HUNDRED_PERCENT = 10000;\\n\\n    /**\\n     * @dev Function that performs some validation checks before trying to repay a loan\\n     *\\n     * @param _loanId - The id of the loan being repaid\\n     */\\n    function payBackChecks(uint32 _loanId, INftfiHub _hub) external view {\\n        checkLoanIdValidity(_loanId, _hub);\\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have never been called on this loanId.\\n        // Depending on how the rest of the code turns out, this check may be unnecessary.\\n        require(!IDirectLoanBase(address(this)).loanRepaidOrLiquidated(_loanId), \\\"Loan already repaid/liquidated\\\");\\n\\n        // Fetch loan details from storage, but store them in memory for the sake of saving gas.\\n        (, , , , uint32 loanDuration, , , , uint64 loanStartTime, , ) = IDirectLoanBase(address(this)).loanIdToLoan(\\n            _loanId\\n        );\\n\\n        // When a loan exceeds the loan term, it is expired. At this stage the Lender can call Liquidate Loan to resolve\\n        // the loan.\\n        require(block.timestamp <= (uint256(loanStartTime) + uint256(loanDuration)), \\\"Loan is expired\\\");\\n    }\\n\\n    function checkLoanIdValidity(uint32 _loanId, INftfiHub _hub) public view {\\n        require(\\n            IDirectLoanCoordinator(_hub.getContract(IDirectLoanBase(address(this)).LOAN_COORDINATOR())).isValidLoanId(\\n                _loanId,\\n                address(this)\\n            ),\\n            \\\"invalid loanId\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Function that the partner is permitted and returns its shared percent.\\n     *\\n     * @param _revenueSharePartner - Partner's address\\n     *\\n     * @return The revenue share percent for the partner.\\n     */\\n    function getRevenueSharePercent(address _revenueSharePartner, INftfiHub _hub) external view returns (uint16) {\\n        // return soon if no partner is set to avoid a public call\\n        if (_revenueSharePartner == address(0)) {\\n            return 0;\\n        }\\n\\n        uint16 revenueSharePercent = IPermittedPartners(_hub.getContract(ContractKeys.PERMITTED_PARTNERS))\\n        .getPartnerPermit(_revenueSharePartner);\\n\\n        return revenueSharePercent;\\n    }\\n\\n    /**\\n     * @dev Performs some validation checks before trying to renegotiate a loan.\\n     * Needed to avoid stack too deep.\\n     *\\n     * @param _loan - The main Loan Terms struct.\\n     * @param _loanId - The unique identifier for the loan to be renegotiated\\n     * @param _newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param _newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\\n     * early.\\n     * @param _lenderNonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are\\n     * referring instead to nonces that are used by both the lender and the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\\n     , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     * @return Borrower and Lender addresses\\n     */\\n    function renegotiationChecks(\\n        LoanData.LoanTerms memory _loan,\\n        uint32 _loanId,\\n        uint32 _newLoanDuration,\\n        uint256 _newMaximumRepaymentAmount,\\n        uint256 _lenderNonce,\\n        INftfiHub _hub\\n    ) external view returns (address, address) {\\n        checkLoanIdValidity(_loanId, _hub);\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(\\n            _hub.getContract(IDirectLoanBase(address(this)).LOAN_COORDINATOR())\\n        );\\n        uint256 smartNftId = loanCoordinator.getLoanData(_loanId).smartNftId;\\n\\n        address borrower;\\n\\n        if (_loan.borrower != address(0)) {\\n            borrower = _loan.borrower;\\n        } else {\\n            borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(smartNftId);\\n        }\\n\\n        require(msg.sender == borrower, \\\"Only borrower can initiate\\\");\\n        require(block.timestamp <= (uint256(_loan.loanStartTime) + _newLoanDuration), \\\"New duration already expired\\\");\\n        require(\\n            uint256(_newLoanDuration) <= IDirectLoanBase(address(this)).maximumLoanDuration(),\\n            \\\"New duration exceeds maximum loan duration\\\"\\n        );\\n        require(!IDirectLoanBase(address(this)).loanRepaidOrLiquidated(_loanId), \\\"Loan already repaid/liquidated\\\");\\n        require(\\n            _newMaximumRepaymentAmount >= _loan.loanPrincipalAmount,\\n            \\\"Negative interest rate loans are not allowed.\\\"\\n        );\\n\\n        // Fetch current owner of loan promissory note.\\n        address lender = IERC721(loanCoordinator.promissoryNoteToken()).ownerOf(smartNftId);\\n\\n        require(\\n            !IDirectLoanBase(address(this)).getWhetherNonceHasBeenUsedForUser(lender, _lenderNonce),\\n            \\\"Lender nonce invalid\\\"\\n        );\\n\\n        return (borrower, lender);\\n    }\\n\\n    /**\\n     * @notice A convenience function computing the revenue share taken from the admin fee to transferr to the permitted\\n     * partner.\\n     *\\n     * @param _adminFee - The quantity of ERC20 currency (measured in smalled units of that ERC20 currency) that is due\\n     * as an admin fee.\\n     * @param _revenueShareInBasisPoints - The percent (measured in basis points) of the admin fee amount that will be\\n     * taken as a revenue share for a the partner, at the moment the loan is begun.\\n     *\\n     * @return The quantity of ERC20 currency (measured in smalled units of that ERC20 currency) that should be sent to\\n     * the `revenueSharePartner`.\\n     */\\n    function computeRevenueShare(uint256 _adminFee, uint256 _revenueShareInBasisPoints)\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return (_adminFee * _revenueShareInBasisPoints) / HUNDRED_PERCENT;\\n    }\\n\\n    /**\\n     * @notice A convenience function computing the adminFee taken from a specified quantity of interest.\\n     *\\n     * @param _interestDue - The amount of interest due, measured in the smallest quantity of the ERC20 currency being\\n     * used to pay the interest.\\n     * @param _adminFeeInBasisPoints - The percent (measured in basis points) of the interest earned that will be taken\\n     * as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     *\\n     * @return The quantity of ERC20 currency (measured in smalled units of that ERC20 currency) that is due as an admin\\n     * fee.\\n     */\\n    function computeAdminFee(uint256 _interestDue, uint256 _adminFeeInBasisPoints) external pure returns (uint256) {\\n        return (_interestDue * _adminFeeInBasisPoints) / HUNDRED_PERCENT;\\n    }\\n\\n    /**\\n     * @notice A convenience function computing the referral fee taken from the loan principal amount to transferr to\\n     * the referrer.\\n     *\\n     * @param _loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param _referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\\n     * @param _referrer - The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * that there is no referrer.\\n     *\\n     * @return The quantity of ERC20 currency (measured in smalled units of that ERC20 currency) that should be sent to\\n     * the referrer.\\n     */\\n    function computeReferralFee(\\n        uint256 _loanPrincipalAmount,\\n        uint256 _referralFeeInBasisPoints,\\n        address _referrer\\n    ) external pure returns (uint256) {\\n        if (_referralFeeInBasisPoints == 0 || _referrer == address(0)) {\\n            return 0;\\n        }\\n        return (_loanPrincipalAmount * _referralFeeInBasisPoints) / HUNDRED_PERCENT;\\n    }\\n}\\n\",\"keccak256\":\"0x770fa4ece817bb8256b1d8373edc7ae6011dc630ae68146c92134980364253ac\",\"license\":\"BUSL-1.1\"},\"contracts/loans/direct/loanTypes/LoanData.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title  LoanData\\n * @author NFTfi\\n * @notice An interface containg the main Loan struct shared by Direct Loans types.\\n */\\ninterface LoanData {\\n    /* ********** */\\n    /* DATA TYPES */\\n    /* ********** */\\n\\n    /**\\n     * @notice The main Loan Terms struct. This data is saved upon loan creation.\\n     *\\n     * @param loanERC20Denomination - The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * @param loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param maximumRepaymentAmount - The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * @param nftCollateralContract - The address of the the NFT collateral contract.\\n     * @param nftCollateralWrapper - The NFTfi wrapper of the NFT collateral contract.\\n     * @param nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * @param loanStartTime - The block.timestamp when the loan first began (measured in seconds).\\n     * @param loanDuration - The amount of time (measured in seconds) that can elapse before the lender can liquidate\\n     * the loan and seize the underlying collateral NFT.\\n     * @param loanInterestRateForDurationInBasisPoints - This is the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * @param loanAdminFeeInBasisPoints - The percent (measured in basis points) of the interest earned that will be\\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     * @param borrower\\n     */\\n    struct LoanTerms {\\n        uint256 loanPrincipalAmount;\\n        uint256 maximumRepaymentAmount;\\n        uint256 nftCollateralId;\\n        address loanERC20Denomination;\\n        uint32 loanDuration;\\n        uint16 loanInterestRateForDurationInBasisPoints;\\n        uint16 loanAdminFeeInBasisPoints;\\n        address nftCollateralWrapper;\\n        uint64 loanStartTime;\\n        address nftCollateralContract;\\n        address borrower;\\n    }\\n\\n    /**\\n     * @notice Some extra Loan's settings struct. This data is saved upon loan creation.\\n     * We need this to avoid stack too deep errors.\\n     *\\n     * @param revenueSharePartner - The address of the partner that will receive the revenue share.\\n     * @param revenueShareInBasisPoints - The percent (measured in basis points) of the admin fee amount that will be\\n     * taken as a revenue share for a t\\n     * @param referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.he partner, at the moment\\n     * the loan is begun.\\n     */\\n    struct LoanExtras {\\n        address revenueSharePartner;\\n        uint16 revenueShareInBasisPoints;\\n        uint16 referralFeeInBasisPoints;\\n    }\\n\\n    /**\\n     * @notice The offer made by the lender. Used as parameter on both acceptOffer (initiated by the borrower)\\n     *\\n     * @param loanERC20Denomination - The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * @param loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param maximumRepaymentAmount - The maximum amount of money that the borrower would be required to retrieve their\\n     *  collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always\\n     * have to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * @param nftCollateralContract - The address of the ERC721 contract of the NFT collateral.\\n     * @param nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * @param referrer - The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * this there is no referrer.\\n     * @param loanDuration - The amount of time (measured in seconds) that can elapse before the lender can liquidate\\n     * the loan and seize the underlying collateral NFT.\\n     * @param loanAdminFeeInBasisPoints - The percent (measured in basis points) of the interest earned that will be\\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     */\\n    struct Offer {\\n        uint256 loanPrincipalAmount;\\n        uint256 maximumRepaymentAmount;\\n        uint256 nftCollateralId;\\n        address nftCollateralContract;\\n        uint32 loanDuration;\\n        uint16 loanAdminFeeInBasisPoints;\\n        address loanERC20Denomination;\\n        address referrer;\\n    }\\n\\n    /**\\n     * @notice Signature related params. Used as parameter on both acceptOffer (containing borrower signature)\\n     *\\n     * @param signer - The address of the signer. The borrower for `acceptOffer`\\n     * @param nonce - The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     * @param expiry - Date when the signature expires\\n     * @param signature - The ECDSA signature of the borrower or the lender, obtained off-chain ahead of time, signing\\n     * the following combination of parameters:\\n     * - Lender:\\n     *   - Offer.loanERC20Denomination\\n     *   - Offer.loanPrincipalAmount\\n     *   - Offer.maximumRepaymentAmount\\n     *   - Offer.nftCollateralContract\\n     *   - Offer.nftCollateralId\\n     *   - Offer.referrer\\n     *   - Offer.loanDuration\\n     *   - Offer.loanAdminFeeInBasisPoints\\n     *   - Signature.signer,\\n     *   - Signature.nonce,\\n     *   - Signature.expiry,\\n     *   - address of the loan type contract\\n     *   - chainId\\n     */\\n    struct Signature {\\n        uint256 nonce;\\n        uint256 expiry;\\n        address signer;\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Signed message contents contents:\\n     *  - Signature.signature,\\n     *  - borrower address, - (msg.sender)\\n     *  - Offer.nftCollateralId, - (actual id here, since in CollateralOffer the original offer signature's id is 0)\\n     *  - Signature.signer, - porotocol address\\n     *  - Signature.expiry,\\n     */\\n    struct ProtocolSignature {\\n        uint256 expiry;\\n        address signer;\\n        bytes signature;\\n    }\\n\\n    /**\\n     * inclusive min and max Id ranges for collection offers on collections,\\n     * like ArtBlocks, where multiple collections are defined on one contract differentiated by id-ranges\\n     */\\n    struct CollectionIdRange {\\n        uint256 minId;\\n        uint256 maxId;\\n    }\\n\\n    /**\\n     * @notice Some extra parameters that the borrower needs to set when accepting an offer.\\n     *\\n     * @param revenueSharePartner - The address of the partner that will receive the revenue share.\\n     * @param referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\\n     */\\n    struct BorrowerSettings {\\n        address revenueSharePartner;\\n        uint16 referralFeeInBasisPoints;\\n    }\\n}\\n\",\"keccak256\":\"0xbf97205ebecde91026a470773a0f4d6b196c367c7b1cc6f458eaca7fc635d717\",\"license\":\"BUSL-1.1\"},\"contracts/utils/ContractKeys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ContractKeys\\n * @author NFTfi\\n * @dev Common library for contract keys\\n */\\nlibrary ContractKeys {\\n    bytes32 public constant PERMITTED_ERC20S = bytes32(\\\"PERMITTED_ERC20S\\\");\\n    bytes32 public constant PERMITTED_NFTS = bytes32(\\\"PERMITTED_NFTS\\\");\\n    bytes32 public constant PERMITTED_PARTNERS = bytes32(\\\"PERMITTED_PARTNERS\\\");\\n    bytes32 public constant NFT_TYPE_REGISTRY = bytes32(\\\"NFT_TYPE_REGISTRY\\\");\\n    bytes32 public constant LOAN_REGISTRY = bytes32(\\\"LOAN_REGISTRY\\\");\\n    bytes32 public constant PERMITTED_SNFT_RECEIVER = bytes32(\\\"PERMITTED_SNFT_RECEIVER\\\");\\n    bytes32 public constant PERMITTED_AIRDROPS = bytes32(\\\"PERMITTED_AIRDROPS\\\");\\n    bytes32 public constant AIRDROP_RECEIVER = bytes32(\\\"AIRDROP_RECEIVER\\\");\\n    bytes32 public constant AIRDROP_FACTORY = bytes32(\\\"AIRDROP_FACTORY\\\");\\n    bytes32 public constant AIRDROP_FLASH_LOAN = bytes32(\\\"AIRDROP_FLASH_LOAN\\\");\\n\\n    string public constant AIRDROP_WRAPPER_STRING = \\\"AirdropWrapper\\\";\\n\\n    /**\\n     * @notice Returns the bytes32 representation of a string\\n     * @param _key the string key\\n     * @return id bytes32 representation\\n     */\\n    function getIdFromStringKey(string memory _key) external pure returns (bytes32 id) {\\n        require(bytes(_key).length <= 32, \\\"invalid key\\\");\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := mload(add(_key, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf596b76c4804038211ab97ab44d9fa7a1ac241a38e4051f5bef3257a73f38d10\",\"license\":\"BUSL-1.1\"},\"contracts/utils/NFTfiSigningUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../loans/direct/loanTypes/LoanData.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\n/**\\n * @title  NFTfiSigningUtils\\n * @author NFTfi\\n * @notice Helper contract for NFTfi. This contract manages verifying signatures from off-chain NFTfi orders.\\n * Based on the version of this same contract used on NFTfi V1\\n */\\nlibrary NFTfiSigningUtils {\\n    /* ********* */\\n    /* FUNCTIONS */\\n    /* ********* */\\n\\n    /**\\n     * @dev This function gets the current chain ID.\\n     */\\n    function getChainID() internal view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * @notice This function is when the borrower accepts a lender's offer, to validate the lender's signature that the\\n     * lender provided off-chain to verify that it did indeed made such offer.\\n     *\\n     * @param _offer - The offer struct containing:\\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * - loanPrincipalAmount: The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * - referrer: The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * this there is no referrer.\\n     * - loanDuration: The amount of time (measured in seconds) that can elapse before the lender can liquidate the\\n     * loan and seize the underlying collateral NFT.\\n     * - loanInterestRateForDurationInBasisPoints: This is the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * - loanAdminFeeInBasisPoints: The percent (measured in basis points) of the interest earned that will be\\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     * @param _signature - The signature structure containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer`\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     *   - Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     * - expiry: Date when the signature expires\\n     * - signature: The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following\\n     * combination of parameters:\\n     *   - offer.loanERC20Denomination\\n     *   - offer.loanPrincipalAmount\\n     *   - offer.maximumRepaymentAmount\\n     *   - offer.nftCollateralContract\\n     *   - offer.nftCollateralId\\n     *   - offer.referrer\\n     *   - offer.loanDuration\\n     *   - offer.loanAdminFeeInBasisPoints\\n     *   - signature.signer,\\n     *   - signature.nonce,\\n     *   - signature.expiry,\\n     *   - address of this contract\\n     *   - chainId\\n     */\\n    function isValidLenderSignature(LoanData.Offer memory _offer, LoanData.Signature memory _signature)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return isValidLenderSignature(_offer, _signature, address(this));\\n    }\\n\\n    /**\\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\\n     *\\n     */\\n    function isValidLenderSignature(\\n        LoanData.Offer memory _offer,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) public view returns (bool) {\\n        require(block.timestamp <= _signature.expiry, \\\"Lender Signature has expired\\\");\\n        require(_loanContract != address(0), \\\"Loan is zero address\\\");\\n        if (_signature.signer == address(0)) {\\n            return false;\\n        } else {\\n            bytes32 message = keccak256(\\n                abi.encodePacked(getEncodedOffer(_offer), getEncodedSignature(_signature), _loanContract, getChainID())\\n            );\\n\\n            return\\n                SignatureChecker.isValidSignatureNow(\\n                    _signature.signer,\\n                    ECDSA.toEthSignedMessageHash(message),\\n                    _signature.signature\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice This function is called in renegotiateLoan() to validate the lender's signature that the lender provided\\n     * off-chain to verify that they did indeed want to agree to this loan renegotiation according to these terms.\\n     *\\n     * @param _loanId - The unique identifier for the loan to be renegotiated\\n     * @param _newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param _newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\\n     * early.\\n     * @param _renegotiationFee Agreed upon fee in ether that borrower pays for the lender for the renegitiation\\n     * @param _signature - The signature structure containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer`\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     * - expiry - The date when the renegotiation offer expires\\n     * - lenderSignature - The ECDSA signature of the lender, obtained off-chain ahead of time, signing the\\n     * following combination of parameters:\\n     * - _loanId\\n     * - _newLoanDuration\\n     * - _newMaximumRepaymentAmount\\n     * - _lender\\n     * - _lenderNonce\\n     * - _expiry\\n     * - address of this contract\\n     * - chainId\\n     */\\n    function isValidLenderRenegotiationSignature(\\n        uint256 _loanId,\\n        uint32 _newLoanDuration,\\n        uint256 _newMaximumRepaymentAmount,\\n        uint256 _renegotiationFee,\\n        LoanData.Signature memory _signature\\n    ) external view returns (bool) {\\n        return\\n            isValidLenderRenegotiationSignature(\\n                _loanId,\\n                _newLoanDuration,\\n                _newMaximumRepaymentAmount,\\n                _renegotiationFee,\\n                _signature,\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\\n     *\\n     */\\n    function isValidLenderRenegotiationSignature(\\n        uint256 _loanId,\\n        uint32 _newLoanDuration,\\n        uint256 _newMaximumRepaymentAmount,\\n        uint256 _renegotiationFee,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) public view returns (bool) {\\n        require(block.timestamp <= _signature.expiry, \\\"Renegotiation Signature expired\\\");\\n        require(_loanContract != address(0), \\\"Loan is zero address\\\");\\n        if (_signature.signer == address(0)) {\\n            return false;\\n        } else {\\n            bytes32 message = keccak256(\\n                abi.encodePacked(\\n                    _loanId,\\n                    _newLoanDuration,\\n                    _newMaximumRepaymentAmount,\\n                    _renegotiationFee,\\n                    getEncodedSignature(_signature),\\n                    _loanContract,\\n                    getChainID()\\n                )\\n            );\\n\\n            return\\n                SignatureChecker.isValidSignatureNow(\\n                    _signature.signer,\\n                    ECDSA.toEthSignedMessageHash(message),\\n                    _signature.signature\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @dev We need this to avoid stack too deep errors.\\n     */\\n    function getEncodedOffer(LoanData.Offer memory _offer) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _offer.loanERC20Denomination,\\n                _offer.loanPrincipalAmount,\\n                _offer.maximumRepaymentAmount,\\n                _offer.nftCollateralContract,\\n                _offer.nftCollateralId,\\n                _offer.referrer,\\n                _offer.loanDuration,\\n                _offer.loanAdminFeeInBasisPoints\\n            );\\n    }\\n\\n    /**\\n     * @dev We need this to avoid stack too deep errors.\\n     */\\n    function getEncodedSignature(LoanData.Signature memory _signature) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_signature.signer, _signature.nonce, _signature.expiry);\\n    }\\n}\\n\",\"keccak256\":\"0xf658f22057da9a6664fdd15662129e6a8a5f0987e37a73f515006e50cc80a593\",\"license\":\"BUSL-1.1\"},\"contracts/utils/NftReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\n\\n/**\\n * @title NftReceiver\\n * @author NFTfi\\n * @dev Base contract with capabilities for receiving ERC1155 and ERC721 tokens\\n */\\nabstract contract NftReceiver is IERC1155Receiver, ERC721Holder {\\n    /**\\n     *  @dev Handles the receipt of a single ERC1155 token type. This function is called at the end of a\\n     * `safeTransferFrom` after the balance has been updated.\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if allowed\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     *  @dev Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a\\n     * `safeBatchTransferFrom` after the balances have been updated.\\n     *  @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external virtual override returns (bytes4) {\\n        revert(\\\"ERC1155 batch not supported\\\");\\n    }\\n\\n    /**\\n     * @dev Checks whether this contract implements the interface defined by `interfaceId`.\\n     * @param _interfaceId Id of the interface\\n     * @return true if this contract implements the interface\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IERC1155Receiver).interfaceId ||\\n            _interfaceId == type(IERC721Receiver).interfaceId ||\\n            _interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9020b8d006c34c41a97c8499af667c83304c7304dfd50b8ffa5e6d00c03e17fd\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * Modified version from openzeppelin/contracts/access/Ownable.sol that allows to\\n * initialize the owner using a parameter in the constructor\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) public virtual onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(_newOwner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Sets the owner.\\n     */\\n    function _setOwner(address _newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(oldOwner, _newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1dcb2ae57518644f7c702a4033493c34d5f8a0fe6f9f07c487df10aa95c2ea9\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c06040526301e91c806002556003805461ffff19166101f41790553480156200002857600080fd5b50604051620054b9380380620054b98339810160408190526200004b9162000298565b60405163f99a8ffb60e01b815260206004820152601760248201527f4449524543545f4c4f414e5f434f4f5244494e41544f5200000000000000000060448201528390839073d3D0E26010ABeF694F4074ca39E88c5d6dEd70C19063f99a8ffb9060640160206040518083038186803b158015620000c857600080fd5b505af4158015620000dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000103919062000394565b8383806200011181620001a4565b50506000805460ff60a01b19168155600180556001600160601b0319606085901b1660a05260808390525b81518110156200019657620001818282815181106200016b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001620001f460201b60201c565b806200018d81620003ad565b9150506200013c565b5050505050505050620003eb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166200021c57604051636e8ab17b60e11b815260040160405180910390fd5b6001600160a01b0382166000818152600b6020908152604091829020805460ff191685151590811790915591519182527ff100355be652ecc881568750e6a98c0713e4316f75d5314ebc9039e0acb52f24910160405180910390a25050565b80516001600160a01b03811681146200029357600080fd5b919050565b600080600060608486031215620002ad578283fd5b620002b8846200027b565b92506020620002c98186016200027b565b60408601519093506001600160401b0380821115620002e6578384fd5b818701915087601f830112620002fa578384fd5b8151818111156200030f576200030f620003d5565b8060051b604051601f19603f83011681018181108582111715620003375762000337620003d5565b604052828152858101935084860182860187018c101562000356578788fd5b8795505b8386101562000383576200036e816200027b565b8552600195909501949386019386016200035a565b508096505050505050509250925092565b600060208284031215620003a6578081fd5b5051919050565b6000600019821415620003ce57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b60805160a05160601c615019620004a0600039600081816104c70152818161089601528181610ab401528181610c3f01528181610fe3015281816110ee01528181611237015281816113ba0152818161182401528181611ab801528181611ced01528181611e4b0152818161253e0152818161284701528181612be901528181612ed00152613a1e0152600081816105bb01528181611a8f01528181611e2201528181612eaa01526139f501526150196000f3fe608060405234801561001057600080fd5b506004361061022d5760003560e01c8063657a88a11161013b578063ab3b1280116100b8578063bce42e421161007c578063bce42e42146106d5578063ddfddad6146106e8578063eda928ab146106fb578063f23a6e611461070e578063f2fde38b1461072e57600080fd5b8063ab3b128014610660578063ac4e35ea14610689578063b18e77721461069c578063b31ec1d4146106af578063bc197c81146106c257600080fd5b80638456cb59116100ff5780638456cb5914610603578063872873be1461060b5780638da5cb5b146106375780639658e4051461063f578063a4441a6f1461065257600080fd5b8063657a88a1146105875780636ed93dd01461059a57806377cfa991146105b65780637836baf1146105dd57806379b64040146105f057600080fd5b8063318dacd3116101c95780635163a1c31161018d5780635163a1c31461051157806356efe98c1461052457806359a727341461054c5780635c975abb1461055f578063616693d81461056757600080fd5b8063318dacd314610476578063328404b014610489578063365a86fc146104c25780633f4ba83a146104f657806347948d92146104fe57600080fd5b806301ffc9a7146102325780630717f3aa1461025a5780630ff81c3f1461027d578063150b7a02146102e7578063192b355d1461031e5780631c6caf4114610335578063227cda181461034a5780632b218022146104505780632c1d4ec214610463575b600080fd5b610245610240366004614544565b610741565b60405190151581526020015b60405180910390f35b61024561026836600461472d565b60066020526000908152604090205460ff1681565b6102bd61028b36600461472d565b6005602052600090815260409020546001600160a01b0381169061ffff600160a01b8204811691600160b01b90041683565b604080516001600160a01b03909416845261ffff9283166020850152911690820152606001610251565b6103056102f53660046142be565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610251565b61032760025481565b604051908152602001610251565b6103486103433660046146c5565b610793565b005b6103dc61035836600461472d565b600460208190526000918252604090912080546001820154600283015460038401549484015460058501546006909501549395929491936001600160a01b0380851694600160a01b80820463ffffffff1695600160c01b830461ffff90811696600160d01b909404169484841694929093046001600160401b03169290821691168b565b604080519b8c5260208c019a909a52988a01979097526001600160a01b0395861660608a015263ffffffff909416608089015261ffff92831660a0890152911660c0870152821660e08601526001600160401b03166101008501529081166101208401521661014082015261016001610251565b61034861045e36600461472d565b61083d565b610348610471366004614425565b61092c565b6103486104843660046147c7565b610a5b565b6102456104973660046143cd565b6001600160a01b03919091166000908152600a60209081526040808320938352929052205460ff1690565b6104e97f000000000000000000000000000000000000000000000000000000000000000081565b6040516102519190614a63565b610348610ca4565b61034861050c3660046146fd565b610cdd565b61034861051f366004614425565b610d66565b6105376105323660046145ea565b610ee2565b60405163ffffffff9091168152602001610251565b61034861055a36600461472d565b610f8a565b6102456111ce565b762224a922a1aa2fa627a0a72fa324ac22a22fa7a32322a960491b610327565b610348610595366004614765565b6111de565b6105a361271081565b60405161ffff9091168152602001610251565b6103277f000000000000000000000000000000000000000000000000000000000000000081565b6103486105eb3660046143a0565b61141b565b6103486105fe366004614466565b611458565b610348611523565b610245610619366004614193565b6001600160a01b03166000908152600b602052604090205460ff1690565b6104e961155a565b61034861064d3660046146fd565b611569565b6003546105a39061ffff1681565b61032761066e36600461472d565b63ffffffff1660009081526004602052604090206001015490565b610348610697366004614425565b6115cb565b6103486106aa366004614866565b611762565b6103486106bd36600461472d565b6117cb565b6103056106d0366004614204565b6119cb565b6103486106e336600461472d565b611a16565b6103486106f6366004614193565b611bcc565b61034861070936600461472d565b611c94565b61030561071c366004614327565b63f23a6e6160e01b9695505050505050565b61034861073c366004614193565b611d68565b60006001600160e01b03198216630271189760e51b148061077257506001600160e01b03198216630a85bd0160e11b145b8061078d57506001600160e01b031982166301ffc9a760e01b145b92915050565b3361079c61155a565b6001600160a01b0316146107cb5760405162461bcd60e51b81526004016107c290614af1565b60405180910390fd5b61271061ffff821611156107f2576040516314004bcf60e21b815260040160405180910390fd5b6003805461ffff191661ffff83169081179091556040519081527f03017365bbe16943b524030df07e7689168ab63e854d27417498e6f9dc584dab906020015b60405180910390a150565b600260015414156108605760405162461bcd60e51b81526004016107c290614b26565b600260015560405163364d0abb60e11b8152734b45B6fC98616D4A3E9c59395d4526a863202B6e90636c9a1576906108be9084907f000000000000000000000000000000000000000000000000000000000000000090600401614d82565b60006040518083038186803b1580156108d657600080fd5b505af41580156108ea573d6000803e3d6000fd5b505050506000806000806108fd85611e08565b93509350935093506109118585858561221c565b60016109208686858585612416565b50506001805550505050565b3361093561155a565b6001600160a01b03161461095b5760405162461bcd60e51b81526004016107c290614af1565b6040516370a0823160e01b815283906000906001600160a01b038316906370a082319061098c903090600401614a63565b60206040518083038186803b1580156109a457600080fd5b505afa1580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc9190614715565b9050806109fc576040516334b5d06d60e21b815260040160405180910390fd5b6001600160a01b0385166000908152600860205260409020548490610a219083614f3d565b1015610a405760405163368e910d60e21b815260040160405180910390fd5b610a546001600160a01b038316848661242d565b5050505050565b60026001541415610a7e5760405162461bcd60e51b81526004016107c290614b26565b6002600155604051635bfd0fb160e11b8152734b45B6fC98616D4A3E9c59395d4526a863202B6e9063b7fa1f6290610adc908b907f000000000000000000000000000000000000000000000000000000000000000090600401614d82565b60006040518083038186803b158015610af457600080fd5b505af4158015610b08573d6000803e3d6000fd5b5050505063ffffffff881660009081526006602052604090205460ff1615610b4357604051633db5ad0160e11b815260040160405180910390fd5b63ffffffff8881166000908152600460208181526040928390208351610160810185528154815260018201549281019290925260028101548285015260038101546001600160a01b038082166060850152600160a01b8083049097166080850152600160c01b820461ffff90811660a0860152600160d01b90920490911660c08401528184015480821660e0850152959095046001600160401b03166101008301526005810154851661012083015260060154909316610140840152905163491bd44160e11b8152734b45B6fC98616D4A3E9c59395d4526a863202B6e91639237a88291610c65918d9186918e918e918e918e918e918e918e917f00000000000000000000000000000000000000000000000000000000000000009101614da1565b60006040518083038186803b158015610c7d57600080fd5b505af4158015610c91573d6000803e3d6000fd5b5050600180555050505050505050505050565b33610cad61155a565b6001600160a01b031614610cd35760405162461bcd60e51b81526004016107c290614af1565b610cdb612483565b565b33610ce661155a565b6001600160a01b031614610d0c5760405162461bcd60e51b81526004016107c290614af1565b63ffffffff811115610d3157604051630737847960e51b815260040160405180910390fd5b60028190556040518181527f64f65a4a1a932867ad599da36210fc47c698b3abb2413cfdfd36bf59697a69cb90602001610832565b33610d6f61155a565b6001600160a01b031614610d955760405162461bcd60e51b81526004016107c290614af1565b6001600160a01b0383166000908152600760209081526040808320858452909152902054839015610dd957604051636a32439f60e01b815260040160405180910390fd5b6040516331a9108f60e11b81526004810184905230906001600160a01b03831690636352211e9060240160206040518083038186803b158015610e1b57600080fd5b505afa158015610e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5391906141af565b6001600160a01b031614610e7a5760405163ca5ae8a360e01b815260040160405180910390fd5b604051632142170760e11b81526001600160a01b038216906342842e0e90610eaa90309086908890600401614a77565b600060405180830381600087803b158015610ec457600080fd5b505af1158015610ed8573d6000803e3d6000fd5b5050505050505050565b6000610eec6111ce565b15610f095760405162461bcd60e51b81526004016107c290614ac7565b60026001541415610f2c5760405162461bcd60e51b81526004016107c290614b26565b60026001556060840151600090610f4290612515565b9050610f4e858261263b565b610f5785612722565b610f7d610f648683612748565b610f76856000015186602001516127fc565b87876128fa565b6001805595945050505050565b60026001541415610fad5760405162461bcd60e51b81526004016107c290614b26565b6002600155604051635bfd0fb160e11b8152734b45B6fC98616D4A3E9c59395d4526a863202B6e9063b7fa1f629061100b9084907f000000000000000000000000000000000000000000000000000000000000000090600401614d82565b60006040518083038186803b15801561102357600080fd5b505af4158015611037573d6000803e3d6000fd5b5050505063ffffffff811660009081526006602052604090205460ff161561107257604051633db5ad0160e11b815260040160405180910390fd5b63ffffffff8116600090815260046020908152604080832060058101546001600160a01b0316845260078352818420600282015485529092528220805491926001926110bf908490614f3d565b9091555050604051631276b77d60e11b815263ffffffff83166004820152602481018290526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660448201526000908190734b45B6fC98616D4A3E9c59395d4526a863202B6e906324ed6efa90606401604080518083038186803b15801561114e57600080fd5b505af4158015611162573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118691906143f8565b6001600160a01b0382166000908152600760209081526040808320848452909152812080549395509193506001926111bf908490614f25565b90915550506001805550505050565b600054600160a01b900460ff1690565b600260015414156112015760405162461bcd60e51b81526004016107c290614b26565b6002600155604051635bfd0fb160e11b8152734b45B6fC98616D4A3E9c59395d4526a863202B6e9063b7fa1f629061125f9087907f000000000000000000000000000000000000000000000000000000000000000090600401614d82565b60006040518083038186803b15801561127757600080fd5b505af415801561128b573d6000803e3d6000fd5b5050505063ffffffff841660009081526006602052604090205460ff16156112c657604051633db5ad0160e11b815260040160405180910390fd5b63ffffffff8481166000908152600460208181526040928390208351610160810185528154815260018201549281019290925260028101548285015260038101546001600160a01b038082166060850152600160a01b8083049097166080850152600160c01b820461ffff90811660a0860152600160d01b90920490911660c08401528184015480821660e0850152959095046001600160401b0316610100830152600581015485166101208301526006015490931661014084015290516361ec917160e11b8152734b45B6fC98616D4A3E9c59395d4526a863202B6e9163c3d922e2916113e091899186918a918a918a917f00000000000000000000000000000000000000000000000000000000000000009101614e1b565b60006040518083038186803b1580156113f857600080fd5b505af415801561140c573d6000803e3d6000fd5b50506001805550505050505050565b3361142461155a565b6001600160a01b03161461144a5760405162461bcd60e51b81526004016107c290614af1565b6114548282612aae565b5050565b3361146161155a565b6001600160a01b0316146114875760405162461bcd60e51b81526004016107c290614af1565b80518251146114a857604051621dbe8b60e81b815260040160405180910390fd5b60005b825181101561151e5761150c8382815181106114d757634e487b7160e01b600052603260045260246000fd5b60200260200101518383815181106114ff57634e487b7160e01b600052603260045260246000fd5b6020026020010151612aae565b8061151681614f80565b9150506114ab565b505050565b3361152c61155a565b6001600160a01b0316146115525760405162461bcd60e51b81526004016107c290614af1565b610cdb612b34565b6000546001600160a01b031690565b336000908152600a6020908152604080832084845290915290205460ff16156115a557604051633ab3447f60e11b815260040160405180910390fd5b336000908152600a6020908152604080832093835292905220805460ff19166001179055565b336115d461155a565b6001600160a01b0316146115fa5760405162461bcd60e51b81526004016107c290614af1565b604051627eeac760e11b815283906000906001600160a01b0383169062fdd58e9061162b9030908890600401614a9b565b60206040518083038186803b15801561164357600080fd5b505afa158015611657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167b9190614715565b6001600160a01b0386166000908152600760209081526040808320888452909152902054909150156116c057604051636a32439f60e01b815260040160405180910390fd5b806116de5760405163f266c3ab60e01b815260040160405180910390fd5b604051637921219560e11b81523060048201526001600160a01b038481166024830152604482018690526064820183905260a06084830152600060a483015283169063f242432a9060c401600060405180830381600087803b15801561174357600080fd5b505af1158015611757573d6000803e3d6000fd5b505050505050505050565b61176a6111ce565b156117875760405162461bcd60e51b81526004016107c290614ac7565b600260015414156117aa5760405162461bcd60e51b81526004016107c290614b26565b60026001556117be87878787878787612b94565b5050600180555050505050565b600260015414156117ee5760405162461bcd60e51b81526004016107c290614b26565b6002600155604051635bfd0fb160e11b8152734b45B6fC98616D4A3E9c59395d4526a863202B6e9063b7fa1f629061184c9084907f000000000000000000000000000000000000000000000000000000000000000090600401614d82565b60006040518083038186803b15801561186457600080fd5b505af4158015611878573d6000803e3d6000fd5b5050505063ffffffff811660009081526006602052604090205460ff16156118b357604051633db5ad0160e11b815260040160405180910390fd5b6000806000806118c285611e08565b93509350935093506000826080015163ffffffff168361010001516001600160401b03166118f09190614f25565b90508042116119125760405163477e47f960e11b815260040160405180910390fd5b336001600160a01b0385161461193b57604051633c35984560e11b815260040160405180910390fd5b600061194a8786868685612416565b8351604080860151610120870151825193845260208401919091529082018490524260608301526001600160a01b039081166080830152808716919088169063ffffffff8a16907f4fac0ff43299a330bce57d0579985305af580acf256a6d7977083ede81be13269060a00160405180910390a45050600180555050505050565b60405162461bcd60e51b815260206004820152601b60248201527f45524331313535206261746368206e6f7420737570706f72746564000000000060448201526000906064016107c2565b60026001541415611a395760405162461bcd60e51b81526004016107c290614b26565b600260015563ffffffff81166000908152600460205260409020600601546001600160a01b0316338114611a80576040516348c5194760e11b815260040160405180910390fd5b604051631c2d8fb360e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d989060240160206040518083038186803b158015611b0257600080fd5b505afa158015611b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3a91906141af565b604051631b982cf160e01b81529091506001600160a01b03821690631b982cf190611b6b9086908690600401614d82565b600060405180830381600087803b158015611b8557600080fd5b505af1158015611b99573d6000803e3d6000fd5b50505063ffffffff909316600090815260046020526040902060060180546001600160a01b031916905550506001805550565b60026001541415611bef5760405162461bcd60e51b81526004016107c290614b26565b60026001553360009081526009602090815260408083206001600160a01b038516845290915290205480611c365760405163073ad17560e51b815260040160405180910390fd5b611c4a6001600160a01b038316338361242d565b3360009081526009602090815260408083206001600160a01b03861684528252808320839055600890915281208054839290611c87908490614f3d565b9091555050600180555050565b60026001541415611cb75760405162461bcd60e51b81526004016107c290614b26565b600260015560405163364d0abb60e11b8152734b45B6fC98616D4A3E9c59395d4526a863202B6e90636c9a157690611d159084907f000000000000000000000000000000000000000000000000000000000000000090600401614d82565b60006040518083038186803b158015611d2d57600080fd5b505af4158015611d41573d6000803e3d6000fd5b50505050600080600080611d5485611e08565b935093509350935061091185858585613020565b33611d7161155a565b6001600160a01b031614611d975760405162461bcd60e51b81526004016107c290614af1565b6001600160a01b038116611dfc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107c2565b611e0581613443565b50565b600080611e13613eb9565b604051631c2d8fb360e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d989060240160206040518083038186803b158015611e9557600080fd5b505afa158015611ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecd91906141af565b60405163e6c5a54160e01b815263ffffffff871660048201529091506000906001600160a01b0383169063e6c5a5419060240160606040518083038186803b158015611f1857600080fd5b505afa158015611f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f50919061456c565b60208181015163ffffffff898116600090815260048085526040918290208251610160810184528154815260018201549681019690965260028101549286019290925260038201546001600160a01b038082166060880152600160a01b8083049095166080880152600160c01b820461ffff90811660a0890152600160d01b90920490911660c08701529082015480821660e08701526001600160401b03939004831661010086015260058201548116610120860152600690910154166101408401819052929650929350919091169015612032578361014001519550612123565b826001600160a01b0316638208e76c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561206b57600080fd5b505afa15801561207f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a391906141af565b6001600160a01b0316636352211e826040518263ffffffff1660e01b81526004016120d091815260200190565b60206040518083038186803b1580156120e857600080fd5b505afa1580156120fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212091906141af565b95505b826001600160a01b0316634fbe68a06040518163ffffffff1660e01b815260040160206040518083038186803b15801561215c57600080fd5b505afa158015612170573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219491906141af565b6001600160a01b0316636352211e826040518263ffffffff1660e01b81526004016121c191815260200190565b60206040518083038186803b1580156121d957600080fd5b505afa1580156121ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221191906141af565b945050509193509193565b63ffffffff84166000908152600560209081526040808320815160608101835290546001600160a01b038116825261ffff600160a01b8204811694830194909452600160b01b900490921690820152908061227684613493565b60608601519193509150612295906001600160a01b031633878461355c565b6020830151604051637f5e0ed360e01b81526004810184905261ffff9091166024820152600090734b45B6fC98616D4A3E9c59395d4526a863202B6e90637f5e0ed39060440160206040518083038186803b1580156122f357600080fd5b505af4158015612307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232b9190614715565b9050600081118015612346575083516001600160a01b031615155b15612375576123558184614f3d565b84516060870151919450612375916001600160a01b03169033908461355c565b6123973361238161155a565b60608801516001600160a01b031691908661355c565b856001600160a01b0316876001600160a01b03168963ffffffff167f3687d64f40b11dd1c102a76882ac1735891c546a96ae27935eb5c7865b9d86fa886000015189604001518789888c600001518e61012001518f60600151604051612404989796959493929190614d3d565b60405180910390a45050505050505050565b61242285848484613583565b610a5483308661361c565b61151e8363a9059cbb60e01b848460405160240161244c929190614a9b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526136bf565b61248b6111ce565b6124ce5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107c2565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161250b9190614a63565b60405180910390a1565b604051631c2d8fb360e31b81526d5045524d49545445445f4e46545360901b60048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d989060240160206040518083038186803b15801561258857600080fd5b505afa15801561259c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c091906141af565b6001600160a01b031663b8c8aff8836040518263ffffffff1660e01b81526004016125eb9190614a63565b60206040518083038186803b15801561260357600080fd5b505afa158015612617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078d91906141af565b60c08201516001600160a01b03166000908152600b602052604090205460ff1661267857604051633bf6dbbd60e11b815260040160405180910390fd5b6001600160a01b03811661269f57604051634499a26b60e01b815260040160405180910390fd5b600254826080015163ffffffff1611156126cc57604051631c71337360e11b815260040160405180910390fd5b608082015163ffffffff166126f45760405163f883f39d60e01b815260040160405180910390fd5b60035460a083015161ffff90811691161461145457604051635b5e710360e01b815260040160405180910390fd5b805160208201511015611e0557604051635169219960e01b815260040160405180910390fd5b612750613eb9565b6040518061016001604052808460000151815260200184602001518152602001846040015181526020018460c001516001600160a01b03168152602001846080015163ffffffff168152602001600061ffff1681526020018460a0015161ffff168152602001836001600160a01b03168152602001426001600160401b0316815260200184606001516001600160a01b03168152602001336001600160a01b0316815250905092915050565b6040805160608101825260008082526020820181905291810191909152604080516060810182526001600160a01b0380861680835292516347e332df60e11b815260048101939093527f0000000000000000000000000000000000000000000000000000000000000000166024830152906020820190734b45B6fC98616D4A3E9c59395d4526a863202B6e90638fc665be9060440160206040518083038186803b1580156128a957600080fd5b505af41580156128bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e191906146e1565b61ffff1681526020018361ffff16815250905092915050565b6040808201516001600160a01b03166000908152600a60209081528282208451835290529081205460ff161561294357604051633ab3447f60e11b815260040160405180910390fd5b6040808301516001600160a01b03166000908152600a6020908152828220855183529052819020805460ff191660011790555163eb2ac63f60e01b8152736AFd80bBc24123Ab9ec630b239D0DEFb40D35e389063eb2ac63f906129ac9086908690600401614cae565b60206040518083038186803b1580156129c457600080fd5b505af41580156129d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fc9190614528565b612a1957604051636d2a03cf60e01b815260040160405180910390fd5b6000612a4b762224a922a1aa2fa627a0a72fa324ac22a22fa7a32322a960491b87873387604001518960e00151613791565b905082604001516001600160a01b0316336001600160a01b03168263ffffffff167f42cc7f53ef7b494c5dd6f0095175f7d07b5d3d7b2a03f34389fea445ba4a3a8b8989604051612a9d929190614b5d565b60405180910390a495945050505050565b6001600160a01b038216612ad557604051636e8ab17b60e11b815260040160405180910390fd5b6001600160a01b0382166000818152600b6020908152604091829020805460ff191685151590811790915591519182527ff100355be652ecc881568750e6a98c0713e4316f75d5314ebc9039e0acb52f24910160405180910390a25050565b612b3c6111ce565b15612b595760405162461bcd60e51b81526004016107c290614ac7565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124fe3390565b63ffffffff87166000908152600460208190526040808320905163b5ec526360e01b81529092918291734b45B6fC98616D4A3E9c59395d4526a863202B6e9163b5ec526391612c0f9187918f918f918f918e917f00000000000000000000000000000000000000000000000000000000000000009101614ba3565b604080518083038186803b158015612c2657600080fd5b505af4158015612c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5e91906141cb565b6001600160a01b0381166000818152600a602090815260408083208c8452825291829020805460ff1916600117905581516080810183528b81529081018a905280820192909252606082018890525163d06ff74160e01b8152929450909250736AFd80bBc24123Ab9ec630b239D0DEFb40D35e389163d06ff74191612ced918e918e918e918e91600401614e74565b60206040518083038186803b158015612d0557600080fd5b505af4158015612d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3d9190614528565b612d5a5760405163e83dc84b60e01b815260040160405180910390fd5b60008715612e44576003840154604051632ad659af60e01b8152600481018a9052600160d01b90910461ffff166024820152734b45B6fC98616D4A3E9c59395d4526a863202B6e90632ad659af9060440160206040518083038186803b158015612dc357600080fd5b505af4158015612dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfb9190614715565b9050612e228383612e0c848c614f3d565b60038801546001600160a01b031692919061355c565b612e4483612e2e61155a565b60038701546001600160a01b031691908461355c565b60038401805463ffffffff60a01b1916600160a01b63ffffffff8d16021790556001840189905560068401546001600160a01b0316612e9b576006840180546001600160a01b0319166001600160a01b0385161790555b604051631c2d8fb360e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d989060240160206040518083038186803b158015612f1a57600080fd5b505afa158015612f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5291906141af565b6001600160a01b031663072db1478c846040518363ffffffff1660e01b8152600401612f7f929190614d82565b600060405180830381600087803b158015612f9957600080fd5b505af1158015612fad573d6000803e3d6000fd5b50506040805163ffffffff8e81168252602082018e90529181018c9052606081018590526001600160a01b03808716945087169250908e16907f37357bed780fda5aed28c32fe9cd762cb2f2f8a70c0d9b342aba59c945943ca09060800160405180910390a45050505050505050505050565b63ffffffff84166000908152600560209081526040808320815160608101835290546001600160a01b038116825261ffff600160a01b8204811694830194909452600160b01b900490921690820152908061307a84613493565b9150915083606001516001600160a01b03166323b872dd3387846040518463ffffffff1660e01b81526004016130b293929190614a77565b602060405180830381600087803b1580156130cc57600080fd5b505af19250505080156130fc575060408051601f3d908101601f191682019092526130f991810190614528565b60015b6131c257606084015161311a906001600160a01b031633308461355c565b6001600160a01b038086166000908152600960209081526040808320606089015190941683529290529081208054839290613156908490614f25565b909155505060608401516001600160a01b031660009081526008602052604081208054839290613187908490614f25565b909155505060405163ffffffff8816907fe6dfda7486ec1e06f754c28be83c676af29b18143765a2843361313cdab2712590600090a26131c4565b505b6020830151604051637f5e0ed360e01b81526004810184905261ffff9091166024820152600090734b45B6fC98616D4A3E9c59395d4526a863202B6e90637f5e0ed39060440160206040518083038186803b15801561322257600080fd5b505af4158015613236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325a9190614715565b9050600081118015613275575083516001600160a01b031615155b1561332d576132848184614f3d565b606086015185516040516323b872dd60e01b81529295506001600160a01b03909116916323b872dd916132be913391908690600401614a77565b602060405180830381600087803b1580156132d857600080fd5b505af1925050508015613308575060408051601f3d908101601f1916820190925261330591810190614528565b60015b61332b576060850151613326906001600160a01b031633308461355c565b61332d565b505b84606001516001600160a01b03166323b872dd3361334961155a565b866040518463ffffffff1660e01b815260040161336893929190614a77565b602060405180830381600087803b15801561338257600080fd5b505af19250505080156133b2575060408051601f3d908101601f191682019092526133af91810190614528565b60015b6133d55760608501516133d0906001600160a01b031633308661355c565b612397565b50856001600160a01b0316876001600160a01b03168963ffffffff167f3687d64f40b11dd1c102a76882ac1735891c546a96ae27935eb5c7865b9d86fa886000015189604001518789888c600001518e61012001518f60600151604051612404989796959493929190614d3d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000836000015184602001516134ac9190614f3d565b60c0850151604051632ad659af60e01b81526004810183905261ffff9091166024820152909150734b45B6fC98616D4A3E9c59395d4526a863202B6e90632ad659af9060440160206040518083038186803b15801561350a57600080fd5b505af415801561351e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135429190614715565b92508284602001516135549190614f3d565b915050915091565b61357d846323b872dd60e01b85858560405160240161244c93929190614a77565b50505050565b63ffffffff84166000908152600660209081526040808320805460ff191660019081179091556101208701516001600160a01b031684526007835281842087830151855290925282208054919290916135dd908490614f3d565b909155505060405163a4d0845d60e01b815263ffffffff8516600482015281151560248201526001600160a01b0383169063a4d0845d90604401610eaa565b60e083015161012084015160408086015181516001600160a01b038781166024830152868116604483015290931660648401526084808401919091528151808403909101815260a49092018152602080830180516001600160e01b031663b030667160e01b17905281518083019092528082527f4e4654206e6f74207375636365737366756c6c79207472616e736665727265649082015261357d9291906137b7565b6000613714826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138969092919063ffffffff16565b80519091501561151e57808060200190518101906137329190614528565b61151e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107c2565b600061379e86853061361c565b6137ac8787878787876138ad565b979650505050505050565b60606001600160a01b0384163b61381f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107c2565b600080856001600160a01b03168560405161383a9190614a47565b600060405180830381855af49150503d8060008114613875576040519150601f19603f3d011682016040523d82523d6000602084013e61387a565b606091505b509150915061388a828286613d5a565b925050505b9392505050565b60606138a58484600085613d93565b949350505050565b6101208501516001600160a01b03166000908152600760209081526040808320818901518452909152812080546001919083906138eb908490614f25565b909155505085516040868101519051637b2392f160e01b8152600481019290925261ffff1660248201526001600160a01b0383166044820152600090734b45B6fC98616D4A3E9c59395d4526a863202B6e90637b2392f19060640160206040518083038186803b15801561395e57600080fd5b505af4158015613972573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139969190614715565b905060008188600001516139aa9190614f3d565b905081156139cc5760608801516139cc906001600160a01b031686868561355c565b60608801516139e6906001600160a01b031686888461355c565b604051631c2d8fb360e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d989060240160206040518083038186803b158015613a6857600080fd5b505afa158015613a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa091906141af565b60405163d1f7659560e01b81529091506001600160a01b0382169063d1f7659590613ad19089908e90600401614a9b565b602060405180830381600087803b158015613aeb57600080fd5b505af1158015613aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b239190614749565b935088600460008663ffffffff1663ffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160030160146101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160030160186101000a81548161ffff021916908361ffff16021790555060c082015181600301601a6101000a81548161ffff021916908361ffff16021790555060e08201518160040160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101008201518160040160146101000a8154816001600160401b0302191690836001600160401b031602179055506101208201518160050160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101408201518160060160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555090505087600560008663ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548161ffff021916908361ffff16021790555060408201518160000160166101000a81548161ffff021916908361ffff1602179055509050505050509695505050505050565b60608315613d6957508161388f565b825115613d795782518084602001fd5b8160405162461bcd60e51b81526004016107c29190614ab4565b606082471015613df45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107c2565b6001600160a01b0385163b613e4b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107c2565b600080866001600160a01b03168587604051613e679190614a47565b60006040518083038185875af1925050503d8060008114613ea4576040519150601f19603f3d011682016040523d82523d6000602084013e613ea9565b606091505b50915091506137ac828286613d5a565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b8035613f2081614fc7565b919050565b600082601f830112613f35578081fd5b81356020613f4a613f4583614f02565b614ed2565b80838252828201915082860187848660051b8901011115613f69578586fd5b855b85811015613f90578135613f7e81614fdc565b84529284019290840190600101613f6b565b5090979650505050505050565b60008083601f840112613fae578182fd5b5081356001600160401b03811115613fc4578182fd5b6020830191508360208260051b8501011115613fdf57600080fd5b9250929050565b60008083601f840112613ff7578182fd5b5081356001600160401b0381111561400d578182fd5b602083019150836020828501011115613fdf57600080fd5b600082601f830112614035578081fd5b81356001600160401b0381111561404e5761404e614fb1565b614061601f8201601f1916602001614ed2565b818152846020838601011115614075578283fd5b816020850160208301379081016020019190915292915050565b6000604082840312156140a0578081fd5b604051604081018181106001600160401b03821117156140c2576140c2614fb1565b60405290508082356140d381614fc7565b815260208301356140e381614fea565b6020919091015292915050565b600060808284031215614101578081fd5b604051608081016001600160401b03828210818311171561412457614124614fb1565b8160405282935084358352602085013560208401526040850135915061414982614fc7565b816040840152606085013591508082111561416357600080fd5b5061417085828601614025565b6060830152505092915050565b8035613f2081614fea565b8035613f2081614ffa565b6000602082840312156141a4578081fd5b813561388f81614fc7565b6000602082840312156141c0578081fd5b815161388f81614fc7565b600080604083850312156141dd578081fd5b82516141e881614fc7565b60208401519092506141f981614fc7565b809150509250929050565b60008060008060008060008060a0898b03121561421f578384fd5b883561422a81614fc7565b9750602089013561423a81614fc7565b965060408901356001600160401b0380821115614255578586fd5b6142618c838d01613f9d565b909850965060608b0135915080821115614279578586fd5b6142858c838d01613f9d565b909650945060808b013591508082111561429d578384fd5b506142aa8b828c01613fe6565b999c989b5096995094979396929594505050565b600080600080608085870312156142d3578182fd5b84356142de81614fc7565b935060208501356142ee81614fc7565b92506040850135915060608501356001600160401b0381111561430f578182fd5b61431b87828801614025565b91505092959194509250565b60008060008060008060a0878903121561433f578384fd5b863561434a81614fc7565b9550602087013561435a81614fc7565b9450604087013593506060870135925060808701356001600160401b03811115614382578283fd5b61438e89828a01613fe6565b979a9699509497509295939492505050565b600080604083850312156143b2578182fd5b82356143bd81614fc7565b915060208301356141f981614fdc565b600080604083850312156143df578182fd5b82356143ea81614fc7565b946020939093013593505050565b6000806040838503121561440a578182fd5b825161441581614fc7565b6020939093015192949293505050565b600080600060608486031215614439578081fd5b833561444481614fc7565b925060208401359150604084013561445b81614fc7565b809150509250925092565b60008060408385031215614478578182fd5b82356001600160401b038082111561448e578384fd5b818501915085601f8301126144a1578384fd5b813560206144b1613f4583614f02565b8083825282820191508286018a848660051b89010111156144d0578889fd5b8896505b848710156144fb5780356144e781614fc7565b8352600196909601959183019183016144d4565b5096505086013592505080821115614511578283fd5b5061451e85828601613f25565b9150509250929050565b600060208284031215614539578081fd5b815161388f81614fdc565b600060208284031215614555578081fd5b81356001600160e01b03198116811461388f578182fd5b60006060828403121561457d578081fd5b604051606081016001600160401b0382821081831117156145a0576145a0614fb1565b81604052845191506145b182614fc7565b90825260208401519080821682146145c7578384fd5b5060208201526040830151600481106145de578283fd5b60408201529392505050565b6000806000838503610160811215614600578182fd5b6101008082121561460f578283fd5b614617614ea9565b915085358252602086013560208301526040860135604083015261463d60608701613f15565b606083015261464e60808701614188565b608083015261465f60a0870161417d565b60a083015261467060c08701613f15565b60c083015261468160e08701613f15565b60e08301529093508401356001600160401b0381111561469f578182fd5b6146ab868287016140f0565b9250506146bc85610120860161408f565b90509250925092565b6000602082840312156146d6578081fd5b813561388f81614fea565b6000602082840312156146f2578081fd5b815161388f81614fea565b60006020828403121561470e578081fd5b5035919050565b600060208284031215614726578081fd5b5051919050565b60006020828403121561473e578081fd5b813561388f81614ffa565b60006020828403121561475a578081fd5b815161388f81614ffa565b6000806000806060858703121561477a578182fd5b843561478581614ffa565b9350602085013561479581614fc7565b925060408501356001600160401b038111156147af578283fd5b6147bb87828801613fe6565b95989497509550505050565b60008060008060008060008060e0898b0312156147e2578182fd5b88356147ed81614ffa565b975060208901356147fd81614fc7565b965060408901356001600160401b03811115614817578283fd5b6148238b828c01613fe6565b909750955050606089013561483781614fc7565b93506080890135925060a089013561484e81614fdc565b8092505060c089013590509295985092959890939650565b600080600080600080600060e0888a031215614880578081fd5b873561488b81614ffa565b9650602088013561489b81614ffa565b955060408801359450606088013593506080880135925060a0880135915060c08801356001600160401b038111156148d1578182fd5b6148dd8a828b01614025565b91505092959891949750929550565b6001600160a01b03169052565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000815180845261493a816020860160208601614f54565b601f01601f19169290920160200192915050565b805182526020810151602083015260408101516040830152606081015161497860608401826148ec565b506080810151614990608084018263ffffffff169052565b5060a08101516149a660a084018261ffff169052565b5060c08101516149bc60c084018261ffff169052565b5060e08101516149cf60e08401826148ec565b50610100818101516001600160401b031690830152610120808201516149f7828501826148ec565b50506101408082015161357d828501826148ec565b805182526020810151602083015260018060a01b03604082015116604083015260006060820151608060608501526138a56080850182614922565b60008251614a59818460208701614f54565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60208152600061388f6020830184614922565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6101c08101614b6c828561494e565b82516001600160a01b0316610160830152602083015161ffff9081166101808401526040909301519092166101a090910152919050565b86548152600187015460208201526002870154604082015260038701546102008201906001600160a01b03614bdd606085018284166148ec565b60a082901c63ffffffff16608085015261ffff60c083901c811660a0860152614c1160c08601828560d01c1661ffff169052565b5060048a01549150614c2860e085018284166148ec565b5060a081901c6001600160401b03166101008401525060058801546001600160a01b0316614c5a6101208401826148ec565b5060068801546001600160a01b0316614c776101408401826148ec565b5063ffffffff871661016083015263ffffffff8616610180830152846101a0830152836101c08301526137ac6101e08301846148ec565b600061012084518352602085015160208401526040850151604084015260018060a01b03606086015116606084015263ffffffff608086015116608084015261ffff60a08601511660a084015260c0850151614d0d60c08501826148ec565b5060e0850151614d2060e08501826148ec565b5080610100840152614d3481840185614a0c565b95945050505050565b97885260208801969096526040870194909452606086019290925260808501526001600160a01b0390811660a085015290811660c08401521660e08201526101000190565b63ffffffff9290921682526001600160a01b0316602082015260400190565b600061026063ffffffff8d168352614dbc602084018d61494e565b6001600160a01b038b81166101808501526101a08401829052614de28285018b8d6148f9565b9881166101c08501526101e084019790975250509215156102008401526102208301919091529091166102409091015295945050505050565b60006101e063ffffffff89168352614e36602084018961494e565b6001600160a01b038781166101808501526101a08401829052614e5c82850187896148f9565b92508085166101c08501525050979650505050505050565b600063ffffffff808816835280871660208401525084604083015283606083015260a060808301526137ac60a0830184614a0c565b60405161010081016001600160401b0381118282101715614ecc57614ecc614fb1565b60405290565b604051601f8201601f191681016001600160401b0381118282101715614efa57614efa614fb1565b604052919050565b60006001600160401b03821115614f1b57614f1b614fb1565b5060051b60200190565b60008219821115614f3857614f38614f9b565b500190565b600082821015614f4f57614f4f614f9b565b500390565b60005b83811015614f6f578181015183820152602001614f57565b8381111561357d5750506000910152565b6000600019821415614f9457614f94614f9b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611e0557600080fd5b8015158114611e0557600080fd5b61ffff81168114611e0557600080fd5b63ffffffff81168114611e0557600080fdfea164736f6c6343000804000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061022d5760003560e01c8063657a88a11161013b578063ab3b1280116100b8578063bce42e421161007c578063bce42e42146106d5578063ddfddad6146106e8578063eda928ab146106fb578063f23a6e611461070e578063f2fde38b1461072e57600080fd5b8063ab3b128014610660578063ac4e35ea14610689578063b18e77721461069c578063b31ec1d4146106af578063bc197c81146106c257600080fd5b80638456cb59116100ff5780638456cb5914610603578063872873be1461060b5780638da5cb5b146106375780639658e4051461063f578063a4441a6f1461065257600080fd5b8063657a88a1146105875780636ed93dd01461059a57806377cfa991146105b65780637836baf1146105dd57806379b64040146105f057600080fd5b8063318dacd3116101c95780635163a1c31161018d5780635163a1c31461051157806356efe98c1461052457806359a727341461054c5780635c975abb1461055f578063616693d81461056757600080fd5b8063318dacd314610476578063328404b014610489578063365a86fc146104c25780633f4ba83a146104f657806347948d92146104fe57600080fd5b806301ffc9a7146102325780630717f3aa1461025a5780630ff81c3f1461027d578063150b7a02146102e7578063192b355d1461031e5780631c6caf4114610335578063227cda181461034a5780632b218022146104505780632c1d4ec214610463575b600080fd5b610245610240366004614544565b610741565b60405190151581526020015b60405180910390f35b61024561026836600461472d565b60066020526000908152604090205460ff1681565b6102bd61028b36600461472d565b6005602052600090815260409020546001600160a01b0381169061ffff600160a01b8204811691600160b01b90041683565b604080516001600160a01b03909416845261ffff9283166020850152911690820152606001610251565b6103056102f53660046142be565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610251565b61032760025481565b604051908152602001610251565b6103486103433660046146c5565b610793565b005b6103dc61035836600461472d565b600460208190526000918252604090912080546001820154600283015460038401549484015460058501546006909501549395929491936001600160a01b0380851694600160a01b80820463ffffffff1695600160c01b830461ffff90811696600160d01b909404169484841694929093046001600160401b03169290821691168b565b604080519b8c5260208c019a909a52988a01979097526001600160a01b0395861660608a015263ffffffff909416608089015261ffff92831660a0890152911660c0870152821660e08601526001600160401b03166101008501529081166101208401521661014082015261016001610251565b61034861045e36600461472d565b61083d565b610348610471366004614425565b61092c565b6103486104843660046147c7565b610a5b565b6102456104973660046143cd565b6001600160a01b03919091166000908152600a60209081526040808320938352929052205460ff1690565b6104e97f000000000000000000000000000000000000000000000000000000000000000081565b6040516102519190614a63565b610348610ca4565b61034861050c3660046146fd565b610cdd565b61034861051f366004614425565b610d66565b6105376105323660046145ea565b610ee2565b60405163ffffffff9091168152602001610251565b61034861055a36600461472d565b610f8a565b6102456111ce565b762224a922a1aa2fa627a0a72fa324ac22a22fa7a32322a960491b610327565b610348610595366004614765565b6111de565b6105a361271081565b60405161ffff9091168152602001610251565b6103277f000000000000000000000000000000000000000000000000000000000000000081565b6103486105eb3660046143a0565b61141b565b6103486105fe366004614466565b611458565b610348611523565b610245610619366004614193565b6001600160a01b03166000908152600b602052604090205460ff1690565b6104e961155a565b61034861064d3660046146fd565b611569565b6003546105a39061ffff1681565b61032761066e36600461472d565b63ffffffff1660009081526004602052604090206001015490565b610348610697366004614425565b6115cb565b6103486106aa366004614866565b611762565b6103486106bd36600461472d565b6117cb565b6103056106d0366004614204565b6119cb565b6103486106e336600461472d565b611a16565b6103486106f6366004614193565b611bcc565b61034861070936600461472d565b611c94565b61030561071c366004614327565b63f23a6e6160e01b9695505050505050565b61034861073c366004614193565b611d68565b60006001600160e01b03198216630271189760e51b148061077257506001600160e01b03198216630a85bd0160e11b145b8061078d57506001600160e01b031982166301ffc9a760e01b145b92915050565b3361079c61155a565b6001600160a01b0316146107cb5760405162461bcd60e51b81526004016107c290614af1565b60405180910390fd5b61271061ffff821611156107f2576040516314004bcf60e21b815260040160405180910390fd5b6003805461ffff191661ffff83169081179091556040519081527f03017365bbe16943b524030df07e7689168ab63e854d27417498e6f9dc584dab906020015b60405180910390a150565b600260015414156108605760405162461bcd60e51b81526004016107c290614b26565b600260015560405163364d0abb60e11b815273__$1291e1ff22aea68c4ae26c19e2b9f8f397$__90636c9a1576906108be9084907f000000000000000000000000000000000000000000000000000000000000000090600401614d82565b60006040518083038186803b1580156108d657600080fd5b505af41580156108ea573d6000803e3d6000fd5b505050506000806000806108fd85611e08565b93509350935093506109118585858561221c565b60016109208686858585612416565b50506001805550505050565b3361093561155a565b6001600160a01b03161461095b5760405162461bcd60e51b81526004016107c290614af1565b6040516370a0823160e01b815283906000906001600160a01b038316906370a082319061098c903090600401614a63565b60206040518083038186803b1580156109a457600080fd5b505afa1580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc9190614715565b9050806109fc576040516334b5d06d60e21b815260040160405180910390fd5b6001600160a01b0385166000908152600860205260409020548490610a219083614f3d565b1015610a405760405163368e910d60e21b815260040160405180910390fd5b610a546001600160a01b038316848661242d565b5050505050565b60026001541415610a7e5760405162461bcd60e51b81526004016107c290614b26565b6002600155604051635bfd0fb160e11b815273__$1291e1ff22aea68c4ae26c19e2b9f8f397$__9063b7fa1f6290610adc908b907f000000000000000000000000000000000000000000000000000000000000000090600401614d82565b60006040518083038186803b158015610af457600080fd5b505af4158015610b08573d6000803e3d6000fd5b5050505063ffffffff881660009081526006602052604090205460ff1615610b4357604051633db5ad0160e11b815260040160405180910390fd5b63ffffffff8881166000908152600460208181526040928390208351610160810185528154815260018201549281019290925260028101548285015260038101546001600160a01b038082166060850152600160a01b8083049097166080850152600160c01b820461ffff90811660a0860152600160d01b90920490911660c08401528184015480821660e0850152959095046001600160401b03166101008301526005810154851661012083015260060154909316610140840152905163491bd44160e11b815273__$f4648c37a6443643782b15e2e6be9a7811$__91639237a88291610c65918d9186918e918e918e918e918e918e918e917f00000000000000000000000000000000000000000000000000000000000000009101614da1565b60006040518083038186803b158015610c7d57600080fd5b505af4158015610c91573d6000803e3d6000fd5b5050600180555050505050505050505050565b33610cad61155a565b6001600160a01b031614610cd35760405162461bcd60e51b81526004016107c290614af1565b610cdb612483565b565b33610ce661155a565b6001600160a01b031614610d0c5760405162461bcd60e51b81526004016107c290614af1565b63ffffffff811115610d3157604051630737847960e51b815260040160405180910390fd5b60028190556040518181527f64f65a4a1a932867ad599da36210fc47c698b3abb2413cfdfd36bf59697a69cb90602001610832565b33610d6f61155a565b6001600160a01b031614610d955760405162461bcd60e51b81526004016107c290614af1565b6001600160a01b0383166000908152600760209081526040808320858452909152902054839015610dd957604051636a32439f60e01b815260040160405180910390fd5b6040516331a9108f60e11b81526004810184905230906001600160a01b03831690636352211e9060240160206040518083038186803b158015610e1b57600080fd5b505afa158015610e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5391906141af565b6001600160a01b031614610e7a5760405163ca5ae8a360e01b815260040160405180910390fd5b604051632142170760e11b81526001600160a01b038216906342842e0e90610eaa90309086908890600401614a77565b600060405180830381600087803b158015610ec457600080fd5b505af1158015610ed8573d6000803e3d6000fd5b5050505050505050565b6000610eec6111ce565b15610f095760405162461bcd60e51b81526004016107c290614ac7565b60026001541415610f2c5760405162461bcd60e51b81526004016107c290614b26565b60026001556060840151600090610f4290612515565b9050610f4e858261263b565b610f5785612722565b610f7d610f648683612748565b610f76856000015186602001516127fc565b87876128fa565b6001805595945050505050565b60026001541415610fad5760405162461bcd60e51b81526004016107c290614b26565b6002600155604051635bfd0fb160e11b815273__$1291e1ff22aea68c4ae26c19e2b9f8f397$__9063b7fa1f629061100b9084907f000000000000000000000000000000000000000000000000000000000000000090600401614d82565b60006040518083038186803b15801561102357600080fd5b505af4158015611037573d6000803e3d6000fd5b5050505063ffffffff811660009081526006602052604090205460ff161561107257604051633db5ad0160e11b815260040160405180910390fd5b63ffffffff8116600090815260046020908152604080832060058101546001600160a01b0316845260078352818420600282015485529092528220805491926001926110bf908490614f3d565b9091555050604051631276b77d60e11b815263ffffffff83166004820152602481018290526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166044820152600090819073__$f4648c37a6443643782b15e2e6be9a7811$__906324ed6efa90606401604080518083038186803b15801561114e57600080fd5b505af4158015611162573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118691906143f8565b6001600160a01b0382166000908152600760209081526040808320848452909152812080549395509193506001926111bf908490614f25565b90915550506001805550505050565b600054600160a01b900460ff1690565b600260015414156112015760405162461bcd60e51b81526004016107c290614b26565b6002600155604051635bfd0fb160e11b815273__$1291e1ff22aea68c4ae26c19e2b9f8f397$__9063b7fa1f629061125f9087907f000000000000000000000000000000000000000000000000000000000000000090600401614d82565b60006040518083038186803b15801561127757600080fd5b505af415801561128b573d6000803e3d6000fd5b5050505063ffffffff841660009081526006602052604090205460ff16156112c657604051633db5ad0160e11b815260040160405180910390fd5b63ffffffff8481166000908152600460208181526040928390208351610160810185528154815260018201549281019290925260028101548285015260038101546001600160a01b038082166060850152600160a01b8083049097166080850152600160c01b820461ffff90811660a0860152600160d01b90920490911660c08401528184015480821660e0850152959095046001600160401b0316610100830152600581015485166101208301526006015490931661014084015290516361ec917160e11b815273__$f4648c37a6443643782b15e2e6be9a7811$__9163c3d922e2916113e091899186918a918a918a917f00000000000000000000000000000000000000000000000000000000000000009101614e1b565b60006040518083038186803b1580156113f857600080fd5b505af415801561140c573d6000803e3d6000fd5b50506001805550505050505050565b3361142461155a565b6001600160a01b03161461144a5760405162461bcd60e51b81526004016107c290614af1565b6114548282612aae565b5050565b3361146161155a565b6001600160a01b0316146114875760405162461bcd60e51b81526004016107c290614af1565b80518251146114a857604051621dbe8b60e81b815260040160405180910390fd5b60005b825181101561151e5761150c8382815181106114d757634e487b7160e01b600052603260045260246000fd5b60200260200101518383815181106114ff57634e487b7160e01b600052603260045260246000fd5b6020026020010151612aae565b8061151681614f80565b9150506114ab565b505050565b3361152c61155a565b6001600160a01b0316146115525760405162461bcd60e51b81526004016107c290614af1565b610cdb612b34565b6000546001600160a01b031690565b336000908152600a6020908152604080832084845290915290205460ff16156115a557604051633ab3447f60e11b815260040160405180910390fd5b336000908152600a6020908152604080832093835292905220805460ff19166001179055565b336115d461155a565b6001600160a01b0316146115fa5760405162461bcd60e51b81526004016107c290614af1565b604051627eeac760e11b815283906000906001600160a01b0383169062fdd58e9061162b9030908890600401614a9b565b60206040518083038186803b15801561164357600080fd5b505afa158015611657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167b9190614715565b6001600160a01b0386166000908152600760209081526040808320888452909152902054909150156116c057604051636a32439f60e01b815260040160405180910390fd5b806116de5760405163f266c3ab60e01b815260040160405180910390fd5b604051637921219560e11b81523060048201526001600160a01b038481166024830152604482018690526064820183905260a06084830152600060a483015283169063f242432a9060c401600060405180830381600087803b15801561174357600080fd5b505af1158015611757573d6000803e3d6000fd5b505050505050505050565b61176a6111ce565b156117875760405162461bcd60e51b81526004016107c290614ac7565b600260015414156117aa5760405162461bcd60e51b81526004016107c290614b26565b60026001556117be87878787878787612b94565b5050600180555050505050565b600260015414156117ee5760405162461bcd60e51b81526004016107c290614b26565b6002600155604051635bfd0fb160e11b815273__$1291e1ff22aea68c4ae26c19e2b9f8f397$__9063b7fa1f629061184c9084907f000000000000000000000000000000000000000000000000000000000000000090600401614d82565b60006040518083038186803b15801561186457600080fd5b505af4158015611878573d6000803e3d6000fd5b5050505063ffffffff811660009081526006602052604090205460ff16156118b357604051633db5ad0160e11b815260040160405180910390fd5b6000806000806118c285611e08565b93509350935093506000826080015163ffffffff168361010001516001600160401b03166118f09190614f25565b90508042116119125760405163477e47f960e11b815260040160405180910390fd5b336001600160a01b0385161461193b57604051633c35984560e11b815260040160405180910390fd5b600061194a8786868685612416565b8351604080860151610120870151825193845260208401919091529082018490524260608301526001600160a01b039081166080830152808716919088169063ffffffff8a16907f4fac0ff43299a330bce57d0579985305af580acf256a6d7977083ede81be13269060a00160405180910390a45050600180555050505050565b60405162461bcd60e51b815260206004820152601b60248201527f45524331313535206261746368206e6f7420737570706f72746564000000000060448201526000906064016107c2565b60026001541415611a395760405162461bcd60e51b81526004016107c290614b26565b600260015563ffffffff81166000908152600460205260409020600601546001600160a01b0316338114611a80576040516348c5194760e11b815260040160405180910390fd5b604051631c2d8fb360e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d989060240160206040518083038186803b158015611b0257600080fd5b505afa158015611b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3a91906141af565b604051631b982cf160e01b81529091506001600160a01b03821690631b982cf190611b6b9086908690600401614d82565b600060405180830381600087803b158015611b8557600080fd5b505af1158015611b99573d6000803e3d6000fd5b50505063ffffffff909316600090815260046020526040902060060180546001600160a01b031916905550506001805550565b60026001541415611bef5760405162461bcd60e51b81526004016107c290614b26565b60026001553360009081526009602090815260408083206001600160a01b038516845290915290205480611c365760405163073ad17560e51b815260040160405180910390fd5b611c4a6001600160a01b038316338361242d565b3360009081526009602090815260408083206001600160a01b03861684528252808320839055600890915281208054839290611c87908490614f3d565b9091555050600180555050565b60026001541415611cb75760405162461bcd60e51b81526004016107c290614b26565b600260015560405163364d0abb60e11b815273__$1291e1ff22aea68c4ae26c19e2b9f8f397$__90636c9a157690611d159084907f000000000000000000000000000000000000000000000000000000000000000090600401614d82565b60006040518083038186803b158015611d2d57600080fd5b505af4158015611d41573d6000803e3d6000fd5b50505050600080600080611d5485611e08565b935093509350935061091185858585613020565b33611d7161155a565b6001600160a01b031614611d975760405162461bcd60e51b81526004016107c290614af1565b6001600160a01b038116611dfc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107c2565b611e0581613443565b50565b600080611e13613eb9565b604051631c2d8fb360e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d989060240160206040518083038186803b158015611e9557600080fd5b505afa158015611ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecd91906141af565b60405163e6c5a54160e01b815263ffffffff871660048201529091506000906001600160a01b0383169063e6c5a5419060240160606040518083038186803b158015611f1857600080fd5b505afa158015611f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f50919061456c565b60208181015163ffffffff898116600090815260048085526040918290208251610160810184528154815260018201549681019690965260028101549286019290925260038201546001600160a01b038082166060880152600160a01b8083049095166080880152600160c01b820461ffff90811660a0890152600160d01b90920490911660c08701529082015480821660e08701526001600160401b03939004831661010086015260058201548116610120860152600690910154166101408401819052929650929350919091169015612032578361014001519550612123565b826001600160a01b0316638208e76c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561206b57600080fd5b505afa15801561207f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a391906141af565b6001600160a01b0316636352211e826040518263ffffffff1660e01b81526004016120d091815260200190565b60206040518083038186803b1580156120e857600080fd5b505afa1580156120fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212091906141af565b95505b826001600160a01b0316634fbe68a06040518163ffffffff1660e01b815260040160206040518083038186803b15801561215c57600080fd5b505afa158015612170573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219491906141af565b6001600160a01b0316636352211e826040518263ffffffff1660e01b81526004016121c191815260200190565b60206040518083038186803b1580156121d957600080fd5b505afa1580156121ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221191906141af565b945050509193509193565b63ffffffff84166000908152600560209081526040808320815160608101835290546001600160a01b038116825261ffff600160a01b8204811694830194909452600160b01b900490921690820152908061227684613493565b60608601519193509150612295906001600160a01b031633878461355c565b6020830151604051637f5e0ed360e01b81526004810184905261ffff909116602482015260009073__$1291e1ff22aea68c4ae26c19e2b9f8f397$__90637f5e0ed39060440160206040518083038186803b1580156122f357600080fd5b505af4158015612307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232b9190614715565b9050600081118015612346575083516001600160a01b031615155b15612375576123558184614f3d565b84516060870151919450612375916001600160a01b03169033908461355c565b6123973361238161155a565b60608801516001600160a01b031691908661355c565b856001600160a01b0316876001600160a01b03168963ffffffff167f3687d64f40b11dd1c102a76882ac1735891c546a96ae27935eb5c7865b9d86fa886000015189604001518789888c600001518e61012001518f60600151604051612404989796959493929190614d3d565b60405180910390a45050505050505050565b61242285848484613583565b610a5483308661361c565b61151e8363a9059cbb60e01b848460405160240161244c929190614a9b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526136bf565b61248b6111ce565b6124ce5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107c2565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161250b9190614a63565b60405180910390a1565b604051631c2d8fb360e31b81526d5045524d49545445445f4e46545360901b60048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d989060240160206040518083038186803b15801561258857600080fd5b505afa15801561259c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c091906141af565b6001600160a01b031663b8c8aff8836040518263ffffffff1660e01b81526004016125eb9190614a63565b60206040518083038186803b15801561260357600080fd5b505afa158015612617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078d91906141af565b60c08201516001600160a01b03166000908152600b602052604090205460ff1661267857604051633bf6dbbd60e11b815260040160405180910390fd5b6001600160a01b03811661269f57604051634499a26b60e01b815260040160405180910390fd5b600254826080015163ffffffff1611156126cc57604051631c71337360e11b815260040160405180910390fd5b608082015163ffffffff166126f45760405163f883f39d60e01b815260040160405180910390fd5b60035460a083015161ffff90811691161461145457604051635b5e710360e01b815260040160405180910390fd5b805160208201511015611e0557604051635169219960e01b815260040160405180910390fd5b612750613eb9565b6040518061016001604052808460000151815260200184602001518152602001846040015181526020018460c001516001600160a01b03168152602001846080015163ffffffff168152602001600061ffff1681526020018460a0015161ffff168152602001836001600160a01b03168152602001426001600160401b0316815260200184606001516001600160a01b03168152602001336001600160a01b0316815250905092915050565b6040805160608101825260008082526020820181905291810191909152604080516060810182526001600160a01b0380861680835292516347e332df60e11b815260048101939093527f000000000000000000000000000000000000000000000000000000000000000016602483015290602082019073__$1291e1ff22aea68c4ae26c19e2b9f8f397$__90638fc665be9060440160206040518083038186803b1580156128a957600080fd5b505af41580156128bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e191906146e1565b61ffff1681526020018361ffff16815250905092915050565b6040808201516001600160a01b03166000908152600a60209081528282208451835290529081205460ff161561294357604051633ab3447f60e11b815260040160405180910390fd5b6040808301516001600160a01b03166000908152600a6020908152828220855183529052819020805460ff191660011790555163eb2ac63f60e01b815273__$07730b9b91c2b41a419f99961f709e7858$__9063eb2ac63f906129ac9086908690600401614cae565b60206040518083038186803b1580156129c457600080fd5b505af41580156129d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fc9190614528565b612a1957604051636d2a03cf60e01b815260040160405180910390fd5b6000612a4b762224a922a1aa2fa627a0a72fa324ac22a22fa7a32322a960491b87873387604001518960e00151613791565b905082604001516001600160a01b0316336001600160a01b03168263ffffffff167f42cc7f53ef7b494c5dd6f0095175f7d07b5d3d7b2a03f34389fea445ba4a3a8b8989604051612a9d929190614b5d565b60405180910390a495945050505050565b6001600160a01b038216612ad557604051636e8ab17b60e11b815260040160405180910390fd5b6001600160a01b0382166000818152600b6020908152604091829020805460ff191685151590811790915591519182527ff100355be652ecc881568750e6a98c0713e4316f75d5314ebc9039e0acb52f24910160405180910390a25050565b612b3c6111ce565b15612b595760405162461bcd60e51b81526004016107c290614ac7565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124fe3390565b63ffffffff87166000908152600460208190526040808320905163b5ec526360e01b8152909291829173__$1291e1ff22aea68c4ae26c19e2b9f8f397$__9163b5ec526391612c0f9187918f918f918f918e917f00000000000000000000000000000000000000000000000000000000000000009101614ba3565b604080518083038186803b158015612c2657600080fd5b505af4158015612c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5e91906141cb565b6001600160a01b0381166000818152600a602090815260408083208c8452825291829020805460ff1916600117905581516080810183528b81529081018a905280820192909252606082018890525163d06ff74160e01b815292945090925073__$07730b9b91c2b41a419f99961f709e7858$__9163d06ff74191612ced918e918e918e918e91600401614e74565b60206040518083038186803b158015612d0557600080fd5b505af4158015612d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3d9190614528565b612d5a5760405163e83dc84b60e01b815260040160405180910390fd5b60008715612e44576003840154604051632ad659af60e01b8152600481018a9052600160d01b90910461ffff16602482015273__$1291e1ff22aea68c4ae26c19e2b9f8f397$__90632ad659af9060440160206040518083038186803b158015612dc357600080fd5b505af4158015612dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfb9190614715565b9050612e228383612e0c848c614f3d565b60038801546001600160a01b031692919061355c565b612e4483612e2e61155a565b60038701546001600160a01b031691908461355c565b60038401805463ffffffff60a01b1916600160a01b63ffffffff8d16021790556001840189905560068401546001600160a01b0316612e9b576006840180546001600160a01b0319166001600160a01b0385161790555b604051631c2d8fb360e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d989060240160206040518083038186803b158015612f1a57600080fd5b505afa158015612f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5291906141af565b6001600160a01b031663072db1478c846040518363ffffffff1660e01b8152600401612f7f929190614d82565b600060405180830381600087803b158015612f9957600080fd5b505af1158015612fad573d6000803e3d6000fd5b50506040805163ffffffff8e81168252602082018e90529181018c9052606081018590526001600160a01b03808716945087169250908e16907f37357bed780fda5aed28c32fe9cd762cb2f2f8a70c0d9b342aba59c945943ca09060800160405180910390a45050505050505050505050565b63ffffffff84166000908152600560209081526040808320815160608101835290546001600160a01b038116825261ffff600160a01b8204811694830194909452600160b01b900490921690820152908061307a84613493565b9150915083606001516001600160a01b03166323b872dd3387846040518463ffffffff1660e01b81526004016130b293929190614a77565b602060405180830381600087803b1580156130cc57600080fd5b505af19250505080156130fc575060408051601f3d908101601f191682019092526130f991810190614528565b60015b6131c257606084015161311a906001600160a01b031633308461355c565b6001600160a01b038086166000908152600960209081526040808320606089015190941683529290529081208054839290613156908490614f25565b909155505060608401516001600160a01b031660009081526008602052604081208054839290613187908490614f25565b909155505060405163ffffffff8816907fe6dfda7486ec1e06f754c28be83c676af29b18143765a2843361313cdab2712590600090a26131c4565b505b6020830151604051637f5e0ed360e01b81526004810184905261ffff909116602482015260009073__$1291e1ff22aea68c4ae26c19e2b9f8f397$__90637f5e0ed39060440160206040518083038186803b15801561322257600080fd5b505af4158015613236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325a9190614715565b9050600081118015613275575083516001600160a01b031615155b1561332d576132848184614f3d565b606086015185516040516323b872dd60e01b81529295506001600160a01b03909116916323b872dd916132be913391908690600401614a77565b602060405180830381600087803b1580156132d857600080fd5b505af1925050508015613308575060408051601f3d908101601f1916820190925261330591810190614528565b60015b61332b576060850151613326906001600160a01b031633308461355c565b61332d565b505b84606001516001600160a01b03166323b872dd3361334961155a565b866040518463ffffffff1660e01b815260040161336893929190614a77565b602060405180830381600087803b15801561338257600080fd5b505af19250505080156133b2575060408051601f3d908101601f191682019092526133af91810190614528565b60015b6133d55760608501516133d0906001600160a01b031633308661355c565b612397565b50856001600160a01b0316876001600160a01b03168963ffffffff167f3687d64f40b11dd1c102a76882ac1735891c546a96ae27935eb5c7865b9d86fa886000015189604001518789888c600001518e61012001518f60600151604051612404989796959493929190614d3d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000836000015184602001516134ac9190614f3d565b60c0850151604051632ad659af60e01b81526004810183905261ffff909116602482015290915073__$1291e1ff22aea68c4ae26c19e2b9f8f397$__90632ad659af9060440160206040518083038186803b15801561350a57600080fd5b505af415801561351e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135429190614715565b92508284602001516135549190614f3d565b915050915091565b61357d846323b872dd60e01b85858560405160240161244c93929190614a77565b50505050565b63ffffffff84166000908152600660209081526040808320805460ff191660019081179091556101208701516001600160a01b031684526007835281842087830151855290925282208054919290916135dd908490614f3d565b909155505060405163a4d0845d60e01b815263ffffffff8516600482015281151560248201526001600160a01b0383169063a4d0845d90604401610eaa565b60e083015161012084015160408086015181516001600160a01b038781166024830152868116604483015290931660648401526084808401919091528151808403909101815260a49092018152602080830180516001600160e01b031663b030667160e01b17905281518083019092528082527f4e4654206e6f74207375636365737366756c6c79207472616e736665727265649082015261357d9291906137b7565b6000613714826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138969092919063ffffffff16565b80519091501561151e57808060200190518101906137329190614528565b61151e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107c2565b600061379e86853061361c565b6137ac8787878787876138ad565b979650505050505050565b60606001600160a01b0384163b61381f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107c2565b600080856001600160a01b03168560405161383a9190614a47565b600060405180830381855af49150503d8060008114613875576040519150601f19603f3d011682016040523d82523d6000602084013e61387a565b606091505b509150915061388a828286613d5a565b925050505b9392505050565b60606138a58484600085613d93565b949350505050565b6101208501516001600160a01b03166000908152600760209081526040808320818901518452909152812080546001919083906138eb908490614f25565b909155505085516040868101519051637b2392f160e01b8152600481019290925261ffff1660248201526001600160a01b038316604482015260009073__$1291e1ff22aea68c4ae26c19e2b9f8f397$",
  "libraries": {
    "NFTfiSigningUtils": "0x6AFd80bBc24123Ab9ec630b239D0DEFb40D35e38",
    "LoanChecksAndCalculations": "0x4b45B6fC98616D4A3E9c59395d4526a863202B6e",
    "LoanAirdropUtils": "0x4b45B6fC98616D4A3E9c59395d4526a863202B6e",
    "ContractKeys": "0xd3D0E26010ABeF694F4074ca39E88c5d6dEd70C1"
  },
  "devdoc": {
    "author": "NFTfi",
    "kind": "dev",
    "methods": {
      "acceptOffer((uint256,uint256,uint256,address,uint32,uint16,address,address),(uint256,uint256,address,bytes),(address,uint16))": {
        "params": {
          "_borrowerSettings": "- Some extra parameters that the borrower needs to set when accepting an offer.",
          "_offer": "- The offer made by the lender.",
          "_signature": "- The components of the lender's signature."
        }
      },
      "cancelLoanCommitmentBeforeLoanHasBegun(uint256)": {
        "params": {
          "_nonce": "- User nonce"
        }
      },
      "constructor": {
        "details": "Sets `hub` and permitted erc20-s",
        "params": {
          "_admin": "- Initial admin of this contract.",
          "_nftfiHub": "- NFTfiHub address",
          "_permittedErc20s": "- list of permitted ERC20 token contract addresses"
        }
      },
      "drainERC1155Airdrop(address,uint256,address)": {
        "params": {
          "_receiver": "- receiver of the token",
          "_tokenAddress": "- address of the token contract for the token to be sent out",
          "_tokenId": "- id token to be sent out"
        }
      },
      "drainERC20Airdrop(address,uint256,address)": {
        "params": {
          "_receiver": "- receiver of the token",
          "_tokenAddress": "- address of the token contract for the token to be sent out"
        }
      },
      "drainERC721Airdrop(address,uint256,address)": {
        "params": {
          "_receiver": "- receiver of the token",
          "_tokenAddress": "- address of the token contract for the token to be sent out",
          "_tokenId": "- id token to be sent out"
        }
      },
      "getERC20Permit(address)": {
        "params": {
          "_erc20": "- The address of the erc20 contract."
        },
        "returns": {
          "_0": "Returns whether the erc20 is permitted"
        }
      },
      "getEscrowedPayBack(address)": {
        "params": {
          "_token": "ERC20 token conract address"
        }
      },
      "getPayoffAmount(uint32)": {
        "params": {
          "_loanId": "A unique identifier for this particular loan, sourced from the Loan Coordinator."
        },
        "returns": {
          "_0": "The amount of the specified ERC20 currency required to pay back this loan, measured in the smallest unit of the specified ERC20 currency."
        }
      },
      "getWhetherNonceHasBeenUsedForUser(address,uint256)": {
        "params": {
          "_nonce": "- The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes: - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun() , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce.",
          "_user": "- The address of the user. This function works for both lenders and borrowers alike."
        },
        "returns": {
          "_0": "A bool representing whether or not this nonce has been used for this user."
        }
      },
      "liquidateOverdueLoan(uint32)": {
        "params": {
          "_loanId": "A unique identifier for this particular loan, sourced from the Loan Coordinator."
        }
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated.",
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if allowed"
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated.",
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if allowed"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Triggers stopped state. Requirements: - Only the owner can call this method. - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "payBackLoan(uint32)": {
        "params": {
          "_loanId": "A unique identifier for this particular loan, sourced from the Loan Coordinator."
        }
      },
      "payBackLoanSafe(uint32)": {
        "params": {
          "_loanId": "A unique identifier for this particular loan, sourced from the Loan Coordinator."
        }
      },
      "pullAirdrop(uint32,address,bytes,address,uint256,bool,uint256)": {
        "params": {
          "_data": "- function selector to be called on the airdropping contract",
          "_is1155": "-",
          "_loanId": "-",
          "_nftAirdrop": "- address of the used claiming nft in the drop",
          "_nftAirdropAmount": "- amount in case of 1155",
          "_nftAirdropId": "- id of the used claiming nft in the drop",
          "_target": "- address of the airdropping contract"
        }
      },
      "pullAirdropReceiver(uint32,address,bytes)": {
        "params": {
          "_data": "- function selector to be called on the airdropping contract",
          "_loanId": "-",
          "_target": "- address of the airdropping contract"
        }
      },
      "renegotiateLoan(uint32,uint32,uint256,uint256,uint256,uint256,bytes)": {
        "details": "makes possible to change loan duration and max repayment amount, loan duration even can be extended if loan was expired but not liquidated.",
        "params": {
          "_expiry": "- The date when the renegotiation offer expires",
          "_lenderNonce": "- The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes: - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun() , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce.",
          "_lenderSignature": "- The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following combination of parameters: - _loanId - _newLoanDuration - _newMaximumRepaymentAmount - _lender - _expiry  - address of this contract - chainId",
          "_loanId": "- The unique identifier for the loan to be renegotiated",
          "_newLoanDuration": "- The new amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT.",
          "_newMaximumRepaymentAmount": "- The new maximum amount of money that the borrower would be required to retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay early.",
          "_renegotiationFee": "Agreed upon fee in ether that borrower pays for the lender for the renegitiation"
        }
      },
      "setERC20Permit(address,bool)": {
        "params": {
          "_erc20": "- The address of the ERC20 currency whose permit list status changed.",
          "_permit": "- The new status of whether the currency is permitted or not."
        }
      },
      "setERC20Permits(address[],bool[])": {
        "params": {
          "_erc20s": "- The addresses of the ERC20 currencies whose permit list status changed.",
          "_permits": "- The new statuses of whether the currency is permitted or not."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Checks whether this contract implements the interface defined by `interfaceId`.",
        "params": {
          "_interfaceId": "Id of the interface"
        },
        "returns": {
          "_0": "true if this contract implements the interface"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Returns to normal state. Requirements: - Only the owner can call this method. - The contract must be paused."
      },
      "updateAdminFee(uint16)": {
        "params": {
          "_newAdminFeeInBasisPoints": "- The new admin fee measured in basis points. This is a percent of the interest paid upon a loan's completion that go to the contract admins."
        }
      },
      "updateMaximumLoanDuration(uint256)": {
        "params": {
          "_newMaximumLoanDuration": "- The new maximum loan duration, measured in seconds."
        }
      },
      "wrapCollateral(uint32)": {
        "params": {
          "_loanId": "-"
        }
      }
    },
    "title": "DirectLoanFixedOffer",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AdminFeeUpdated(uint16)": {
        "notice": "This event is fired whenever the admins change the percent of interest rates earned that they charge as a fee. Note that newAdminFee can never exceed 10,000, since the fee is measured in basis points."
      },
      "ERC20Permit(address,bool)": {
        "notice": "This event is fired whenever the admin sets a ERC20 permit."
      },
      "EscrowRepay(uint32)": {
        "notice": "This event is fired whenever a loan is repaid into escrow"
      },
      "LoanLiquidated(uint32,address,address,uint256,uint256,uint256,uint256,address)": {
        "notice": "This event is fired whenever a lender liquidates an outstanding loan that is owned to them that has exceeded its duration. The lender receives the underlying NFT collateral, and the borrower no longer needs to repay the loan principal-plus-interest."
      },
      "LoanRenegotiated(uint32,address,address,uint32,uint256,uint256,uint256)": {
        "notice": "This event is fired when some of the terms of a loan are being renegotiated."
      },
      "LoanRepaid(uint32,address,address,uint256,uint256,uint256,uint256,uint256,address,address,address)": {
        "notice": "This event is fired whenever a borrower successfully repays their loan, paying principal-plus-interest-minus-fee to the lender in loanERC20Denomination, paying fee to owner in loanERC20Denomination, and receiving their NFT collateral back."
      },
      "LoanStarted(uint32,address,address,(uint256,uint256,uint256,address,uint32,uint16,uint16,address,uint64,address,address),(address,uint16,uint16))": {
        "notice": "This event is fired whenever a borrower begins a loan by calling NFTfi.beginLoan(), which can only occur after both the lender and borrower have approved their ERC721 and ERC20 contracts to use NFTfi, and when they both have signed off-chain messages that agree on the terms of the loan."
      },
      "MaximumLoanDurationUpdated(uint256)": {
        "notice": "This event is fired whenever the admins change the maximum duration of any loan started for this loan type."
      }
    },
    "kind": "user",
    "methods": {
      "LOAN_TYPE()": {
        "notice": "This function returns a bytes32 value identifying the loan type for the coordinator"
      },
      "acceptOffer((uint256,uint256,uint256,address,uint32,uint16,address,address),(uint256,uint256,address,bytes),(address,uint16))": {
        "notice": "This function is called by the borrower when accepting a lender's offer to begin a loan."
      },
      "adminFeeInBasisPoints()": {
        "notice": "The percentage of interest earned by lenders on this platform that is taken by the contract admin's as a fee, measured in basis points (hundreths of a percent). The max allowed value is 10000."
      },
      "cancelLoanCommitmentBeforeLoanHasBegun(uint256)": {
        "notice": "This function can be called by either a lender or a borrower to cancel all off-chain orders that they have signed that contain this nonce. If the off-chain orders were created correctly, there should only be one off-chain order that contains this nonce at all. The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce."
      },
      "drainERC1155Airdrop(address,uint256,address)": {
        "notice": "used by the owner account to be able to drain ERC1155 tokens received as airdrops for the locked  collateral NFT-s"
      },
      "drainERC20Airdrop(address,uint256,address)": {
        "notice": "used by the owner account to be able to drain ERC20 tokens received as airdrops for the locked  collateral NFT-s"
      },
      "drainERC721Airdrop(address,uint256,address)": {
        "notice": "used by the owner account to be able to drain ERC721 tokens received as airdrops for the locked  collateral NFT-s"
      },
      "getERC20Permit(address)": {
        "notice": "This function can be called by anyone to get the permit associated with the erc20 contract."
      },
      "getEscrowedPayBack(address)": {
        "notice": "Used for lenders to get their payback from escrow, in case the direct loan payback didn't work, because it caused a revert."
      },
      "getPayoffAmount(uint32)": {
        "notice": "This function can be used to view the current quantity of the ERC20 currency used in the specified loan required by the borrower to repay their loan, measured in the smallest unit of the ERC20 currency."
      },
      "getWhetherNonceHasBeenUsedForUser(address,uint256)": {
        "notice": "This function can be used to view whether a particular nonce for a particular user has already been used, either from a successful loan or a cancelled off-chain order."
      },
      "liquidateOverdueLoan(uint32)": {
        "notice": "This function is called by a lender once a loan has finished its duration and the borrower still has not repaid. The lender can call this function to seize the underlying NFT collateral, although the lender gives up all rights to the principal-plus-collateral by doing so. This function is purposefully not pausable in order to prevent an attack where the contract admin's pause the contract and hold hostage the NFT's that are still within it. We intentionally allow anybody to call this function, although only the lender will end up receiving the seized collateral. We are exploring the possbility of incentivizing users to call this function by using some of the admin funds."
      },
      "loanIdToLoan(uint32)": {
        "notice": "A mapping from a loan's identifier to the loan's details, represted by the loan struct."
      },
      "loanRepaidOrLiquidated(uint32)": {
        "notice": "A mapping tracking whether a loan has either been repaid or liquidated. This prevents an attacker trying to repay or liquidate the same loan twice."
      },
      "maximumLoanDuration()": {
        "notice": "The maximum duration of any loan started for this loan type, measured in seconds. This is both a sanity-check for borrowers and an upper limit on how long admins will have to support v1 of this contract if they eventually deprecate it, as well as a check to ensure that the loan duration never exceeds the space alotted for it in the loan struct."
      },
      "payBackLoan(uint32)": {
        "notice": "This function is called by a anyone to repay a loan. It can be called at any time after the loan has begun and before loan expiry.. The caller will pay a pro-rata portion of their interest if the loan is paid off early and the loan is pro-rated type, but the complete repayment amount if it is fixed type. The the borrower (current owner of the obligation note) will get the collaterl NFT back. This function is purposefully not pausable in order to prevent an attack where the contract admin's pause the contract and hold hostage the NFT's that are still within it."
      },
      "payBackLoanSafe(uint32)": {
        "notice": "This function is called by a anyone to repay a loan. It can be called at any time after the loan has begun and before loan expiry.. The caller will pay a pro-rata portion of their interest if the loan is paid off early and the loan is pro-rated type, but the complete repayment amount if it is fixed type. The the borrower (current owner of the obligation note) will get the collaterl NFT back. This function is purposefully not pausable in order to prevent an attack where the contract admin's pause the contract and hold hostage the NFT's that are still within it."
      },
      "pullAirdrop(uint32,address,bytes,address,uint256,bool,uint256)": {
        "notice": "this function initiates a flashloan to pull an airdrop from a tartget contract"
      },
      "pullAirdropReceiver(uint32,address,bytes)": {
        "notice": "this function initiates a flashloan to pull an airdrop from a tartget contract"
      },
      "setERC20Permit(address,bool)": {
        "notice": "This function can be called by admins to change the permitted status of an ERC20 currency. This includes both adding an ERC20 currency to the permitted list and removing it."
      },
      "setERC20Permits(address[],bool[])": {
        "notice": "This function can be called by admins to change the permitted status of a batch of ERC20 currency. This includes both adding an ERC20 currency to the permitted list and removing it."
      },
      "updateAdminFee(uint16)": {
        "notice": "This function can be called by admins to change the percent of interest rates earned that they charge as a fee. Note that newAdminFee can never exceed 10,000, since the fee is measured in basis points."
      },
      "updateMaximumLoanDuration(uint256)": {
        "notice": "This function can be called by admins to change the maximumLoanDuration. Note that they can never change maximumLoanDuration to be greater than UINT32_MAX, since that's the maximum space alotted for the duration in the loan struct."
      },
      "wrapCollateral(uint32)": {
        "notice": "this function creates a proxy contract wrapping the collateral to be able to catch an expected airdrop"
      }
    },
    "notice": "Main contract for NFTfi Direct Loans Fixed Type. This contract manages the ability to create NFT-backed peer-to-peer loans of type Fixed (agreed to be a fixed-repayment loan) where the borrower pays the maximumRepaymentAmount regardless of whether they repay early or not. There are two ways to commence an NFT-backed loan: a. The borrower accepts a lender's offer by calling `acceptOffer`.   1. the borrower calls nftContract.approveAll(NFTfi), approving the NFTfi contract to move their NFT's on their be1alf.   2. the lender calls erc20Contract.approve(NFTfi), allowing NFTfi to move the lender's ERC20 tokens on their behalf.   3. the lender signs an off-chain message, proposing its offer terms.   4. the borrower calls `acceptOffer` to accept these terms and enter into the loan. The NFT is stored in the contract, the borrower receives the loan principal in the specified ERC20 currency, the lender receives an NFTfi promissory note (in ERC721 form) that represents the rights to either the principal-plus-interest, or the underlying NFT collateral if the borrower does not pay back in time, and the borrower receives obligation receipt (in ERC721 form) that gives them the right to pay back the loan and get the collateral back. The lender can freely transfer and trade this ERC721 promissory note as they wish, with the knowledge that transferring the ERC721 promissory note tranfsers the rights to principal-plus-interest and/or collateral, and that they will no longer have a claim on the loan. The ERC721 promissory note itself represents that claim. The borrower can freely transfer and trade this ERC721 obligaiton receipt as they wish, with the knowledge that transferring the ERC721 obligaiton receipt tranfsers the rights right to pay back the loan and get the collateral back. A loan may end in one of two ways: - First, a borrower may call NFTfi.payBackLoan() and pay back the loan plus interest at any time, in which case they receive their NFT back in the same transaction. - Second, if the loan's duration has passed and the loan has not been paid back yet, a lender can call NFTfi.liquidateOverdueLoan(), in which case they receive the underlying NFT collateral and forfeit the rights to the principal-plus-interest, which the borrower now keeps.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21148,
        "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 717,
        "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 802,
        "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9553,
        "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
        "label": "maximumLoanDuration",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9558,
        "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
        "label": "adminFeeInBasisPoints",
        "offset": 0,
        "slot": "3",
        "type": "t_uint16"
      },
      {
        "astId": 9565,
        "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
        "label": "loanIdToLoan",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint32,t_struct(LoanTerms)13808_storage)"
      },
      {
        "astId": 9570,
        "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
        "label": "loanIdToLoanExtras",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint32,t_struct(LoanExtras)13815_storage)"
      },
      {
        "astId": 9576,
        "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
        "label": "loanRepaidOrLiquidated",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint32,t_bool)"
      },
      {
        "astId": 9583,
        "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
        "label": "_escrowTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 9588,
        "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
        "label": "_escrowErc20Tokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9595,
        "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
        "label": "_payBackEscrow",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9602,
        "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
        "label": "_nonceHasBeenUsedForUser",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 9607,
        "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
        "label": "erc20Permits",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint32,t_struct(LoanExtras)13815_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct LoanData.LoanExtras)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanExtras)13815_storage"
      },
      "t_mapping(t_uint32,t_struct(LoanTerms)13808_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct LoanData.LoanTerms)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanTerms)13808_storage"
      },
      "t_struct(LoanExtras)13815_storage": {
        "encoding": "inplace",
        "label": "struct LoanData.LoanExtras",
        "members": [
          {
            "astId": 13810,
            "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
            "label": "revenueSharePartner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13812,
            "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
            "label": "revenueShareInBasisPoints",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 13814,
            "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
            "label": "referralFeeInBasisPoints",
            "offset": 22,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(LoanTerms)13808_storage": {
        "encoding": "inplace",
        "label": "struct LoanData.LoanTerms",
        "members": [
          {
            "astId": 13787,
            "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
            "label": "loanPrincipalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13789,
            "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
            "label": "maximumRepaymentAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13791,
            "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
            "label": "nftCollateralId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13793,
            "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
            "label": "loanERC20Denomination",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 13795,
            "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
            "label": "loanDuration",
            "offset": 20,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 13797,
            "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
            "label": "loanInterestRateForDurationInBasisPoints",
            "offset": 24,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 13799,
            "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
            "label": "loanAdminFeeInBasisPoints",
            "offset": 26,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 13801,
            "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
            "label": "nftCollateralWrapper",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 13803,
            "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
            "label": "loanStartTime",
            "offset": 20,
            "slot": "4",
            "type": "t_uint64"
          },
          {
            "astId": 13805,
            "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
            "label": "nftCollateralContract",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 13807,
            "contract": "contracts/loans/direct/loanTypes/DirectLoanFixedOffer.sol:DirectLoanFixedOffer",
            "label": "borrower",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}