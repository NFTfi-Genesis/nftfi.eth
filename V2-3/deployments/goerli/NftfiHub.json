{
  "address": "0xBD2cc314A2FCB8C0313641120Faf027d30DE5eA2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_contractKeys",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_contractAddresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "contractKey",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "ContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_contractKey",
          "type": "bytes32"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractKey",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_contractKeys",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_contractAddresses",
          "type": "address[]"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdd8b87143ca403edd7355ebe568382274225c336d4b65cf814c0f111854eaa9b",
  "receipt": {
    "to": null,
    "from": "0x02e037F56728E947e92Af2c05baF7FeF387Ddd06",
    "contractAddress": "0xBD2cc314A2FCB8C0313641120Faf027d30DE5eA2",
    "transactionIndex": 12,
    "gasUsed": "570924",
    "logsBloom": "0x
    "blockHash": "0x36c2a64679e9460aa4e9c8a851abc4bea7f6ba93ef66be68b1d159fc62120bc8",
    "transactionHash": "0xdd8b87143ca403edd7355ebe568382274225c336d4b65cf814c0f111854eaa9b",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 9337965,
        "transactionHash": "0xdd8b87143ca403edd7355ebe568382274225c336d4b65cf814c0f111854eaa9b",
        "address": "0xBD2cc314A2FCB8C0313641120Faf027d30DE5eA2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000002e037f56728e947e92af2c05baf7fef387ddd06"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0x36c2a64679e9460aa4e9c8a851abc4bea7f6ba93ef66be68b1d159fc62120bc8"
      }
    ],
    "blockNumber": 9337965,
    "cumulativeGasUsed": "2457348",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x02e037F56728E947e92Af2c05baF7FeF387Ddd06",
    [],
    []
  ],
  "numDeployments": 1,
  "solcInputHash": "54de0b2a48f04d02d32721198484cdf8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_contractKeys\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_contractAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contractKey\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractKey\",\"type\":\"bytes32\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractKey\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_contractKeys\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_contractAddresses\",\"type\":\"address[]\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"NFTfi\",\"details\":\"Registry for the contracts supported by NFTfi protocol.\",\"events\":{\"ContractUpdated(bytes32,address)\":{\"params\":{\"contractAddress\":\"- Address of the contract.\",\"contractKey\":\"- Contract key e.g. bytes32('PERMITTED_NFTS').\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes `contracts` with a batch of permitted contracts\",\"params\":{\"_admin\":\"- Initial admin of this contract.\",\"_contractAddresses\":\"- Initial associated contract addresses.\",\"_contractKeys\":\"- Initial contract keys.\"}},\"getContract(bytes32)\":{\"params\":{\"_contractKey\":\"- The index to the contract address.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"setContract(string,address)\":{\"params\":{\"_contractAddress\":\"- The associated contract address.\",\"_contractKey\":\"- New or existing contract key.\"}},\"setContracts(string[],address[])\":{\"params\":{\"_contractAddresses\":\"- The associated contract addresses.\",\"_contractKeys\":\"- New or existing contract keys.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"NftfiHub\",\"version\":1},\"userdoc\":{\"events\":{\"ContractUpdated(bytes32,address)\":{\"notice\":\"This event is fired whenever the admin registers a contract.\"}},\"kind\":\"user\",\"methods\":{\"getContract(bytes32)\":{\"notice\":\"This function can be called by anyone to lookup the contract address associated with the key.\"},\"setContract(string,address)\":{\"notice\":\"Set or update the contract address for the given key.\"},\"setContracts(string[],address[])\":{\"notice\":\"Set or update the contract addresses for the given keys.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftfiHub.sol\":\"NftfiHub\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/NftfiHub.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./interfaces/INftfiHub.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./utils/ContractKeys.sol\\\";\\n\\n/**\\n * @title  NftfiHub\\n * @author NFTfi\\n * @dev Registry for the contracts supported by NFTfi protocol.\\n */\\ncontract NftfiHub is Ownable, Pausable, ReentrancyGuard, INftfiHub {\\n    /* ******* */\\n    /* STORAGE */\\n    /* ******* */\\n\\n    mapping(bytes32 => address) private contracts;\\n\\n    /* ****** */\\n    /* EVENTS */\\n    /* ****** */\\n\\n    /**\\n     * @notice This event is fired whenever the admin registers a contract.\\n     *\\n     * @param contractKey - Contract key e.g. bytes32('PERMITTED_NFTS').\\n     * @param contractAddress - Address of the contract.\\n     */\\n    event ContractUpdated(bytes32 indexed contractKey, address indexed contractAddress);\\n\\n    /* *********** */\\n    /* CONSTRUCTOR */\\n    /* *********** */\\n\\n    /**\\n     * @dev Initializes `contracts` with a batch of permitted contracts\\n     *\\n     * @param _admin - Initial admin of this contract.\\n     * @param _contractKeys - Initial contract keys.\\n     * @param _contractAddresses - Initial associated contract addresses.\\n     */\\n    constructor(\\n        address _admin,\\n        string[] memory _contractKeys,\\n        address[] memory _contractAddresses\\n    ) Ownable(_admin) {\\n        _setContracts(_contractKeys, _contractAddresses);\\n    }\\n\\n    /* ********* */\\n    /* FUNCTIONS */\\n    /* ********* */\\n\\n    /**\\n     * @notice Set or update the contract address for the given key.\\n     * @param _contractKey - New or existing contract key.\\n     * @param _contractAddress - The associated contract address.\\n     */\\n    function setContract(string calldata _contractKey, address _contractAddress) external override onlyOwner {\\n        _setContract(_contractKey, _contractAddress);\\n    }\\n\\n    /**\\n     * @notice Set or update the contract addresses for the given keys.\\n     * @param _contractKeys - New or existing contract keys.\\n     * @param _contractAddresses - The associated contract addresses.\\n     */\\n    function setContracts(string[] memory _contractKeys, address[] memory _contractAddresses) external onlyOwner {\\n        _setContracts(_contractKeys, _contractAddresses);\\n    }\\n\\n    /**\\n     * @notice This function can be called by anyone to lookup the contract address associated with the key.\\n     * @param  _contractKey - The index to the contract address.\\n     */\\n    function getContract(bytes32 _contractKey) external view override returns (address) {\\n        return contracts[_contractKey];\\n    }\\n\\n    /**\\n     * @notice Set or update the contract address for the given key.\\n     * @param _contractKey - New or existing contract key.\\n     * @param _contractAddress - The associated contract address.\\n     */\\n    function _setContract(string memory _contractKey, address _contractAddress) internal {\\n        bytes32 key = ContractKeys.getIdFromStringKey(_contractKey);\\n        contracts[key] = _contractAddress;\\n\\n        emit ContractUpdated(key, _contractAddress);\\n    }\\n\\n    /**\\n     * @notice Set or update the contract addresses for the given keys.\\n     * @param _contractKeys - New or existing contract key.\\n     * @param _contractAddresses - The associated contract address.\\n     */\\n    function _setContracts(string[] memory _contractKeys, address[] memory _contractAddresses) internal {\\n        require(_contractKeys.length == _contractAddresses.length, \\\"setContracts function information arity mismatch\\\");\\n\\n        for (uint256 i = 0; i < _contractKeys.length; i++) {\\n            _setContract(_contractKeys[i], _contractAddresses[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd7de656c4550e88d3a9c7dd6db5f0cfb2ee13ec78ed3633c3d9542a8f417da5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INftfiHub.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title INftfiHub\\n * @author NFTfi\\n * @dev NftfiHub interface\\n */\\ninterface INftfiHub {\\n    function setContract(string calldata _contractKey, address _contractAddress) external;\\n\\n    function getContract(bytes32 _contractKey) external view returns (address);\\n}\\n\",\"keccak256\":\"0x80259ebf45729166a8524b313741b6ea2acfe8ac9dc15243f018a08cc2b14240\",\"license\":\"BUSL-1.1\"},\"contracts/utils/ContractKeys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ContractKeys\\n * @author NFTfi\\n * @dev Common library for contract keys\\n */\\nlibrary ContractKeys {\\n    bytes32 public constant PERMITTED_ERC20S = bytes32(\\\"PERMITTED_ERC20S\\\");\\n    bytes32 public constant PERMITTED_NFTS = bytes32(\\\"PERMITTED_NFTS\\\");\\n    bytes32 public constant PERMITTED_PARTNERS = bytes32(\\\"PERMITTED_PARTNERS\\\");\\n    bytes32 public constant NFT_TYPE_REGISTRY = bytes32(\\\"NFT_TYPE_REGISTRY\\\");\\n    bytes32 public constant LOAN_REGISTRY = bytes32(\\\"LOAN_REGISTRY\\\");\\n    bytes32 public constant PERMITTED_SNFT_RECEIVER = bytes32(\\\"PERMITTED_SNFT_RECEIVER\\\");\\n    bytes32 public constant PERMITTED_AIRDROPS = bytes32(\\\"PERMITTED_AIRDROPS\\\");\\n    bytes32 public constant AIRDROP_RECEIVER = bytes32(\\\"AIRDROP_RECEIVER\\\");\\n    bytes32 public constant AIRDROP_FACTORY = bytes32(\\\"AIRDROP_FACTORY\\\");\\n    bytes32 public constant AIRDROP_FLASH_LOAN = bytes32(\\\"AIRDROP_FLASH_LOAN\\\");\\n\\n    string public constant AIRDROP_WRAPPER_STRING = \\\"AirdropWrapper\\\";\\n\\n    /**\\n     * @notice Returns the bytes32 representation of a string\\n     * @param _key the string key\\n     * @return id bytes32 representation\\n     */\\n    function getIdFromStringKey(string memory _key) external pure returns (bytes32 id) {\\n        require(bytes(_key).length <= 32, \\\"invalid key\\\");\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := mload(add(_key, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf596b76c4804038211ab97ab44d9fa7a1ac241a38e4051f5bef3257a73f38d10\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * Modified version from openzeppelin/contracts/access/Ownable.sol that allows to\\n * initialize the owner using a parameter in the constructor\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) public virtual onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(_newOwner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Sets the owner.\\n     */\\n    function _setOwner(address _newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(oldOwner, _newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1dcb2ae57518644f7c702a4033493c34d5f8a0fe6f9f07c487df10aa95c2ea9\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000dc338038062000dc3833981016040819052620000349162000337565b82620000408162000067565b506000805460ff60a01b19169055600180556200005e8282620000b7565b5050506200059a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051825114620001265760405162461bcd60e51b815260206004820152603060248201527f736574436f6e7472616374732066756e6374696f6e20696e666f726d6174696f60448201526f0dc40c2e4d2e8f240dad2e6dac2e8c6d60831b606482015260840160405180910390fd5b60005b8251811015620001aa57620001958382815181106200015857634e487b7160e01b600052603260045260246000fd5b60200260200101518383815181106200018157634e487b7160e01b600052603260045260246000fd5b6020026020010151620001af60201b60201c565b80620001a1816200055c565b91505062000129565b505050565b60405163f99a8ffb60e01b815260009073d3D0E26010ABeF694F4074ca39E88c5d6dEd70C19063f99a8ffb90620001eb9086906004016200049b565b60206040518083038186803b1580156200020457600080fd5b505af415801562000219573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200023f919062000482565b60008181526002602052604080822080546001600160a01b0319166001600160a01b03871690811790915590519293509183917fd45de243cd15102b320d0d75eb12a34864595b07f8853b6b7d487946b292463091a3505050565b80516001600160a01b0381168114620002b257600080fd5b919050565b600082601f830112620002c8578081fd5b81516020620002e1620002db8362000503565b620004d0565b80838252828201915082860187848660051b890101111562000301578586fd5b855b858110156200032a5762000317826200029a565b8452928401929084019060010162000303565b5090979650505050505050565b6000806000606084860312156200034c578283fd5b62000357846200029a565b602085810151919450906001600160401b038082111562000376578485fd5b818701915087601f8301126200038a578485fd5b81516200039b620002db8262000503565b8082825285820191508585018b878560051b8801011115620003bb578889fd5b885b848110156200044d57815186811115620003d5578a8bfd5b8701603f81018e13620003e6578a8bfd5b8881015187811115620003fd57620003fd62000584565b62000411601f8201601f19168b01620004d0565b8181528f604083850101111562000426578c8dfd5b62000438828c83016040860162000529565b865250509287019290870190600101620003bd565b505060408a0151909750945050508083111562000468578384fd5b50506200047886828701620002b7565b9150509250925092565b60006020828403121562000494578081fd5b5051919050565b6020815260008251806020840152620004bc81604085016020870162000529565b601f01601f19169190910160400192915050565b604051601f8201601f191681016001600160401b0381118282101715620004fb57620004fb62000584565b604052919050565b60006001600160401b038211156200051f576200051f62000584565b5060051b60200190565b60005b83811015620005465781810151838201526020016200052c565b8381111562000556576000848401525b50505050565b60006000198214156200057d57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b61081980620005aa6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80633f0ed0df146100675780635c975abb1461007c5780637ca9e0c41461009e5780638da5cb5b146100b1578063e16c7d98146100d6578063f2fde38b146100ff575b600080fd5b61007a610075366004610676565b610112565b005b600054600160a01b900460ff1660405190151581526020015b60405180910390f35b61007a6100ac366004610526565b61018b565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610095565b6100be6100e4366004610646565b6000908152600260205260409020546001600160a01b031690565b61007a61010d366004610505565b6101c3565b6000546001600160a01b031633146101455760405162461bcd60e51b815260040161013c90610745565b60405180910390fd5b61018683838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085925061025e915050565b505050565b6000546001600160a01b031633146101b55760405162461bcd60e51b815260040161013c90610745565b6101bf8282610343565b5050565b6000546001600160a01b031633146101ed5760405162461bcd60e51b815260040161013c90610745565b6001600160a01b0381166102525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161013c565b61025b81610423565b50565b60405163f99a8ffb60e01b815260009073d3D0E26010ABeF694F4074ca39E88c5d6dEd70C19063f99a8ffb906102989086906004016106f2565b60206040518083038186803b1580156102b057600080fd5b505af41580156102c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e8919061065e565b60008181526002602052604080822080546001600160a01b0319166001600160a01b03871690811790915590519293509183917fd45de243cd15102b320d0d75eb12a34864595b07f8853b6b7d487946b292463091a3505050565b80518251146103ad5760405162461bcd60e51b815260206004820152603060248201527f736574436f6e7472616374732066756e6374696f6e20696e666f726d6174696f60448201526f0dc40c2e4d2e8f240dad2e6dac2e8c6d60831b606482015260840161013c565b60005b8251811015610186576104118382815181106103dc57634e487b7160e01b600052603260045260246000fd5b602002602001015183838151811061040457634e487b7160e01b600052603260045260246000fd5b602002602001015161025e565b8061041b816107cf565b9150506103b0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461048a57600080fd5b919050565b600082601f83011261049f578081fd5b813560206104b46104af836107ab565b61077a565b80838252828201915082860187848660051b89010111156104d3578586fd5b855b858110156104f8576104e682610473565b845292840192908401906001016104d5565b5090979650505050505050565b600060208284031215610516578081fd5b61051f82610473565b9392505050565b6000806040808486031215610539578182fd5b833567ffffffffffffffff80821115610550578384fd5b818601915086601f830112610563578384fd5b813560206105736104af836107ab565b8083825282820191508286018b848660051b8901011115610592578889fd5b885b85811015610616578135878111156105aa578a8bfd5b8801603f81018e136105ba578a8bfd5b85810135888111156105ce576105ce6107f6565b6105e0601f8201601f1916880161077a565b8181528f8c8385010111156105f3578c8dfd5b818c84018983013790810187018c90528552509284019290840190600101610594565b5090985050508701359350508083111561062e578384fd5b505061063c8582860161048f565b9150509250929050565b600060208284031215610657578081fd5b5035919050565b60006020828403121561066f578081fd5b5051919050565b60008060006040848603121561068a578081fd5b833567ffffffffffffffff808211156106a1578283fd5b818601915086601f8301126106b4578283fd5b8135818111156106c2578384fd5b8760208285010111156106d3578384fd5b6020928301955093506106e99186019050610473565b90509250925092565b6000602080835283518082850152825b8181101561071e57858101830151858201604001528201610702565b8181111561072f5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156107a3576107a36107f6565b604052919050565b600067ffffffffffffffff8211156107c5576107c56107f6565b5060051b60200190565b60006000198214156107ef57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000804000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80633f0ed0df146100675780635c975abb1461007c5780637ca9e0c41461009e5780638da5cb5b146100b1578063e16c7d98146100d6578063f2fde38b146100ff575b600080fd5b61007a610075366004610676565b610112565b005b600054600160a01b900460ff1660405190151581526020015b60405180910390f35b61007a6100ac366004610526565b61018b565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610095565b6100be6100e4366004610646565b6000908152600260205260409020546001600160a01b031690565b61007a61010d366004610505565b6101c3565b6000546001600160a01b031633146101455760405162461bcd60e51b815260040161013c90610745565b60405180910390fd5b61018683838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085925061025e915050565b505050565b6000546001600160a01b031633146101b55760405162461bcd60e51b815260040161013c90610745565b6101bf8282610343565b5050565b6000546001600160a01b031633146101ed5760405162461bcd60e51b815260040161013c90610745565b6001600160a01b0381166102525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161013c565b61025b81610423565b50565b60405163f99a8ffb60e01b815260009073__$d7e2e0a2db402280e6c36233d590dce656$__9063f99a8ffb906102989086906004016106f2565b60206040518083038186803b1580156102b057600080fd5b505af41580156102c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e8919061065e565b60008181526002602052604080822080546001600160a01b0319166001600160a01b03871690811790915590519293509183917fd45de243cd15102b320d0d75eb12a34864595b07f8853b6b7d487946b292463091a3505050565b80518251146103ad5760405162461bcd60e51b815260206004820152603060248201527f736574436f6e7472616374732066756e6374696f6e20696e666f726d6174696f60448201526f0dc40c2e4d2e8f240dad2e6dac2e8c6d60831b606482015260840161013c565b60005b8251811015610186576104118382815181106103dc57634e487b7160e01b600052603260045260246000fd5b602002602001015183838151811061040457634e487b7160e01b600052603260045260246000fd5b602002602001015161025e565b8061041b816107cf565b9150506103b0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461048a57600080fd5b919050565b600082601f83011261049f578081fd5b813560206104b46104af836107ab565b61077a565b80838252828201915082860187848660051b89010111156104d3578586fd5b855b858110156104f8576104e682610473565b845292840192908401906001016104d5565b5090979650505050505050565b600060208284031215610516578081fd5b61051f82610473565b9392505050565b6000806040808486031215610539578182fd5b833567ffffffffffffffff80821115610550578384fd5b818601915086601f830112610563578384fd5b813560206105736104af836107ab565b8083825282820191508286018b848660051b8901011115610592578889fd5b885b85811015610616578135878111156105aa578a8bfd5b8801603f81018e136105ba578a8bfd5b85810135888111156105ce576105ce6107f6565b6105e0601f8201601f1916880161077a565b8181528f8c8385010111156105f3578c8dfd5b818c84018983013790810187018c90528552509284019290840190600101610594565b5090985050508701359350508083111561062e578384fd5b505061063c8582860161048f565b9150509250929050565b600060208284031215610657578081fd5b5035919050565b60006020828403121561066f578081fd5b5051919050565b60008060006040848603121561068a578081fd5b833567ffffffffffffffff808211156106a1578283fd5b818601915086601f8301126106b4578283fd5b8135818111156106c2578384fd5b8760208285010111156106d3578384fd5b6020928301955093506106e99186019050610473565b90509250925092565b6000602080835283518082850152825b8181101561071e57858101830151858201604001528201610702565b8181111561072f5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156107a3576107a36107f6565b604052919050565b600067ffffffffffffffff8211156107c5576107c56107f6565b5060051b60200190565b60006000198214156107ef57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000804000a",
  "libraries": {
    "ContractKeys": "0xd3D0E26010ABeF694F4074ca39E88c5d6dEd70C1"
  },
  "devdoc": {
    "author": "NFTfi",
    "details": "Registry for the contracts supported by NFTfi protocol.",
    "events": {
      "ContractUpdated(bytes32,address)": {
        "params": {
          "contractAddress": "- Address of the contract.",
          "contractKey": "- Contract key e.g. bytes32('PERMITTED_NFTS')."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Initializes `contracts` with a batch of permitted contracts",
        "params": {
          "_admin": "- Initial admin of this contract.",
          "_contractAddresses": "- Initial associated contract addresses.",
          "_contractKeys": "- Initial contract keys."
        }
      },
      "getContract(bytes32)": {
        "params": {
          "_contractKey": "- The index to the contract address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "setContract(string,address)": {
        "params": {
          "_contractAddress": "- The associated contract address.",
          "_contractKey": "- New or existing contract key."
        }
      },
      "setContracts(string[],address[])": {
        "params": {
          "_contractAddresses": "- The associated contract addresses.",
          "_contractKeys": "- New or existing contract keys."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "NftfiHub",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ContractUpdated(bytes32,address)": {
        "notice": "This event is fired whenever the admin registers a contract."
      }
    },
    "kind": "user",
    "methods": {
      "getContract(bytes32)": {
        "notice": "This function can be called by anyone to lookup the contract address associated with the key."
      },
      "setContract(string,address)": {
        "notice": "Set or update the contract address for the given key."
      },
      "setContracts(string[],address[])": {
        "notice": "Set or update the contract addresses for the given keys."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21148,
        "contract": "contracts/NftfiHub.sol:NftfiHub",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 717,
        "contract": "contracts/NftfiHub.sol:NftfiHub",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 802,
        "contract": "contracts/NftfiHub.sol:NftfiHub",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7095,
        "contract": "contracts/NftfiHub.sol:NftfiHub",
        "label": "contracts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}