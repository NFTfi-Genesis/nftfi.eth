{
  "address": "0xC0d0DC0e7fE5A7438db4A9cf1Faa04b2A1bF78D6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftCollateralId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftCollateralContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "AirdropPulledFlashloan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftCollateralId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftCollateralContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receiverId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiverInstance",
          "type": "address"
        }
      ],
      "name": "CollateralWrapped",
      "type": "event"
    }
  ],
  "transactionHash": "0x899f84a27cda7a367aae67342aaf5d022ce1417fc94f628d6e8a19093eff5d6d",
  "receipt": {
    "to": null,
    "from": "0x02e037F56728E947e92Af2c05baF7FeF387Ddd06",
    "contractAddress": "0xC0d0DC0e7fE5A7438db4A9cf1Faa04b2A1bF78D6",
    "transactionIndex": 19,
    "gasUsed": "1098925",
    "logsBloom": "0x
    "blockHash": "0xb703b2d0de6f518f1d6300455ee5a4dfbb9bca6f8de75436843ecc9df55b4a0e",
    "transactionHash": "0x899f84a27cda7a367aae67342aaf5d022ce1417fc94f628d6e8a19093eff5d6d",
    "logs": [],
    "blockNumber": 7721231,
    "cumulativeGasUsed": "3752068",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "32dd1857130027c4619df8c447073dac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"AirdropPulledFlashloan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiverId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiverInstance\",\"type\":\"address\"}],\"name\":\"CollateralWrapped\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"NFTfi\",\"events\":{\"AirdropPulledFlashloan(uint256,address,uint256,address,address,bytes)\":{\"params\":{\"borrower\":\"- The address of the borrower.\",\"data\":\"- function selector to be called\",\"loanId\":\"- A unique identifier for this particular loan, sourced from the Loan Coordinator.\",\"nftCollateralContract\":\"- The ERC721 contract of the NFT collateral\",\"nftCollateralId\":\"- The ID within the AirdropReceiver for the NFT being used as collateral for this loan.\",\"target\":\"- address of the airdropping contract\"}},\"CollateralWrapped(uint256,address,uint256,address,uint256,address)\":{\"params\":{\"borrower\":\"- The address of the borrower.\",\"loanId\":\"- A unique identifier for this particular loan, sourced from the Loan Coordinator.\",\"nftCollateralContract\":\"- The contract of the NFT collateral\",\"nftCollateralId\":\"- The ID within the AirdropReceiver for the NFT being used as collateral for this loan.\",\"receiverId\":\"- id of the created AirdropReceiver, takes the place of nftCollateralId on the loan\",\"receiverInstance\":\"- address of the created AirdropReceiver\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"LoanAirdropUtils\",\"version\":1},\"userdoc\":{\"events\":{\"AirdropPulledFlashloan(uint256,address,uint256,address,address,bytes)\":{\"notice\":\"This event is fired whenever a flashloan is initiated to pull an airdrop\"},\"CollateralWrapped(uint256,address,uint256,address,uint256,address)\":{\"notice\":\"This event is fired whenever the collateral gets wrapped in an airdrop receiver\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Helper library for LoanBase\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/loans/direct/loanTypes/LoanAirdropUtils.sol\":\"LoanAirdropUtils\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/airdrop/IAirdropReceiverFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title IAirdropReceiver\\n * @author NFTfi\\n * @dev\\n */\\ninterface IAirdropReceiverFactory {\\n    function createAirdropReceiver(address _to) external returns (address, uint256);\\n}\\n\",\"keccak256\":\"0xea174dd12ddc5a8e621d3dd213f3a0d2814a0d993477ae160449e4926eb62ecc\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IAirdropFlashLoan.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IAirdropFlashLoan {\\n    function pullAirdrop(\\n        address _nftCollateralContract,\\n        uint256 _nftCollateralId,\\n        address _nftWrapper,\\n        address _target,\\n        bytes calldata _data,\\n        address _nftAirdrop,\\n        uint256 _nftAirdropId,\\n        bool _is1155,\\n        uint256 _nftAirdropAmount,\\n        address _beneficiary\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7384764e61cf4bf3bc71e510202558a8f888c720c645b0a874689d2a8d14df7c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDirectLoanCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title IDirectLoanCoordinator\\n * @author NFTfi\\n * @dev DirectLoanCoordinator interface.\\n */\\ninterface IDirectLoanCoordinator {\\n    enum StatusType {\\n        NOT_EXISTS,\\n        NEW,\\n        RESOLVED\\n    }\\n\\n    /**\\n     * @notice This struct contains data related to a loan\\n     *\\n     * @param smartNftId - The id of both the promissory note and obligation receipt.\\n     * @param status - The status in which the loan currently is.\\n     * @param loanContract - Address of the LoanType contract that created the loan.\\n     */\\n    struct Loan {\\n        address loanContract;\\n        uint64 smartNftId;\\n        StatusType status;\\n    }\\n\\n    function registerLoan(address _lender, bytes32 _loanType) external returns (uint32);\\n\\n    function mintObligationReceipt(uint32 _loanId, address _borrower) external;\\n\\n    function resolveLoan(uint32 _loanId) external;\\n\\n    function promissoryNoteToken() external view returns (address);\\n\\n    function obligationReceiptToken() external view returns (address);\\n\\n    function getLoanData(uint32 _loanId) external view returns (Loan memory);\\n\\n    function isValidLoanId(uint32 _loanId, address _loanContract) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa2a71768932bf3400304a6846fd764fe5f78407670b41a5ebaed8950aa035f77\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INftWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title INftTypeRegistry\\n * @author NFTfi\\n * @dev Interface for NFT Wrappers.\\n */\\ninterface INftWrapper {\\n    function transferNFT(\\n        address from,\\n        address to,\\n        address nftContract,\\n        uint256 tokenId\\n    ) external returns (bool);\\n\\n    function isOwner(\\n        address owner,\\n        address nftContract,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n\\n    function wrapAirdropReceiver(\\n        address _recipient,\\n        address _nftContract,\\n        uint256 _nftId,\\n        address _beneficiary\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xab8d7d01ca2b8679af9bc02a2db44192b2153c369bf436185d69e56eb9696b5f\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INftfiHub.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title INftfiHub\\n * @author NFTfi\\n * @dev NftfiHub interface\\n */\\ninterface INftfiHub {\\n    function setContract(string calldata _contractKey, address _contractAddress) external;\\n\\n    function getContract(bytes32 _contractKey) external view returns (address);\\n}\\n\",\"keccak256\":\"0x80259ebf45729166a8524b313741b6ea2acfe8ac9dc15243f018a08cc2b14240\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPermittedERC20s.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IPermittedERC20s {\\n    function getERC20Permit(address _erc20) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd159a7f11adfd21220c0acbb85917b5019a82d4912c2fecb20449b267ca9ca15\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPermittedPartners.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IPermittedPartners {\\n    function getPartnerPermit(address _partner) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x288db42f55648b3d0305f95b1a47132b30a374b380f41ec848b0e5fd02dbd7f8\",\"license\":\"BUSL-1.1\"},\"contracts/loans/direct/loanTypes/IDirectLoanBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\nimport \\\"./LoanData.sol\\\";\\n\\npragma solidity 0.8.4;\\n\\ninterface IDirectLoanBase {\\n    function maximumLoanDuration() external view returns (uint256);\\n\\n    function adminFeeInBasisPoints() external view returns (uint16);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function LOAN_COORDINATOR() external view returns (bytes32);\\n\\n    function loanIdToLoan(uint32)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint32,\\n            uint16,\\n            uint16,\\n            address,\\n            uint64,\\n            address,\\n            address\\n        );\\n\\n    function loanRepaidOrLiquidated(uint32) external view returns (bool);\\n\\n    function getWhetherNonceHasBeenUsedForUser(address _user, uint256 _nonce) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x907a34783f5c832ee22c176feedc4f7523ac35a71b46207585586147a4c6d080\",\"license\":\"BUSL-1.1\"},\"contracts/loans/direct/loanTypes/LoanAirdropUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./IDirectLoanBase.sol\\\";\\nimport \\\"./LoanData.sol\\\";\\nimport \\\"../../../interfaces/IDirectLoanCoordinator.sol\\\";\\nimport \\\"../../../utils/ContractKeys.sol\\\";\\nimport \\\"../../../interfaces/INftfiHub.sol\\\";\\nimport \\\"../../../interfaces/IPermittedPartners.sol\\\";\\nimport \\\"../../../interfaces/IPermittedERC20s.sol\\\";\\nimport \\\"../../../interfaces/IAirdropFlashLoan.sol\\\";\\nimport \\\"../../../interfaces/INftWrapper.sol\\\";\\nimport \\\"../../../airdrop/IAirdropReceiverFactory.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title  LoanAirdropUtils\\n * @author NFTfi\\n * @notice Helper library for LoanBase\\n */\\nlibrary LoanAirdropUtils {\\n    /**\\n     * @notice This event is fired whenever a flashloan is initiated to pull an airdrop\\n     *\\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     * @param  borrower - The address of the borrower.\\n     * @param  nftCollateralId - The ID within the AirdropReceiver for the NFT being used as collateral for this\\n     * loan.\\n     * @param  nftCollateralContract - The ERC721 contract of the NFT collateral\\n     * @param target - address of the airdropping contract\\n     * @param data - function selector to be called\\n     */\\n    event AirdropPulledFlashloan(\\n        uint256 indexed loanId,\\n        address indexed borrower,\\n        uint256 nftCollateralId,\\n        address nftCollateralContract,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @notice This event is fired whenever the collateral gets wrapped in an airdrop receiver\\n     *\\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     * @param  borrower - The address of the borrower.\\n     * @param  nftCollateralId - The ID within the AirdropReceiver for the NFT being used as collateral for this\\n     * loan.\\n     * @param  nftCollateralContract - The contract of the NFT collateral\\n     * @param receiverId - id of the created AirdropReceiver, takes the place of nftCollateralId on the loan\\n     * @param receiverInstance - address of the created AirdropReceiver\\n     */\\n    event CollateralWrapped(\\n        uint256 indexed loanId,\\n        address indexed borrower,\\n        uint256 nftCollateralId,\\n        address nftCollateralContract,\\n        uint256 receiverId,\\n        address receiverInstance\\n    );\\n\\n    function pullAirdrop(\\n        uint32 _loanId,\\n        LoanData.LoanTerms memory _loan,\\n        address _target,\\n        bytes calldata _data,\\n        address _nftAirdrop,\\n        uint256 _nftAirdropId,\\n        bool _is1155,\\n        uint256 _nftAirdropAmount,\\n        INftfiHub _hub\\n    ) external {\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(\\n            _hub.getContract(IDirectLoanBase(address(this)).LOAN_COORDINATOR())\\n        );\\n\\n        address borrower;\\n\\n        // scoped to aviod stack too deep\\n        {\\n            IDirectLoanCoordinator.Loan memory loanCoordinatorData = loanCoordinator.getLoanData(_loanId);\\n            uint256 smartNftId = loanCoordinatorData.smartNftId;\\n            if (_loan.borrower != address(0)) {\\n                borrower = _loan.borrower;\\n            } else {\\n                borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(smartNftId);\\n            }\\n        }\\n\\n        require(msg.sender == borrower, \\\"Only borrower can airdrop\\\");\\n\\n        {\\n            IAirdropFlashLoan airdropFlashLoan = IAirdropFlashLoan(_hub.getContract(ContractKeys.AIRDROP_FLASH_LOAN));\\n\\n            _transferNFT(_loan, address(this), address(airdropFlashLoan));\\n\\n            airdropFlashLoan.pullAirdrop(\\n                _loan.nftCollateralContract,\\n                _loan.nftCollateralId,\\n                _loan.nftCollateralWrapper,\\n                _target,\\n                _data,\\n                _nftAirdrop,\\n                _nftAirdropId,\\n                _is1155,\\n                _nftAirdropAmount,\\n                borrower\\n            );\\n        }\\n\\n        // revert if the collateral hasn't been transferred back before it ends\\n        require(\\n            INftWrapper(_loan.nftCollateralWrapper).isOwner(\\n                address(this),\\n                _loan.nftCollateralContract,\\n                _loan.nftCollateralId\\n            ),\\n            \\\"Collateral should be returned\\\"\\n        );\\n\\n        emit AirdropPulledFlashloan(\\n            _loanId,\\n            borrower,\\n            _loan.nftCollateralId,\\n            _loan.nftCollateralContract,\\n            _target,\\n            _data\\n        );\\n    }\\n\\n    function wrapCollateral(\\n        uint32 _loanId,\\n        LoanData.LoanTerms storage _loan,\\n        INftfiHub _hub\\n    ) external returns (address instance, uint256 receiverId) {\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(\\n            _hub.getContract(IDirectLoanBase(address(this)).LOAN_COORDINATOR())\\n        );\\n        // Fetch the current lender of the promissory note corresponding to this overdue loan.\\n        IDirectLoanCoordinator.Loan memory loanCoordinatorData = loanCoordinator.getLoanData(_loanId);\\n        uint256 smartNftId = loanCoordinatorData.smartNftId;\\n\\n        address borrower;\\n\\n        if (_loan.borrower != address(0)) {\\n            borrower = _loan.borrower;\\n        } else {\\n            borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(smartNftId);\\n        }\\n\\n        require(msg.sender == borrower, \\\"Only borrower can wrapp\\\");\\n\\n        IAirdropReceiverFactory factory = IAirdropReceiverFactory(_hub.getContract(ContractKeys.AIRDROP_FACTORY));\\n        (instance, receiverId) = factory.createAirdropReceiver(address(this));\\n\\n        // transfer collateral to airdrop receiver wrapper\\n        _transferNFTtoAirdropReceiver(_loan, instance, borrower);\\n\\n        emit CollateralWrapped(\\n            _loanId,\\n            borrower,\\n            _loan.nftCollateralId,\\n            _loan.nftCollateralContract,\\n            receiverId,\\n            instance\\n        );\\n\\n        // set the receiver as the new collateral\\n        _loan.nftCollateralContract = instance;\\n        _loan.nftCollateralId = receiverId;\\n    }\\n\\n    /**\\n     * @dev Transfers several types of NFTs using a wrapper that knows how to handle each case.\\n     *\\n     * @param _loan -\\n     * @param _sender - Current owner of the NFT\\n     * @param _recipient - Recipient of the transfer\\n     */\\n    function _transferNFT(\\n        LoanData.LoanTerms memory _loan,\\n        address _sender,\\n        address _recipient\\n    ) internal {\\n        Address.functionDelegateCall(\\n            _loan.nftCollateralWrapper,\\n            abi.encodeWithSelector(\\n                INftWrapper(_loan.nftCollateralWrapper).transferNFT.selector,\\n                _sender,\\n                _recipient,\\n                _loan.nftCollateralContract,\\n                _loan.nftCollateralId\\n            ),\\n            \\\"NFT not successfully transferred\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfers several types of NFTs to an airdrop receiver with an airdrop beneficiary\\n     * address attached as supplementing data using a wrapper that knows how to handle each case.\\n     *\\n     * @param _loan -\\n     * @param _airdropReceiverInstance - Recipient of the transfer\\n     * @param _airdropBeneficiary - Beneficiary of the future airdops\\n     */\\n    function _transferNFTtoAirdropReceiver(\\n        LoanData.LoanTerms memory _loan,\\n        address _airdropReceiverInstance,\\n        address _airdropBeneficiary\\n    ) internal {\\n        Address.functionDelegateCall(\\n            _loan.nftCollateralWrapper,\\n            abi.encodeWithSelector(\\n                INftWrapper(_loan.nftCollateralWrapper).wrapAirdropReceiver.selector,\\n                _airdropReceiverInstance,\\n                _loan.nftCollateralContract,\\n                _loan.nftCollateralId,\\n                _airdropBeneficiary\\n            ),\\n            \\\"NFT was not successfully migrated\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2dbfc7f3766b784046b3def6f5b34d9ff3c0bb9f78a8236694c1396ac6ef496f\",\"license\":\"BUSL-1.1\"},\"contracts/loans/direct/loanTypes/LoanData.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title  LoanData\\n * @author NFTfi\\n * @notice An interface containg the main Loan struct shared by Direct Loans types.\\n */\\ninterface LoanData {\\n    /* ********** */\\n    /* DATA TYPES */\\n    /* ********** */\\n\\n    /**\\n     * @notice The main Loan Terms struct. This data is saved upon loan creation.\\n     *\\n     * @param loanERC20Denomination - The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * @param loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param maximumRepaymentAmount - The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * @param nftCollateralContract - The address of the the NFT collateral contract.\\n     * @param nftCollateralWrapper - The NFTfi wrapper of the NFT collateral contract.\\n     * @param nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * @param loanStartTime - The block.timestamp when the loan first began (measured in seconds).\\n     * @param loanDuration - The amount of time (measured in seconds) that can elapse before the lender can liquidate\\n     * the loan and seize the underlying collateral NFT.\\n     * @param loanInterestRateForDurationInBasisPoints - This is the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * @param loanAdminFeeInBasisPoints - The percent (measured in basis points) of the interest earned that will be\\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     * @param borrower\\n     */\\n    struct LoanTerms {\\n        uint256 loanPrincipalAmount;\\n        uint256 maximumRepaymentAmount;\\n        uint256 nftCollateralId;\\n        address loanERC20Denomination;\\n        uint32 loanDuration;\\n        uint16 loanInterestRateForDurationInBasisPoints;\\n        uint16 loanAdminFeeInBasisPoints;\\n        address nftCollateralWrapper;\\n        uint64 loanStartTime;\\n        address nftCollateralContract;\\n        address borrower;\\n    }\\n\\n    /**\\n     * @notice Some extra Loan's settings struct. This data is saved upon loan creation.\\n     * We need this to avoid stack too deep errors.\\n     *\\n     * @param revenueSharePartner - The address of the partner that will receive the revenue share.\\n     * @param revenueShareInBasisPoints - The percent (measured in basis points) of the admin fee amount that will be\\n     * taken as a revenue share for a t\\n     * @param referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.he partner, at the moment\\n     * the loan is begun.\\n     */\\n    struct LoanExtras {\\n        address revenueSharePartner;\\n        uint16 revenueShareInBasisPoints;\\n        uint16 referralFeeInBasisPoints;\\n    }\\n\\n    /**\\n     * @notice The offer made by the lender. Used as parameter on both acceptOffer (initiated by the borrower) and\\n     * acceptListing (initiated by the lender).\\n     *\\n     * @param loanERC20Denomination - The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * @param loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param maximumRepaymentAmount - The maximum amount of money that the borrower would be required to retrieve their\\n     *  collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always\\n     * have to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * @param nftCollateralContract - The address of the ERC721 contract of the NFT collateral.\\n     * @param nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * @param referrer - The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * this there is no referrer.\\n     * @param loanDuration - The amount of time (measured in seconds) that can elapse before the lender can liquidate\\n     * the loan and seize the underlying collateral NFT.\\n     * @param loanAdminFeeInBasisPoints - The percent (measured in basis points) of the interest earned that will be\\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     */\\n    struct Offer {\\n        uint256 loanPrincipalAmount;\\n        uint256 maximumRepaymentAmount;\\n        uint256 nftCollateralId;\\n        address nftCollateralContract;\\n        uint32 loanDuration;\\n        uint16 loanAdminFeeInBasisPoints;\\n        address loanERC20Denomination;\\n        address referrer;\\n    }\\n\\n    /**\\n     * @notice Signature related params. Used as parameter on both acceptOffer (containing borrower signature) and\\n     * acceptListing (containing lender signature).\\n     *\\n     * @param signer - The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * @param nonce - The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     * @param expiry - Date when the signature expires\\n     * @param signature - The ECDSA signature of the borrower or the lender, obtained off-chain ahead of time, signing\\n     * the following combination of parameters:\\n     * - Borrower\\n     *   - ListingTerms.loanERC20Denomination,\\n     *   - ListingTerms.minLoanPrincipalAmount,\\n     *   - ListingTerms.maxLoanPrincipalAmount,\\n     *   - ListingTerms.nftCollateralContract,\\n     *   - ListingTerms.nftCollateralId,\\n     *   - ListingTerms.revenueSharePartner,\\n     *   - ListingTerms.minLoanDuration,\\n     *   - ListingTerms.maxLoanDuration,\\n     *   - ListingTerms.maxInterestRateForDurationInBasisPoints,\\n     *   - ListingTerms.referralFeeInBasisPoints,\\n     *   - Signature.signer,\\n     *   - Signature.nonce,\\n     *   - Signature.expiry,\\n     *   - address of the loan type contract\\n     *   - chainId\\n     * - Lender:\\n     *   - Offer.loanERC20Denomination\\n     *   - Offer.loanPrincipalAmount\\n     *   - Offer.maximumRepaymentAmount\\n     *   - Offer.nftCollateralContract\\n     *   - Offer.nftCollateralId\\n     *   - Offer.referrer\\n     *   - Offer.loanDuration\\n     *   - Offer.loanAdminFeeInBasisPoints\\n     *   - Signature.signer,\\n     *   - Signature.nonce,\\n     *   - Signature.expiry,\\n     *   - address of the loan type contract\\n     *   - chainId\\n     */\\n    struct Signature {\\n        uint256 nonce;\\n        uint256 expiry;\\n        address signer;\\n        bytes signature;\\n    }\\n\\n    /**\\n     * @notice Some extra parameters that the borrower needs to set when accepting an offer.\\n     *\\n     * @param revenueSharePartner - The address of the partner that will receive the revenue share.\\n     * @param referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\\n     */\\n    struct BorrowerSettings {\\n        address revenueSharePartner;\\n        uint16 referralFeeInBasisPoints;\\n    }\\n\\n    /**\\n     * @notice Terms the borrower set off-chain and is willing to accept automatically when fulfiled by a lender's\\n     * offer.\\n     *\\n     * @param loanERC20Denomination - The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * @param minLoanPrincipalAmount - The minumum sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param maxLoanPrincipalAmount - The  sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param maximumRepaymentAmount - The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * @param nftCollateralContract - The address of the ERC721 contract of the NFT collateral.\\n     * @param nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * @param revenueSharePartner - The address of the partner that will receive the revenue share.\\n     * @param minLoanDuration - The minumum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param maxLoanDuration - The maximum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param maxInterestRateForDurationInBasisPoints - This is maximum the interest rate (measured in basis points,\\n     * e.g. hundreths of a percent) for the loan.\\n     * @param referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\\n     */\\n    struct ListingTerms {\\n        uint256 minLoanPrincipalAmount;\\n        uint256 maxLoanPrincipalAmount;\\n        uint256 nftCollateralId;\\n        address nftCollateralContract;\\n        uint32 minLoanDuration;\\n        uint32 maxLoanDuration;\\n        uint16 maxInterestRateForDurationInBasisPoints;\\n        uint16 referralFeeInBasisPoints;\\n        address revenueSharePartner;\\n        address loanERC20Denomination;\\n    }\\n}\\n\",\"keccak256\":\"0x1d2c0ce1b56a119665c118d44f7a210ec3f576f55e25808823b74ac72fab4fc9\",\"license\":\"BUSL-1.1\"},\"contracts/utils/ContractKeys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ContractKeys\\n * @author NFTfi\\n * @dev Common library for contract keys\\n */\\nlibrary ContractKeys {\\n    bytes32 public constant PERMITTED_ERC20S = bytes32(\\\"PERMITTED_ERC20S\\\");\\n    bytes32 public constant PERMITTED_NFTS = bytes32(\\\"PERMITTED_NFTS\\\");\\n    bytes32 public constant PERMITTED_PARTNERS = bytes32(\\\"PERMITTED_PARTNERS\\\");\\n    bytes32 public constant NFT_TYPE_REGISTRY = bytes32(\\\"NFT_TYPE_REGISTRY\\\");\\n    bytes32 public constant LOAN_REGISTRY = bytes32(\\\"LOAN_REGISTRY\\\");\\n    bytes32 public constant PERMITTED_SNFT_RECEIVER = bytes32(\\\"PERMITTED_SNFT_RECEIVER\\\");\\n    bytes32 public constant PERMITTED_BUNDLE_ERC20S = bytes32(\\\"PERMITTED_BUNDLE_ERC20S\\\");\\n    bytes32 public constant PERMITTED_AIRDROPS = bytes32(\\\"PERMITTED_AIRDROPS\\\");\\n    bytes32 public constant AIRDROP_RECEIVER = bytes32(\\\"AIRDROP_RECEIVER\\\");\\n    bytes32 public constant AIRDROP_FACTORY = bytes32(\\\"AIRDROP_FACTORY\\\");\\n    bytes32 public constant AIRDROP_FLASH_LOAN = bytes32(\\\"AIRDROP_FLASH_LOAN\\\");\\n    bytes32 public constant NFTFI_BUNDLER = bytes32(\\\"NFTFI_BUNDLER\\\");\\n\\n    string public constant AIRDROP_WRAPPER_STRING = \\\"AirdropWrapper\\\";\\n\\n    /**\\n     * @notice Returns the bytes32 representation of a string\\n     * @param _key the string key\\n     * @return id bytes32 representation\\n     */\\n    function getIdFromStringKey(string memory _key) external pure returns (bytes32 id) {\\n        require(bytes(_key).length <= 32, \\\"invalid key\\\");\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := mload(add(_key, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2fa7e704ddc4095a739ac5dca2cd49cb261f7b881778038398e9e7d5063c1a25\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6112e961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806324ed6efa146100455780639237a88214610088575b600080fd5b81801561005157600080fd5b506100656100603660046110b3565b6100aa565b604080516001600160a01b03909316835260208301919091520160405180910390f35b81801561009457600080fd5b506100a86100a3366004610f3b565b6105fa565b005b6000806000836001600160a01b031663e16c7d98306001600160a01b03166377cfa9916040518163ffffffff1660e01b815260040160206040518083038186803b1580156100f757600080fd5b505afa15801561010b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012f9190610ea4565b6040518263ffffffff1660e01b815260040161014d91815260200190565b60206040518083038186803b15801561016557600080fd5b505afa158015610179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019d9190610e3f565b60405163e6c5a54160e01b815263ffffffff881660048201529091506000906001600160a01b0383169063e6c5a5419060240160606040518083038186803b1580156101e857600080fd5b505afa1580156101fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102209190610ebc565b602081015160068801549192506001600160401b0316906000906001600160a01b03161561025c575060068701546001600160a01b031661034d565b836001600160a01b0316638208e76c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561029557600080fd5b505afa1580156102a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cd9190610e3f565b6001600160a01b0316636352211e836040518263ffffffff1660e01b81526004016102fa91815260200190565b60206040518083038186803b15801561031257600080fd5b505afa158015610326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034a9190610e3f565b90505b336001600160a01b038216146103a45760405162461bcd60e51b815260206004820152601760248201527604f6e6c7920626f72726f7765722063616e20777261707604c1b60448201526064015b60405180910390fd5b604051631c2d8fb360e31b81526e41495244524f505f464143544f525960881b60048201526000906001600160a01b0389169063e16c7d989060240160206040518083038186803b1580156103f857600080fd5b505afa15801561040c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104309190610e3f565b604051637a52a1f960e11b81523060048201529091506001600160a01b0382169063f4a543f2906024016040805180830381600087803b15801561047357600080fd5b505af1158015610487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ab9190610e5b565b60408051610160810182528c54815260018d0154602082015260028d01549181019190915260038c01546001600160a01b038082166060840152600160a01b80830463ffffffff166080850152600160c01b830461ffff90811660a0860152600160d01b90930490921660c084015260048e015480821660e0850152919091046001600160401b031661010083015260058d0154811661012083015260068d0154166101408201529198509650610563908884610b64565b600289015460058a0154604080519283526001600160a01b0391821660208401528201889052888116606083015283169063ffffffff8c16907fc7f9ce9d1921361882f1a6c4297e86042b75f9a6f01c6a042a492ffa32d5eda09060800160405180910390a3505050506005850180546001600160a01b0319166001600160a01b0385161790555060029093018390559391925050565b6000816001600160a01b031663e16c7d98306001600160a01b03166377cfa9916040518163ffffffff1660e01b815260040160206040518083038186803b15801561064457600080fd5b505afa158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c9190610ea4565b6040518263ffffffff1660e01b815260040161069a91815260200190565b60206040518083038186803b1580156106b257600080fd5b505afa1580156106c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ea9190610e3f565b60405163e6c5a54160e01b815263ffffffff8d16600482015290915060009081906001600160a01b0384169063e6c5a5419060240160606040518083038186803b15801561073757600080fd5b505afa15801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f9190610ebc565b60208101516101408e01519192506001600160401b0316906001600160a01b0316156107a2578c61014001519250610893565b836001600160a01b0316638208e76c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107db57600080fd5b505afa1580156107ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108139190610e3f565b6001600160a01b0316636352211e826040518263ffffffff1660e01b815260040161084091815260200190565b60206040518083038186803b15801561085857600080fd5b505afa15801561086c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108909190610e3f565b92505b5050336001600160a01b038216146108e95760405162461bcd60e51b815260206004820152601960248201527804f6e6c7920626f72726f7765722063616e2061697264726f7603c1b604482015260640161039b565b604051631c2d8fb360e31b81527120a4a9222927a82fa32620a9a42fa627a0a760711b60048201526000906001600160a01b0385169063e16c7d989060240160206040518083038186803b15801561094057600080fd5b505afa158015610954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109789190610e3f565b90506109858c3083610bf6565b806001600160a01b0316630846e9408d61012001518e604001518f60e001518f8f8f8f8f8f8f8d6040518c63ffffffff1660e01b81526004016109d29b9a99989796959493929190611137565b600060405180830381600087803b1580156109ec57600080fd5b505af1158015610a00573d6000803e3d6000fd5b50505050508a60e001516001600160a01b031663f370e8c5308d61012001518e604001516040518463ffffffff1660e01b8152600401610a61939291906001600160a01b039384168152919092166020820152604081019190915260600190565b60206040518083038186803b158015610a7957600080fd5b505afa158015610a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab19190610e88565b610afd5760405162461bcd60e51b815260206004820152601d60248201527f436f6c6c61746572616c2073686f756c642062652072657475726e6564000000604482015260640161039b565b806001600160a01b03168c63ffffffff167faaf2e5ae3768d93ab0323bdd249040a63fbfabc559387211ecb3813990d294798d604001518e61012001518e8e8e604051610b4e9594939291906111df565b60405180910390a3505050505050505050505050565b60e083015161012084015160408086015181516001600160a01b038781166024830152938416604482015260648101919091529184166084808401919091528151808403909101815260a49092018152602080830180516001600160e01b03166363bc1d5560e11b1790528151606081019092526021808352610bf0949392916112bc90830139610c95565b50505050565b60e083015161012084015160408086015181516001600160a01b038781166024830152868116604483015290931660648401526084808401919091528151808403909101815260a49092018152602080830180516001600160e01b031663b030667160e01b17905281518083019092528082527f4e4654206e6f74207375636365737366756c6c79207472616e7366657272656490820152610bf09291905b60606001600160a01b0384163b610cfd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161039b565b600080856001600160a01b031685604051610d18919061111b565b600060405180830381855af49150503d8060008114610d53576040519150601f19603f3d011682016040523d82523d6000602084013e610d58565b606091505b5091509150610d68828286610d74565b925050505b9392505050565b60608315610d83575081610d6d565b825115610d935782518084602001fd5b8160405162461bcd60e51b815260040161039b91906111ac565b8035610db881611280565b919050565b8035610db881611298565b60008083601f840112610dd9578182fd5b5081356001600160401b03811115610def578182fd5b602083019150836020828501011115610e0757600080fd5b9250929050565b803561ffff81168114610db857600080fd5b803563ffffffff81168114610db857600080fd5b8035610db8816112a6565b600060208284031215610e50578081fd5b8151610d6d81611280565b60008060408385031215610e6d578081fd5b8251610e7881611280565b6020939093015192949293505050565b600060208284031215610e99578081fd5b8151610d6d81611298565b600060208284031215610eb5578081fd5b5051919050565b600060608284031215610ecd578081fd5b604051606081018181106001600160401b0382111715610efb57634e487b7160e01b83526041600452602483fd5b6040528251610f0981611280565b81526020830151610f19816112a6565b6020820152604083015160038110610f2f578283fd5b60408201529392505050565b6000806000806000806000806000808a8c03610260811215610f5b578687fd5b610f648c610e20565b9a50610160601f1982011215610f78578687fd5b50610f8161121d565b60208c0135815260408c0135602082015260608c01356040820152610fa860808d01610dad565b6060820152610fb960a08d01610e20565b6080820152610fca60c08d01610e0e565b60a0820152610fdb60e08d01610e0e565b60c0820152610100610fee818e01610dad565b60e0830152610120611001818f01610e34565b828401526101409150611015828f01610dad565b908301526110266101608e01610dad565b9082015298506110396101808c01610dad565b97506101a08b01356001600160401b03811115611054578687fd5b6110608d828e01610dc8565b909850965061107490506101c08c01610dad565b94506101e08b0135935061108b6102008c01610dbd565b92506102208b013591506110a26102408c01610dad565b90509295989b9194979a5092959850565b6000806000606084860312156110c7578283fd5b6110d084610e20565b92506020840135915060408401356110e781611280565b809150509250925092565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000825161112d818460208701611254565b9190910192915050565b6001600160a01b038c81168252602082018c90528a811660408301528981166060830152610140608083018190526000916111758483018b8d6110f2565b98811660a085015260c0840197909752505092151560e0840152610100830191909152909116610120909101529695505050505050565b60208152600082518060208401526111cb816040850160208701611254565b601f01601f19169190910160400192915050565b8581526001600160a01b0385811660208301528416604082015260806060820181905260009061121290830184866110f2565b979650505050505050565b60405161016081016001600160401b038111828210171561124e57634e487b7160e01b600052604160045260246000fd5b60405290565b60005b8381101561126f578181015183820152602001611257565b83811115610bf05750506000910152565b6001600160a01b038116811461129557600080fd5b50565b801515811461129557600080fd5b6001600160401b038116811461129557600080fdfe4e465420776173206e6f74207375636365737366756c6c79206d69677261746564a164736f6c6343000804000a",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806324ed6efa146100455780639237a88214610088575b600080fd5b81801561005157600080fd5b506100656100603660046110b3565b6100aa565b604080516001600160a01b03909316835260208301919091520160405180910390f35b81801561009457600080fd5b506100a86100a3366004610f3b565b6105fa565b005b6000806000836001600160a01b031663e16c7d98306001600160a01b03166377cfa9916040518163ffffffff1660e01b815260040160206040518083038186803b1580156100f757600080fd5b505afa15801561010b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012f9190610ea4565b6040518263ffffffff1660e01b815260040161014d91815260200190565b60206040518083038186803b15801561016557600080fd5b505afa158015610179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019d9190610e3f565b60405163e6c5a54160e01b815263ffffffff881660048201529091506000906001600160a01b0383169063e6c5a5419060240160606040518083038186803b1580156101e857600080fd5b505afa1580156101fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102209190610ebc565b602081015160068801549192506001600160401b0316906000906001600160a01b03161561025c575060068701546001600160a01b031661034d565b836001600160a01b0316638208e76c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561029557600080fd5b505afa1580156102a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cd9190610e3f565b6001600160a01b0316636352211e836040518263ffffffff1660e01b81526004016102fa91815260200190565b60206040518083038186803b15801561031257600080fd5b505afa158015610326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034a9190610e3f565b90505b336001600160a01b038216146103a45760405162461bcd60e51b815260206004820152601760248201527604f6e6c7920626f72726f7765722063616e20777261707604c1b60448201526064015b60405180910390fd5b604051631c2d8fb360e31b81526e41495244524f505f464143544f525960881b60048201526000906001600160a01b0389169063e16c7d989060240160206040518083038186803b1580156103f857600080fd5b505afa15801561040c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104309190610e3f565b604051637a52a1f960e11b81523060048201529091506001600160a01b0382169063f4a543f2906024016040805180830381600087803b15801561047357600080fd5b505af1158015610487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ab9190610e5b565b60408051610160810182528c54815260018d0154602082015260028d01549181019190915260038c01546001600160a01b038082166060840152600160a01b80830463ffffffff166080850152600160c01b830461ffff90811660a0860152600160d01b90930490921660c084015260048e015480821660e0850152919091046001600160401b031661010083015260058d0154811661012083015260068d0154166101408201529198509650610563908884610b64565b600289015460058a0154604080519283526001600160a01b0391821660208401528201889052888116606083015283169063ffffffff8c16907fc7f9ce9d1921361882f1a6c4297e86042b75f9a6f01c6a042a492ffa32d5eda09060800160405180910390a3505050506005850180546001600160a01b0319166001600160a01b0385161790555060029093018390559391925050565b6000816001600160a01b031663e16c7d98306001600160a01b03166377cfa9916040518163ffffffff1660e01b815260040160206040518083038186803b15801561064457600080fd5b505afa158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c9190610ea4565b6040518263ffffffff1660e01b815260040161069a91815260200190565b60206040518083038186803b1580156106b257600080fd5b505afa1580156106c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ea9190610e3f565b60405163e6c5a54160e01b815263ffffffff8d16600482015290915060009081906001600160a01b0384169063e6c5a5419060240160606040518083038186803b15801561073757600080fd5b505afa15801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f9190610ebc565b60208101516101408e01519192506001600160401b0316906001600160a01b0316156107a2578c61014001519250610893565b836001600160a01b0316638208e76c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107db57600080fd5b505afa1580156107ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108139190610e3f565b6001600160a01b0316636352211e826040518263ffffffff1660e01b815260040161084091815260200190565b60206040518083038186803b15801561085857600080fd5b505afa15801561086c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108909190610e3f565b92505b5050336001600160a01b038216146108e95760405162461bcd60e51b815260206004820152601960248201527804f6e6c7920626f72726f7765722063616e2061697264726f7603c1b604482015260640161039b565b604051631c2d8fb360e31b81527120a4a9222927a82fa32620a9a42fa627a0a760711b60048201526000906001600160a01b0385169063e16c7d989060240160206040518083038186803b15801561094057600080fd5b505afa158015610954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109789190610e3f565b90506109858c3083610bf6565b806001600160a01b0316630846e9408d61012001518e604001518f60e001518f8f8f8f8f8f8f8d6040518c63ffffffff1660e01b81526004016109d29b9a99989796959493929190611137565b600060405180830381600087803b1580156109ec57600080fd5b505af1158015610a00573d6000803e3d6000fd5b50505050508a60e001516001600160a01b031663f370e8c5308d61012001518e604001516040518463ffffffff1660e01b8152600401610a61939291906001600160a01b039384168152919092166020820152604081019190915260600190565b60206040518083038186803b158015610a7957600080fd5b505afa158015610a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab19190610e88565b610afd5760405162461bcd60e51b815260206004820152601d60248201527f436f6c6c61746572616c2073686f756c642062652072657475726e6564000000604482015260640161039b565b806001600160a01b03168c63ffffffff167faaf2e5ae3768d93ab0323bdd249040a63fbfabc559387211ecb3813990d294798d604001518e61012001518e8e8e604051610b4e9594939291906111df565b60405180910390a3505050505050505050505050565b60e083015161012084015160408086015181516001600160a01b038781166024830152938416604482015260648101919091529184166084808401919091528151808403909101815260a49092018152602080830180516001600160e01b03166363bc1d5560e11b1790528151606081019092526021808352610bf0949392916112bc90830139610c95565b50505050565b60e083015161012084015160408086015181516001600160a01b038781166024830152868116604483015290931660648401526084808401919091528151808403909101815260a49092018152602080830180516001600160e01b031663b030667160e01b17905281518083019092528082527f4e4654206e6f74207375636365737366756c6c79207472616e7366657272656490820152610bf09291905b60606001600160a01b0384163b610cfd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161039b565b600080856001600160a01b031685604051610d18919061111b565b600060405180830381855af49150503d8060008114610d53576040519150601f19603f3d011682016040523d82523d6000602084013e610d58565b606091505b5091509150610d68828286610d74565b925050505b9392505050565b60608315610d83575081610d6d565b825115610d935782518084602001fd5b8160405162461bcd60e51b815260040161039b91906111ac565b8035610db881611280565b919050565b8035610db881611298565b60008083601f840112610dd9578182fd5b5081356001600160401b03811115610def578182fd5b602083019150836020828501011115610e0757600080fd5b9250929050565b803561ffff81168114610db857600080fd5b803563ffffffff81168114610db857600080fd5b8035610db8816112a6565b600060208284031215610e50578081fd5b8151610d6d81611280565b60008060408385031215610e6d578081fd5b8251610e7881611280565b6020939093015192949293505050565b600060208284031215610e99578081fd5b8151610d6d81611298565b600060208284031215610eb5578081fd5b5051919050565b600060608284031215610ecd578081fd5b604051606081018181106001600160401b0382111715610efb57634e487b7160e01b83526041600452602483fd5b6040528251610f0981611280565b81526020830151610f19816112a6565b6020820152604083015160038110610f2f578283fd5b60408201529392505050565b6000806000806000806000806000808a8c03610260811215610f5b578687fd5b610f648c610e20565b9a50610160601f1982011215610f78578687fd5b50610f8161121d565b60208c0135815260408c0135602082015260608c01356040820152610fa860808d01610dad565b6060820152610fb960a08d01610e20565b6080820152610fca60c08d01610e0e565b60a0820152610fdb60e08d01610e0e565b60c0820152610100610fee818e01610dad565b60e0830152610120611001818f01610e34565b828401526101409150611015828f01610dad565b908301526110266101608e01610dad565b9082015298506110396101808c01610dad565b97506101a08b01356001600160401b03811115611054578687fd5b6110608d828e01610dc8565b909850965061107490506101c08c01610dad565b94506101e08b0135935061108b6102008c01610dbd565b92506102208b013591506110a26102408c01610dad565b90509295989b9194979a5092959850565b6000806000606084860312156110c7578283fd5b6110d084610e20565b92506020840135915060408401356110e781611280565b809150509250925092565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000825161112d818460208701611254565b9190910192915050565b6001600160a01b038c81168252602082018c90528a811660408301528981166060830152610140608083018190526000916111758483018b8d6110f2565b98811660a085015260c0840197909752505092151560e0840152610100830191909152909116610120909101529695505050505050565b60208152600082518060208401526111cb816040850160208701611254565b601f01601f19169190910160400192915050565b8581526001600160a01b0385811660208301528416604082015260806060820181905260009061121290830184866110f2565b979650505050505050565b60405161016081016001600160401b038111828210171561124e57634e487b7160e01b600052604160045260246000fd5b60405290565b60005b8381101561126f578181015183820152602001611257565b83811115610bf05750506000910152565b6001600160a01b038116811461129557600080fd5b50565b801515811461129557600080fd5b6001600160401b038116811461129557600080fdfe4e465420776173206e6f74207375636365737366756c6c79206d69677261746564a164736f6c6343000804000a",
  "devdoc": {
    "author": "NFTfi",
    "events": {
      "AirdropPulledFlashloan(uint256,address,uint256,address,address,bytes)": {
        "params": {
          "borrower": "- The address of the borrower.",
          "data": "- function selector to be called",
          "loanId": "- A unique identifier for this particular loan, sourced from the Loan Coordinator.",
          "nftCollateralContract": "- The ERC721 contract of the NFT collateral",
          "nftCollateralId": "- The ID within the AirdropReceiver for the NFT being used as collateral for this loan.",
          "target": "- address of the airdropping contract"
        }
      },
      "CollateralWrapped(uint256,address,uint256,address,uint256,address)": {
        "params": {
          "borrower": "- The address of the borrower.",
          "loanId": "- A unique identifier for this particular loan, sourced from the Loan Coordinator.",
          "nftCollateralContract": "- The contract of the NFT collateral",
          "nftCollateralId": "- The ID within the AirdropReceiver for the NFT being used as collateral for this loan.",
          "receiverId": "- id of the created AirdropReceiver, takes the place of nftCollateralId on the loan",
          "receiverInstance": "- address of the created AirdropReceiver"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "title": "LoanAirdropUtils",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AirdropPulledFlashloan(uint256,address,uint256,address,address,bytes)": {
        "notice": "This event is fired whenever a flashloan is initiated to pull an airdrop"
      },
      "CollateralWrapped(uint256,address,uint256,address,uint256,address)": {
        "notice": "This event is fired whenever the collateral gets wrapped in an airdrop receiver"
      }
    },
    "kind": "user",
    "methods": {},
    "notice": "Helper library for LoanBase",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}